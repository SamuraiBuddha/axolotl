{"type": "legal_to_bcl", "input": "Requirement for special sign illumination: When sign.purpose in [\"exit\", \"no_exit\", \"directional\"] and must:, it is required that illumination(sign.face) >= 5.foot_candles and let brightness_values = measure_grid(sign.face, resolution=2.inches)", "output": "rule special_sign_illumination:\n    where:\n        sign.purpose in [\"exit\", \"no_exit\", \"directional\"]\n        must:\n        illumination(sign.face) >= 5.foot_candles\n        let brightness_values = measure_grid(sign.face, resolution=2.inches)\n        must: max(brightness_values) / min(brightness_values) <= 10\n        let viewing_angle = atan(sign.height / viewing_distance)\n        must: contrast_ratio(sign.text, sign.background) >=\n        interpolate(viewing_angle, {0: 5, 30: 7, 60: 10})\n        if emergency_lighting.required:\n        must: sign.power_source.includes(\"emergency\")\n        must: emergency_illumination(sign) >= normal_illumination(sign) * 0.6\n        must: transfer_time(normal_power, emergency_power) <= 10.seconds\n    must:\n        illumination(sign.face) >= 5.foot_candles\n        let brightness_values = measure_grid(sign.face, resolution=2.inches)\n        must: max(brightness_values) / min(brightness_values) <= 10\n        let viewing_angle = atan(sign.height / viewing_distance)\n        must: contrast_ratio(sign.text, sign.background) >=\n        interpolate(viewing_angle, {0: 5, 30: 7, 60: 10})\n        if emergency_lighting.required:\n        must: sign.power_source.includes(\"emergency\")\n        must: emergency_illumination(sign) >= normal_illumination(sign) * 0.6\n        must: transfer_time(normal_power, emergency_power) <= 10.seconds\n", "rule_name": "special_sign_illumination"}
{"type": "bcl_to_physics", "input": "rule special_sign_illumination with conditions: illumination(sign.face) >= 5.foot_candles, let brightness_values = measure_grid(sign.face, resolution=2.inches)", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "special_sign_illumination"}
{"type": "bcl_completion", "input": "rule special_sign_illumination:\n    where:\n        sign.purpose in [\"exit\", \"no_exit\", \"directional\"]\n    # Complete this rule", "output": "rule special_sign_illumination:\n    where:\n        sign.purpose in [\"exit\", \"no_exit\", \"directional\"]\n        must:\n        illumination(sign.face) >= 5.foot_candles\n        let brightness_values = measure_grid(sign.face, resolution=2.inches)\n        must: max(brightness_values) / min(brightness_values) <= 10\n        let viewing_angle = atan(sign.height / viewing_distance)\n        must: contrast_ratio(sign.text, sign.background) >=\n        interpolate(viewing_angle, {0: 5, 30: 7, 60: 10})\n        if emergency_lighting.required:\n        must: sign.power_source.includes(\"emergency\")\n        must: emergency_illumination(sign) >= normal_illumination(sign) * 0.6\n        must: transfer_time(normal_power, emergency_power) <= 10.seconds\n    must:\n        illumination(sign.face) >= 5.foot_candles\n        let brightness_values = measure_grid(sign.face, resolution=2.inches)\n        must: max(brightness_values) / min(brightness_values) <= 10\n        let viewing_angle = atan(sign.height / viewing_distance)\n        must: contrast_ratio(sign.text, sign.background) >=\n        interpolate(viewing_angle, {0: 5, 30: 7, 60: 10})\n        if emergency_lighting.required:\n        must: sign.power_source.includes(\"emergency\")\n        must: emergency_illumination(sign) >= normal_illumination(sign) * 0.6\n        must: transfer_time(normal_power, emergency_power) <= 10.seconds\n", "rule_name": "special_sign_illumination"}
{"type": "legal_to_bcl", "input": "Requirement for no exit identification: When not is_exit(opening) and and not is_exit_access(opening), it is required that sign(opening).text = \"NO EXIT\" and sign(opening).height >= 7.inches", "output": "rule no_exit_identification:\n    where:\n        not is_exit(opening)\n        and not is_exit_access(opening)\n        and count(confusion_factors.true) >= 2\n        must:\n        sign(opening).text = \"NO EXIT\"\n        sign(opening).height >= 7.inches\n        sign(opening).text_height >= 1.inch\n        sign(opening).background_color = \"red\"  # Though not specified in this section\n    must:\n        sign(opening).text = \"NO EXIT\"\n        sign(opening).height >= 7.inches\n        sign(opening).text_height >= 1.inch\n        sign(opening).background_color = \"red\"  # Though not specified in this section\n", "rule_name": "no_exit_identification"}
{"type": "bcl_to_physics", "input": "rule no_exit_identification with constraints: height, text_height", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "no_exit_identification"}
{"type": "bcl_completion", "input": "rule no_exit_identification:\n    where:\n        not is_exit(opening)\n    # Complete this rule", "output": "rule no_exit_identification:\n    where:\n        not is_exit(opening)\n        and not is_exit_access(opening)\n        and count(confusion_factors.true) >= 2\n        must:\n        sign(opening).text = \"NO EXIT\"\n        sign(opening).height >= 7.inches\n        sign(opening).text_height >= 1.inch\n        sign(opening).background_color = \"red\"  # Though not specified in this section\n    must:\n        sign(opening).text = \"NO EXIT\"\n        sign(opening).height >= 7.inches\n        sign(opening).text_height >= 1.inch\n        sign(opening).background_color = \"red\"  # Though not specified in this section\n", "rule_name": "no_exit_identification"}
{"type": "legal_to_bcl", "input": "Requirement for elevator evacuation signs: When sign.text.contains(\"elevator can be used for egress\") and or sign.symbol == approved_evacuation_symbol, it is required that exists(sign at elevator.lobby where: and sign.text.contains(\"elevator can be used for egress\")", "output": "rule elevator_evacuation_signs:\n    where:\n        sign.text.contains(\"elevator can be used for egress\")\n        or sign.symbol == approved_evacuation_symbol\n        )\n        let observer_position = elevator.call_button.position + vector(0, 0, 5.feet)\n        must: line_of_sight(observer_position, sign.center) == unobstructed\n        must: viewing_angle(observer_position, sign) <= 30.degrees\n    must:\n        exists(sign at elevator.lobby where:\n        sign.text.contains(\"elevator can be used for egress\")\n        or sign.symbol == approved_evacuation_symbol\n        )\n        let observer_position = elevator.call_button.position + vector(0, 0, 5.feet)\n        must: line_of_sight(observer_position, sign.center) == unobstructed\n        must: viewing_angle(observer_position, sign) <= 30.degrees\n", "rule_name": "elevator_evacuation_signs"}
{"type": "bcl_to_physics", "input": "rule elevator_evacuation_signs with conditions: exists(sign at elevator.lobby where:, sign.text.contains(\"elevator can be used for egress\")", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "elevator_evacuation_signs"}
{"type": "bcl_completion", "input": "rule elevator_evacuation_signs:\n    where:\n        sign.text.contains(\"elevator can be used for egress\")\n    # Complete this rule", "output": "rule elevator_evacuation_signs:\n    where:\n        sign.text.contains(\"elevator can be used for egress\")\n        or sign.symbol == approved_evacuation_symbol\n        )\n        let observer_position = elevator.call_button.position + vector(0, 0, 5.feet)\n        must: line_of_sight(observer_position, sign.center) == unobstructed\n        must: viewing_angle(observer_position, sign) <= 30.degrees\n    must:\n        exists(sign at elevator.lobby where:\n        sign.text.contains(\"elevator can be used for egress\")\n        or sign.symbol == approved_evacuation_symbol\n        )\n        let observer_position = elevator.call_button.position + vector(0, 0, 5.feet)\n        must: line_of_sight(observer_position, sign.center) == unobstructed\n        must: viewing_angle(observer_position, sign) <= 30.degrees\n", "rule_name": "elevator_evacuation_signs"}
{"type": "legal_to_bcl", "input": "Requirement for evacuation diagram placement: When diagram.shows(\"exits\", \"stairs\", \"current_location\") and and diagram.orientation == floor.actual_orientation, it is required that exists(diagram at floor where: and diagram.shows(\"exits\", \"stairs\", \"current_location\")", "output": "rule evacuation_diagram_placement:\n    where:\n        diagram.shows(\"exits\", \"stairs\", \"current_location\")\n        and diagram.orientation == floor.actual_orientation\n        and diagram.scale <= 1:250\n        )\n        let high_traffic_areas = areas where pedestrian_flow > 10.persons_per_minute\n        must: min(distance(diagram, area) for area in high_traffic_areas) < 50.feet\n    must:\n        exists(diagram at floor where:\n        diagram.shows(\"exits\", \"stairs\", \"current_location\")\n        and diagram.orientation == floor.actual_orientation\n        and diagram.scale <= 1:250\n        )\n        let high_traffic_areas = areas where pedestrian_flow > 10.persons_per_minute\n        must: min(distance(diagram, area) for area in high_traffic_areas) < 50.feet\n", "rule_name": "evacuation_diagram_placement"}
{"type": "bcl_to_physics", "input": "rule evacuation_diagram_placement with constraints: pedestrian_flow", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: Building Code Standard", "rule_name": "evacuation_diagram_placement"}
{"type": "bcl_completion", "input": "rule evacuation_diagram_placement:\n    where:\n        diagram.shows(\"exits\", \"stairs\", \"current_location\")\n    # Complete this rule", "output": "rule evacuation_diagram_placement:\n    where:\n        diagram.shows(\"exits\", \"stairs\", \"current_location\")\n        and diagram.orientation == floor.actual_orientation\n        and diagram.scale <= 1:250\n        )\n        let high_traffic_areas = areas where pedestrian_flow > 10.persons_per_minute\n        must: min(distance(diagram, area) for area in high_traffic_areas) < 50.feet\n    must:\n        exists(diagram at floor where:\n        diagram.shows(\"exits\", \"stairs\", \"current_location\")\n        and diagram.orientation == floor.actual_orientation\n        and diagram.scale <= 1:250\n        )\n        let high_traffic_areas = areas where pedestrian_flow > 10.persons_per_minute\n        must: min(distance(diagram, area) for area in high_traffic_areas) < 50.feet\n", "rule_name": "evacuation_diagram_placement"}
{"type": "legal_to_bcl", "input": "Requirement for high hazard egress capacity: it is required that total_egress_width(space) >= space.occupant_load * width_factor and constraint evacuation_flow:", "output": "rule high_hazard_egress_capacity:\n    must:\n        total_egress_width(space) >= space.occupant_load * width_factor\n        constraint evacuation_flow:\n        let effective_width = total_egress_width - boundary_layers(6.inches)\n        let max_flow = human.evacuation_flow_rate(effective_width)\n        let evacuation_time = space.occupant_load / max_flow\n        must: evacuation_time < min(\n        thermal.tenability_time(space.fire_scenario.temperature_curve),\n        flow.smoke_descent_time(space.ceiling_height, space.fire_load),\n        visibility_time(space.fire_scenario.smoke_production)\n        )\n", "rule_name": "high_hazard_egress_capacity"}
{"type": "bcl_to_physics", "input": "rule high_hazard_egress_capacity with constraints: flow.smoke_descent_time(space.ceiling_height, space.fire_load), thermal.tenability_time(space.fire_scenario.temperature_curve)", "output": "This rule ensures safety through physics-based validation. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: Building Code Standard", "rule_name": "high_hazard_egress_capacity"}
{"type": "bcl_completion", "input": "rule high_hazard_egress_capacity:\n    # Complete this rule", "output": "rule high_hazard_egress_capacity:\n    must:\n        total_egress_width(space) >= space.occupant_load * width_factor\n        constraint evacuation_flow:\n        let effective_width = total_egress_width - boundary_layers(6.inches)\n        let max_flow = human.evacuation_flow_rate(effective_width)\n        let evacuation_time = space.occupant_load / max_flow\n        must: evacuation_time < min(\n        thermal.tenability_time(space.fire_scenario.temperature_curve),\n        flow.smoke_descent_time(space.ceiling_height, space.fire_load),\n        visibility_time(space.fire_scenario.smoke_production)\n        )\n", "rule_name": "high_hazard_egress_capacity"}
{"type": "legal_to_bcl", "input": "Requirement for high hazard travel distance: it is required that angle_between(pair[0], pair[1], from=space.centroid) >= min_separation_angle and constraint max_travel_distance:", "output": "rule high_hazard_travel_distance:\n    must:\n        angle_between(pair[0], pair[1], from=space.centroid) >= min_separation_angle\n        constraint max_travel_distance:\n        for_each: point in space.occupiable_points\n        let nearest_exit_distance = min(\n        path_distance(point, exit, avoiding=obstacles)\n        for exit in space.exits\n        )\n        must: nearest_exit_distance <= 75.feet  # Table 7.6\n", "rule_name": "high_hazard_travel_distance"}
{"type": "bcl_to_physics", "input": "rule high_hazard_travel_distance with constraints: area, nearest_exit_distance", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "high_hazard_travel_distance"}
{"type": "bcl_completion", "input": "rule high_hazard_travel_distance:\n    # Complete this rule", "output": "rule high_hazard_travel_distance:\n    must:\n        angle_between(pair[0], pair[1], from=space.centroid) >= min_separation_angle\n        constraint max_travel_distance:\n        for_each: point in space.occupiable_points\n        let nearest_exit_distance = min(\n        path_distance(point, exit, avoiding=obstacles)\n        for exit in space.exits\n        )\n        must: nearest_exit_distance <= 75.feet  # Table 7.6\n", "rule_name": "high_hazard_travel_distance"}
{"type": "legal_to_bcl", "input": "Requirement for mechanical equipment room egress: it is required that room.ventilation_rate >= max( and 0.5.cfm_per_sqft * room.area,", "output": "rule mechanical_equipment_room_egress:\n    must:\n        room.ventilation_rate >= max(\n        0.5.cfm_per_sqft * room.area,\n        20.cfm_per_person * room.occupant_load,\n        refrigerant_leak_rate * safety_factor / allowable_concentration\n        )\n        function similarity(appearance1, appearance2):\n        \"\"\"Compare visual similarity of two objects\"\"\"\n        return weighted_average(\n        shape_similarity: compare_geometry(appearance1.shape, appearance2.shape),\n        size_similarity: 1 - abs(appearance1.size - appearance2.size) / max(sizes),\n        material_similarity: appearance1.material == appearance2.material ? 1 : 0,\n        lighting_similarity: abs(appearance1.illumination - appearance2.illumination)\n        )\n        function sprinkler_response_time(heat_release_rate, spacing):\n        \"\"\"Time for sprinkler activation based on fire size\"\"\"\n        let r = spacing / 2  # distance to fire\n        let H = 8.feet  # typical ceiling height\n        let gas_velocity = (5.38 * (heat_release_rate / r)^(1/3) *\n        (H / r)^(-5/9))\n        let gas_temperature = ambient_temp +\n        (16.9 * heat_release_rate^(2/3) / H^(5/3))\n        let RTI = 50  # (m\u00c2\u00b7s)^0.5 for standard response\n        return RTI * ln((gas_temperature - ambient_temp) /\n        (gas_temperature - sprinkler_activation_temp)) /\n        sqrt(gas_velocity)\n        function path_distance(from, to, avoiding):\n        \"\"\"Calculate actual walking distance avoiding obstacles\"\"\"\n        return shortest_path(\n        from: from,\n        to: to,\n        constraints: [\n        path.width >= human.width + 0.1.m,\n        path.slope <= 1:12,  # ADA requirement\n        path.headroom >= 7.feet,\n        not path.intersects(avoiding)\n        ]\n        ).total_length\n        validator fire_safety_physics:\n        \"\"\"Ensure fire safety requirements are physically achievable\"\"\"\n        for_each: space in building.spaces\n        let ASET = min(\n        time_to_untenable_temperature(space),\n        time_to_untenable_visibility(space),\n        time_to_untenable_toxicity(space)\n        )\n        let RSET = (\n        detection_time(space.detection_system) +\n        notification_time(space.alarm_system) +\n        pre_movement_time(space.occupancy_type) +\n        travel_time(space.egress_system)\n        )\n        must: ASET > RSET * safety_factor(1.5)\n", "rule_name": "mechanical_equipment_room_egress"}
{"type": "bcl_to_physics", "input": "rule mechanical_equipment_room_egress with constraints: travel_distance, headroom", "output": "This rule ensures safety through physics-based validation. Temperature constraints ensure thermal safety and material integrity. Reference: Building Code Standard", "rule_name": "mechanical_equipment_room_egress"}
{"type": "bcl_completion", "input": "rule mechanical_equipment_room_egress:\n    # Complete this rule", "output": "rule mechanical_equipment_room_egress:\n    must:\n        room.ventilation_rate >= max(\n        0.5.cfm_per_sqft * room.area,\n        20.cfm_per_person * room.occupant_load,\n        refrigerant_leak_rate * safety_factor / allowable_concentration\n        )\n        function similarity(appearance1, appearance2):\n        \"\"\"Compare visual similarity of two objects\"\"\"\n        return weighted_average(\n        shape_similarity: compare_geometry(appearance1.shape, appearance2.shape),\n        size_similarity: 1 - abs(appearance1.size - appearance2.size) / max(sizes),\n        material_similarity: appearance1.material == appearance2.material ? 1 : 0,\n        lighting_similarity: abs(appearance1.illumination - appearance2.illumination)\n        )\n        function sprinkler_response_time(heat_release_rate, spacing):\n        \"\"\"Time for sprinkler activation based on fire size\"\"\"\n        let r = spacing / 2  # distance to fire\n        let H = 8.feet  # typical ceiling height\n        let gas_velocity = (5.38 * (heat_release_rate / r)^(1/3) *\n        (H / r)^(-5/9))\n        let gas_temperature = ambient_temp +\n        (16.9 * heat_release_rate^(2/3) / H^(5/3))\n        let RTI = 50  # (m\u00c2\u00b7s)^0.5 for standard response\n        return RTI * ln((gas_temperature - ambient_temp) /\n        (gas_temperature - sprinkler_activation_temp)) /\n        sqrt(gas_velocity)\n        function path_distance(from, to, avoiding):\n        \"\"\"Calculate actual walking distance avoiding obstacles\"\"\"\n        return shortest_path(\n        from: from,\n        to: to,\n        constraints: [\n        path.width >= human.width + 0.1.m,\n        path.slope <= 1:12,  # ADA requirement\n        path.headroom >= 7.feet,\n        not path.intersects(avoiding)\n        ]\n        ).total_length\n        validator fire_safety_physics:\n        \"\"\"Ensure fire safety requirements are physically achievable\"\"\"\n        for_each: space in building.spaces\n        let ASET = min(\n        time_to_untenable_temperature(space),\n        time_to_untenable_visibility(space),\n        time_to_untenable_toxicity(space)\n        )\n        let RSET = (\n        detection_time(space.detection_system) +\n        notification_time(space.alarm_system) +\n        pre_movement_time(space.occupancy_type) +\n        travel_time(space.egress_system)\n        )\n        must: ASET > RSET * safety_factor(1.5)\n", "rule_name": "mechanical_equipment_room_egress"}
{"type": "legal_to_bcl", "input": "Requirement for automatic sprinkler requirement: When any_rule_requires(space, \"automatic_sprinkler_system\") and must:, it is required that sprinkler_system = install_per_standard(NFPA.13) and validate_coverage:", "output": "rule automatic_sprinkler_requirement:\n    where:\n        any_rule_requires(space, \"automatic_sprinkler_system\")\n        must:\n        sprinkler_system = install_per_standard(NFPA.13)\n        validate_coverage:\n        for_each: point in space.floor_area\n        must:\n        exists(sprinkler in sprinkler_system.heads\n        where coverage_pattern(sprinkler).contains(point))\n        validate_hydraulics:\n        required_flow = max(\n        sprinkler.flow_rate * sprinkler.simultaneous_heads\n        for area in space.design_areas\n        )\n        available_pressure = water_supply.static_pressure -\n        friction_loss(pipe_network, required_flow) -\n        elevation_loss(highest_sprinkler)\n        must: available_pressure >= sprinkler.activation_pressure\n        validate_activation:\n        for_each: scenario in fire_scenarios\n        let heat_plume = fire_plume_temperature(\n        fire_size: scenario.heat_release_rate,\n        ceiling_height: space.ceiling_height,\n        distance: distance(fire_origin, sprinkler)\n        )\n        activation_time = thermal_response(\n        sprinkler.RTI,  # Response Time Index\n        heat_plume.temperature,\n        heat_plume.velocity\n        )\n        must: activation_time < critical_fire_size_time(space)\n        ```\n        **Legal Text**: \"Egress capacity for high hazard contents areas shall be based on 0.7 in./person (18 mm/person) for level components and ramps in accordance with 7.3.3.1.\"\n        **BCL Translation**:\n        ```bcl\n    must:\n        sprinkler_system = install_per_standard(NFPA.13)\n        validate_coverage:\n        for_each: point in space.floor_area\n        must:\n        exists(sprinkler in sprinkler_system.heads\n        where coverage_pattern(sprinkler).contains(point))\n        validate_hydraulics:\n        required_flow = max(\n        sprinkler.flow_rate * sprinkler.simultaneous_heads\n        for area in space.design_areas\n        )\n        available_pressure = water_supply.static_pressure -\n        friction_loss(pipe_network, required_flow) -\n        elevation_loss(highest_sprinkler)\n        must: available_pressure >= sprinkler.activation_pressure\n        validate_activation:\n        for_each: scenario in fire_scenarios\n        let heat_plume = fire_plume_temperature(\n        fire_size: scenario.heat_release_rate,\n        ceiling_height: space.ceiling_height,\n        distance: distance(fire_origin, sprinkler)\n        )\n        activation_time = thermal_response(\n        sprinkler.RTI,  # Response Time Index\n        heat_plume.temperature,\n        heat_plume.velocity\n        )\n        must: activation_time < critical_fire_size_time(space)\n        ```\n        **Legal Text**: \"Egress capacity for high hazard contents areas shall be based on 0.7 in./person (18 mm/person) for level components and ramps in accordance with 7.3.3.1.\"\n        **BCL Translation**:\n        ```bcl\n", "rule_name": "automatic_sprinkler_requirement"}
{"type": "bcl_to_physics", "input": "rule automatic_sprinkler_requirement with conditions: sprinkler_system = install_per_standard(NFPA.13), validate_coverage:", "output": "This rule ensures safety through physics-based validation. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: Building Code Standard", "rule_name": "automatic_sprinkler_requirement"}
{"type": "bcl_completion", "input": "rule automatic_sprinkler_requirement:\n    where:\n        any_rule_requires(space, \"automatic_sprinkler_system\")\n    # Complete this rule", "output": "rule automatic_sprinkler_requirement:\n    where:\n        any_rule_requires(space, \"automatic_sprinkler_system\")\n        must:\n        sprinkler_system = install_per_standard(NFPA.13)\n        validate_coverage:\n        for_each: point in space.floor_area\n        must:\n        exists(sprinkler in sprinkler_system.heads\n        where coverage_pattern(sprinkler).contains(point))\n        validate_hydraulics:\n        required_flow = max(\n        sprinkler.flow_rate * sprinkler.simultaneous_heads\n        for area in space.design_areas\n        )\n        available_pressure = water_supply.static_pressure -\n        friction_loss(pipe_network, required_flow) -\n        elevation_loss(highest_sprinkler)\n        must: available_pressure >= sprinkler.activation_pressure\n        validate_activation:\n        for_each: scenario in fire_scenarios\n        let heat_plume = fire_plume_temperature(\n        fire_size: scenario.heat_release_rate,\n        ceiling_height: space.ceiling_height,\n        distance: distance(fire_origin, sprinkler)\n        )\n        activation_time = thermal_response(\n        sprinkler.RTI,  # Response Time Index\n        heat_plume.temperature,\n        heat_plume.velocity\n        )\n        must: activation_time < critical_fire_size_time(space)\n        ```\n        **Legal Text**: \"Egress capacity for high hazard contents areas shall be based on 0.7 in./person (18 mm/person) for level components and ramps in accordance with 7.3.3.1.\"\n        **BCL Translation**:\n        ```bcl\n    must:\n        sprinkler_system = install_per_standard(NFPA.13)\n        validate_coverage:\n        for_each: point in space.floor_area\n        must:\n        exists(sprinkler in sprinkler_system.heads\n        where coverage_pattern(sprinkler).contains(point))\n        validate_hydraulics:\n        required_flow = max(\n        sprinkler.flow_rate * sprinkler.simultaneous_heads\n        for area in space.design_areas\n        )\n        available_pressure = water_supply.static_pressure -\n        friction_loss(pipe_network, required_flow) -\n        elevation_loss(highest_sprinkler)\n        must: available_pressure >= sprinkler.activation_pressure\n        validate_activation:\n        for_each: scenario in fire_scenarios\n        let heat_plume = fire_plume_temperature(\n        fire_size: scenario.heat_release_rate,\n        ceiling_height: space.ceiling_height,\n        distance: distance(fire_origin, sprinkler)\n        )\n        activation_time = thermal_response(\n        sprinkler.RTI,  # Response Time Index\n        heat_plume.temperature,\n        heat_plume.velocity\n        )\n        must: activation_time < critical_fire_size_time(space)\n        ```\n        **Legal Text**: \"Egress capacity for high hazard contents areas shall be based on 0.7 in./person (18 mm/person) for level components and ramps in accordance with 7.3.3.1.\"\n        **BCL Translation**:\n        ```bcl\n", "rule_name": "automatic_sprinkler_requirement"}
{"type": "legal_to_bcl", "input": "Requirement for high hazard egress width: When space.contents_classification = \"HIGH_HAZARD\" and must:, it is required that total_egress_width = sum(exit.clear_width for exit in space.exits) and total_egress_width >= space.occupant_load * 0.7.inches", "output": "rule high_hazard_egress_width:\n    where:\n        space.contents_classification = \"HIGH_HAZARD\"\n        must:\n        total_egress_width = sum(exit.clear_width for exit in space.exits)\n        total_egress_width >= space.occupant_load * 0.7.inches\n        physics crowd_flow_dynamics:\n        effective_width = exit.width - 2 * boundary_layer(3.inches)\n        density = occupant_load / space.area\n        if density < 0.05.persons_per_sqft:\n        flow_rate = 1.4.persons_per_foot_per_minute  # Free flow\n        elif density < 0.15.persons_per_sqft:\n        flow_rate = 1.0.persons_per_foot_per_minute  # Moderate\n        else:\n        flow_rate = 0.6.persons_per_foot_per_minute  # Congested\n        evacuation_time = occupant_load / (effective_width * flow_rate)\n        must: evacuation_time < min(\n        smoke_descent_time(space),\n        heat_exposure_limit_time(space),\n        structural_integrity_time(space)\n        )\n        ```\n        **Legal Text**: \"Not less than two means of egress shall be provided from each building or hazardous area thereof, unless all of the following criteria are met: (1) Rooms or spaces do not exceed 200 ft\u00c2\u00b2 (18.6 m\u00c2\u00b2)\"\n        **BCL Translation**:\n        ```bcl\n    must:\n        total_egress_width = sum(exit.clear_width for exit in space.exits)\n        total_egress_width >= space.occupant_load * 0.7.inches\n        physics crowd_flow_dynamics:\n        effective_width = exit.width - 2 * boundary_layer(3.inches)\n        density = occupant_load / space.area\n        if density < 0.05.persons_per_sqft:\n        flow_rate = 1.4.persons_per_foot_per_minute  # Free flow\n        elif density < 0.15.persons_per_sqft:\n        flow_rate = 1.0.persons_per_foot_per_minute  # Moderate\n        else:\n        flow_rate = 0.6.persons_per_foot_per_minute  # Congested\n        evacuation_time = occupant_load / (effective_width * flow_rate)\n        must: evacuation_time < min(\n        smoke_descent_time(space),\n        heat_exposure_limit_time(space),\n        structural_integrity_time(space)\n        )\n        ```\n        **Legal Text**: \"Not less than two means of egress shall be provided from each building or hazardous area thereof, unless all of the following criteria are met: (1) Rooms or spaces do not exceed 200 ft\u00c2\u00b2 (18.6 m\u00c2\u00b2)\"\n        **BCL Translation**:\n        ```bcl\n", "rule_name": "high_hazard_egress_width"}
{"type": "bcl_to_physics", "input": "rule high_hazard_egress_width with constraints: density, density", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: Building Code Standard", "rule_name": "high_hazard_egress_width"}
{"type": "bcl_completion", "input": "rule high_hazard_egress_width:\n    where:\n        space.contents_classification = \"HIGH_HAZARD\"\n    # Complete this rule", "output": "rule high_hazard_egress_width:\n    where:\n        space.contents_classification = \"HIGH_HAZARD\"\n        must:\n        total_egress_width = sum(exit.clear_width for exit in space.exits)\n        total_egress_width >= space.occupant_load * 0.7.inches\n        physics crowd_flow_dynamics:\n        effective_width = exit.width - 2 * boundary_layer(3.inches)\n        density = occupant_load / space.area\n        if density < 0.05.persons_per_sqft:\n        flow_rate = 1.4.persons_per_foot_per_minute  # Free flow\n        elif density < 0.15.persons_per_sqft:\n        flow_rate = 1.0.persons_per_foot_per_minute  # Moderate\n        else:\n        flow_rate = 0.6.persons_per_foot_per_minute  # Congested\n        evacuation_time = occupant_load / (effective_width * flow_rate)\n        must: evacuation_time < min(\n        smoke_descent_time(space),\n        heat_exposure_limit_time(space),\n        structural_integrity_time(space)\n        )\n        ```\n        **Legal Text**: \"Not less than two means of egress shall be provided from each building or hazardous area thereof, unless all of the following criteria are met: (1) Rooms or spaces do not exceed 200 ft\u00c2\u00b2 (18.6 m\u00c2\u00b2)\"\n        **BCL Translation**:\n        ```bcl\n    must:\n        total_egress_width = sum(exit.clear_width for exit in space.exits)\n        total_egress_width >= space.occupant_load * 0.7.inches\n        physics crowd_flow_dynamics:\n        effective_width = exit.width - 2 * boundary_layer(3.inches)\n        density = occupant_load / space.area\n        if density < 0.05.persons_per_sqft:\n        flow_rate = 1.4.persons_per_foot_per_minute  # Free flow\n        elif density < 0.15.persons_per_sqft:\n        flow_rate = 1.0.persons_per_foot_per_minute  # Moderate\n        else:\n        flow_rate = 0.6.persons_per_foot_per_minute  # Congested\n        evacuation_time = occupant_load / (effective_width * flow_rate)\n        must: evacuation_time < min(\n        smoke_descent_time(space),\n        heat_exposure_limit_time(space),\n        structural_integrity_time(space)\n        )\n        ```\n        **Legal Text**: \"Not less than two means of egress shall be provided from each building or hazardous area thereof, unless all of the following criteria are met: (1) Rooms or spaces do not exceed 200 ft\u00c2\u00b2 (18.6 m\u00c2\u00b2)\"\n        **BCL Translation**:\n        ```bcl\n", "rule_name": "high_hazard_egress_width"}
{"type": "legal_to_bcl", "input": "Requirement for means of egress quantity: it is required that if space.area <= 200.sqft and risk_score < 0.3: and count(space.exits) >= 1", "output": "rule means_of_egress_quantity:\n    must:\n        if space.area <= 200.sqft and risk_score < 0.3:\n        count(space.exits) >= 1\n        else:\n        count(space.exits) >= 2\n        for_each: pair in combinations(space.exits, 2)\n        must:\n        separation_angle(pair[0], pair[1], from=space.centroid) >=\n        max(90.degrees, risk_score * 180.degrees)\n        ```\n        **Legal Text**: \"Means of egress, for rooms or spaces other than those that meet the criteria of 7.11.4(1) through (3), shall be arranged so that there are no dead ends in corridors\"\n        **BCL Translation**:\n        ```bcl\n", "rule_name": "means_of_egress_quantity"}
{"type": "bcl_to_physics", "input": "rule means_of_egress_quantity with constraints: area, risk_score", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "means_of_egress_quantity"}
{"type": "bcl_completion", "input": "rule means_of_egress_quantity:\n    # Complete this rule", "output": "rule means_of_egress_quantity:\n    must:\n        if space.area <= 200.sqft and risk_score < 0.3:\n        count(space.exits) >= 1\n        else:\n        count(space.exits) >= 2\n        for_each: pair in combinations(space.exits, 2)\n        must:\n        separation_angle(pair[0], pair[1], from=space.centroid) >=\n        max(90.degrees, risk_score * 180.degrees)\n        ```\n        **Legal Text**: \"Means of egress, for rooms or spaces other than those that meet the criteria of 7.11.4(1) through (3), shall be arranged so that there are no dead ends in corridors\"\n        **BCL Translation**:\n        ```bcl\n", "rule_name": "means_of_egress_quantity"}
{"type": "legal_to_bcl", "input": "Requirement for dead end corridor physics: ", "output": "rule dead_end_corridor_physics:\n", "rule_name": "dead_end_corridor_physics"}
{"type": "bcl_to_physics", "input": "rule dead_end_corridor_physics with conditions: ", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "dead_end_corridor_physics"}
{"type": "bcl_completion", "input": "rule dead_end_corridor_physics:\n    # Complete this rule", "output": "rule dead_end_corridor_physics:\n", "rule_name": "dead_end_corridor_physics"}
{"type": "legal_to_bcl", "input": "Requirement for mechanical room safety: When room.type in [\"mechanical\", \"boiler\", \"furnace\"] and let equipment_fire_load = sum(, it is required that if equipment_fire_load > threshold_BTU_per_hour(400000) or and explosion_risk > 0.1:", "output": "rule mechanical_room_safety:\n    where:\n        room.type in [\"mechanical\", \"boiler\", \"furnace\"]\n        let equipment_fire_load = sum(\n        equipment.fuel_input_rate * equipment.operation_hours_per_day\n        for equipment in room.equipment\n        )\n        let explosion_risk = calculate_explosion_potential(room)\n        function calculate_explosion_potential(room):\n        if not has_gas_equipment(room):\n        return 0\n        max_leak_rate = sum(\n        connection.leak_probability * gas_pressure * orifice_coefficient\n        for connection in room.gas_connections\n        )\n        air_changes = ventilation_rate(room) / room.volume\n        time_to_LEL = (room.volume * gas.LEL) /\n        (max_leak_rate - ventilation_rate * gas.LEL)\n        detection_time = gas_detector.response_time if has_gas_detection(room)\n        else infinity\n        return 1.0 / min(time_to_LEL, detection_time)\n        must:\n        if equipment_fire_load > threshold_BTU_per_hour(400000) or\n        explosion_risk > 0.1:\n        count(room.exits) >= 2\n        min_separation(room.exits) >= room.diagonal_dimension * 0.5\n        else:\n        max_travel_distance(room) <= 50.feet\n        room.sprinkler_protection = true\n        ```\n        ```bcl\n        extension FL_hurricane_mods:\n        for_each: opening in building.exterior_openings\n        where:\n        building.location.wind_zone >= 120.mph\n        must:\n        opening.impact_rating >= \"Large Missile Level D\"\n        opening.pressure_rating >= wind_pressure(\n        wind_speed: location.design_wind_speed,\n        height: opening.elevation,\n        exposure_category: building.exposure_category\n        )\n        where:\n        building.fire_pump.exists and\n        building.location in FL.hurricane_zones\n        must:\n        fire_pump.emergency_power.fuel_supply >= 48.hours\n        fire_pump.emergency_power.elevation >=\n        location.flood_elevation + 2.feet\n        ```\n        When REVeal processes a building model, the BCL compiler generates:\n        ```python\n        violation = {\n        'element_id': 'Room-201-4f3a',\n        'bcl_rule': 'mechanical_room_safety.explosion_risk',\n        'physics_explanation': \"\"\"\n        Gas leak accumulation analysis:\n        - Max potential leak rate: 0.5 CFH\n        - Room volume: 2,400 ft\u00c2\u00b3\n        - Ventilation rate: 2 ACH (4,800 CFH)\n        - Time to 25% LEL: 28 minutes\n        - No gas detection present\n        - Single exit configuration\n        Risk Score: 0.15 (exceeds 0.1 threshold)\n        Physics requirement: Two exits needed for explosion risk mitigation\n        \"\"\",\n        'code_reference': 'FL Fire Code 7.12.1',\n        'suggested_fixes': [\n        {\n        'solution': 'Add gas detection system',\n        'physics_benefit': 'Reduces time to intervention from \u00e2\u02c6\u017e to 30 seconds',\n        'cost_estimate': '$2,500'\n        },\n        {\n        'solution': 'Add second exit door',\n        'physics_benefit': 'Reduces evacuation time by 60%',\n        'cost_estimate': '$8,000'\n        },\n        {\n        'solution': 'Increase ventilation to 6 ACH',\n        'physics_benefit': 'Prevents LEL accumulation under max leak scenario',\n        'cost_estimate': '$4,000'\n        }\n        ]\n        }\n        ```\n        This approach makes building codes computable, verifiable, and explainable through physics!\n    must:\n        if equipment_fire_load > threshold_BTU_per_hour(400000) or\n        explosion_risk > 0.1:\n        count(room.exits) >= 2\n        min_separation(room.exits) >= room.diagonal_dimension * 0.5\n        else:\n        max_travel_distance(room) <= 50.feet\n        room.sprinkler_protection = true\n        ```\n        ```bcl\n        extension FL_hurricane_mods:\n        for_each: opening in building.exterior_openings\n        where:\n        building.location.wind_zone >= 120.mph\n        must:\n        opening.impact_rating >= \"Large Missile Level D\"\n        opening.pressure_rating >= wind_pressure(\n        wind_speed: location.design_wind_speed,\n        height: opening.elevation,\n        exposure_category: building.exposure_category\n        )\n        where:\n        building.fire_pump.exists and\n        building.location in FL.hurricane_zones\n        must:\n        fire_pump.emergency_power.fuel_supply >= 48.hours\n        fire_pump.emergency_power.elevation >=\n        location.flood_elevation + 2.feet\n        ```\n        When REVeal processes a building model, the BCL compiler generates:\n        ```python\n        violation = {\n        'element_id': 'Room-201-4f3a',\n        'bcl_rule': 'mechanical_room_safety.explosion_risk',\n        'physics_explanation': \"\"\"\n        Gas leak accumulation analysis:\n        - Max potential leak rate: 0.5 CFH\n        - Room volume: 2,400 ft\u00c2\u00b3\n        - Ventilation rate: 2 ACH (4,800 CFH)\n        - Time to 25% LEL: 28 minutes\n        - No gas detection present\n        - Single exit configuration\n        Risk Score: 0.15 (exceeds 0.1 threshold)\n        Physics requirement: Two exits needed for explosion risk mitigation\n        \"\"\",\n        'code_reference': 'FL Fire Code 7.12.1',\n        'suggested_fixes': [\n        {\n        'solution': 'Add gas detection system',\n        'physics_benefit': 'Reduces time to intervention from \u00e2\u02c6\u017e to 30 seconds',\n        'cost_estimate': '$2,500'\n        },\n        {\n        'solution': 'Add second exit door',\n        'physics_benefit': 'Reduces evacuation time by 60%',\n        'cost_estimate': '$8,000'\n        },\n        {\n        'solution': 'Increase ventilation to 6 ACH',\n        'physics_benefit': 'Prevents LEL accumulation under max leak scenario',\n        'cost_estimate': '$4,000'\n        }\n        ]\n        }\n        ```\n        This approach makes building codes computable, verifiable, and explainable through physics!\n", "rule_name": "mechanical_room_safety"}
{"type": "bcl_to_physics", "input": "rule mechanical_room_safety with constraints: explosion_risk, wind_zone", "output": "This rule ensures safety through physics-based validation. Reference: Building Code Standard", "rule_name": "mechanical_room_safety"}
{"type": "bcl_completion", "input": "rule mechanical_room_safety:\n    where:\n        room.type in [\"mechanical\", \"boiler\", \"furnace\"]\n    # Complete this rule", "output": "rule mechanical_room_safety:\n    where:\n        room.type in [\"mechanical\", \"boiler\", \"furnace\"]\n        let equipment_fire_load = sum(\n        equipment.fuel_input_rate * equipment.operation_hours_per_day\n        for equipment in room.equipment\n        )\n        let explosion_risk = calculate_explosion_potential(room)\n        function calculate_explosion_potential(room):\n        if not has_gas_equipment(room):\n        return 0\n        max_leak_rate = sum(\n        connection.leak_probability * gas_pressure * orifice_coefficient\n        for connection in room.gas_connections\n        )\n        air_changes = ventilation_rate(room) / room.volume\n        time_to_LEL = (room.volume * gas.LEL) /\n        (max_leak_rate - ventilation_rate * gas.LEL)\n        detection_time = gas_detector.response_time if has_gas_detection(room)\n        else infinity\n        return 1.0 / min(time_to_LEL, detection_time)\n        must:\n        if equipment_fire_load > threshold_BTU_per_hour(400000) or\n        explosion_risk > 0.1:\n        count(room.exits) >= 2\n        min_separation(room.exits) >= room.diagonal_dimension * 0.5\n        else:\n        max_travel_distance(room) <= 50.feet\n        room.sprinkler_protection = true\n        ```\n        ```bcl\n        extension FL_hurricane_mods:\n        for_each: opening in building.exterior_openings\n        where:\n        building.location.wind_zone >= 120.mph\n        must:\n        opening.impact_rating >= \"Large Missile Level D\"\n        opening.pressure_rating >= wind_pressure(\n        wind_speed: location.design_wind_speed,\n        height: opening.elevation,\n        exposure_category: building.exposure_category\n        )\n        where:\n        building.fire_pump.exists and\n        building.location in FL.hurricane_zones\n        must:\n        fire_pump.emergency_power.fuel_supply >= 48.hours\n        fire_pump.emergency_power.elevation >=\n        location.flood_elevation + 2.feet\n        ```\n        When REVeal processes a building model, the BCL compiler generates:\n        ```python\n        violation = {\n        'element_id': 'Room-201-4f3a',\n        'bcl_rule': 'mechanical_room_safety.explosion_risk',\n        'physics_explanation': \"\"\"\n        Gas leak accumulation analysis:\n        - Max potential leak rate: 0.5 CFH\n        - Room volume: 2,400 ft\u00c2\u00b3\n        - Ventilation rate: 2 ACH (4,800 CFH)\n        - Time to 25% LEL: 28 minutes\n        - No gas detection present\n        - Single exit configuration\n        Risk Score: 0.15 (exceeds 0.1 threshold)\n        Physics requirement: Two exits needed for explosion risk mitigation\n        \"\"\",\n        'code_reference': 'FL Fire Code 7.12.1',\n        'suggested_fixes': [\n        {\n        'solution': 'Add gas detection system',\n        'physics_benefit': 'Reduces time to intervention from \u00e2\u02c6\u017e to 30 seconds',\n        'cost_estimate': '$2,500'\n        },\n        {\n        'solution': 'Add second exit door',\n        'physics_benefit': 'Reduces evacuation time by 60%',\n        'cost_estimate': '$8,000'\n        },\n        {\n        'solution': 'Increase ventilation to 6 ACH',\n        'physics_benefit': 'Prevents LEL accumulation under max leak scenario',\n        'cost_estimate': '$4,000'\n        }\n        ]\n        }\n        ```\n        This approach makes building codes computable, verifiable, and explainable through physics!\n    must:\n        if equipment_fire_load > threshold_BTU_per_hour(400000) or\n        explosion_risk > 0.1:\n        count(room.exits) >= 2\n        min_separation(room.exits) >= room.diagonal_dimension * 0.5\n        else:\n        max_travel_distance(room) <= 50.feet\n        room.sprinkler_protection = true\n        ```\n        ```bcl\n        extension FL_hurricane_mods:\n        for_each: opening in building.exterior_openings\n        where:\n        building.location.wind_zone >= 120.mph\n        must:\n        opening.impact_rating >= \"Large Missile Level D\"\n        opening.pressure_rating >= wind_pressure(\n        wind_speed: location.design_wind_speed,\n        height: opening.elevation,\n        exposure_category: building.exposure_category\n        )\n        where:\n        building.fire_pump.exists and\n        building.location in FL.hurricane_zones\n        must:\n        fire_pump.emergency_power.fuel_supply >= 48.hours\n        fire_pump.emergency_power.elevation >=\n        location.flood_elevation + 2.feet\n        ```\n        When REVeal processes a building model, the BCL compiler generates:\n        ```python\n        violation = {\n        'element_id': 'Room-201-4f3a',\n        'bcl_rule': 'mechanical_room_safety.explosion_risk',\n        'physics_explanation': \"\"\"\n        Gas leak accumulation analysis:\n        - Max potential leak rate: 0.5 CFH\n        - Room volume: 2,400 ft\u00c2\u00b3\n        - Ventilation rate: 2 ACH (4,800 CFH)\n        - Time to 25% LEL: 28 minutes\n        - No gas detection present\n        - Single exit configuration\n        Risk Score: 0.15 (exceeds 0.1 threshold)\n        Physics requirement: Two exits needed for explosion risk mitigation\n        \"\"\",\n        'code_reference': 'FL Fire Code 7.12.1',\n        'suggested_fixes': [\n        {\n        'solution': 'Add gas detection system',\n        'physics_benefit': 'Reduces time to intervention from \u00e2\u02c6\u017e to 30 seconds',\n        'cost_estimate': '$2,500'\n        },\n        {\n        'solution': 'Add second exit door',\n        'physics_benefit': 'Reduces evacuation time by 60%',\n        'cost_estimate': '$8,000'\n        },\n        {\n        'solution': 'Increase ventilation to 6 ACH',\n        'physics_benefit': 'Prevents LEL accumulation under max leak scenario',\n        'cost_estimate': '$4,000'\n        }\n        ]\n        }\n        ```\n        This approach makes building codes computable, verifiable, and explainable through physics!\n", "rule_name": "mechanical_room_safety"}
{"type": "legal_to_bcl", "input": "Requirement for strainer plate openings: When component.type == \"strainer_plate\" and component.location == \"drain_inlet\", it is required that opening.smallest_dimension <= 0.5.inches and safety_factor: 1.2", "output": "rule strainer_plate_openings:\n    where:\n        component.type == \"strainer_plate\"\n        component.location == \"drain_inlet\"\n        must:\n        opening.smallest_dimension <= 0.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.304.2\"\n    must:\n        opening.smallest_dimension <= 0.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.304.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.304.2\"", "rule_name": "strainer_plate_openings"}
{"type": "bcl_to_physics", "input": "rule strainer_plate_openings with constraints: smallest_dimension", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.304.2", "rule_name": "strainer_plate_openings"}
{"type": "bcl_completion", "input": "rule strainer_plate_openings:\n    where:\n        component.type == \"strainer_plate\"\n    # Complete this rule", "output": "rule strainer_plate_openings:\n    where:\n        component.type == \"strainer_plate\"\n        component.location == \"drain_inlet\"\n        must:\n        opening.smallest_dimension <= 0.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.304.2\"\n    must:\n        opening.smallest_dimension <= 0.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.304.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.304.2\"", "rule_name": "strainer_plate_openings"}
{"type": "safety_factor_reasoning", "input": "For strainer_plate_openings rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.304.2.", "rule_name": "strainer_plate_openings", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for pipe corrosion protection: When pipe.passes_through IN [\"concrete\", \"cinder_wall\", \"cinder_floor\", \"corrosive_material\"] and pipe.material != \"CPVC\", it is required that protection.type IN [\"sheathing\", \"wrapping\", \"other_approved_method\"] and protection.withstands_reaction_from IN [\"lime\", \"acid\", \"corrosive_material\"]", "output": "rule pipe_corrosion_protection:\n    where:\n        pipe.passes_through IN [\"concrete\", \"cinder_wall\", \"cinder_floor\", \"corrosive_material\"]\n        pipe.material != \"CPVC\"\n        must:\n        protection.type IN [\"sheathing\", \"wrapping\", \"other_approved_method\"]\n        protection.withstands_reaction_from IN [\"lime\", \"acid\", \"corrosive_material\"]\n        protection.allows_movement == true\n        protection.allows_expansion_contraction == true\n        protection.minimum_thickness >= 0.010.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.1\"\n    must:\n        protection.type IN [\"sheathing\", \"wrapping\", \"other_approved_method\"]\n        protection.withstands_reaction_from IN [\"lime\", \"acid\", \"corrosive_material\"]\n        protection.allows_movement == true\n        protection.allows_expansion_contraction == true\n        protection.minimum_thickness >= 0.010.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.305.1\"", "rule_name": "pipe_corrosion_protection"}
{"type": "bcl_to_physics", "input": "rule pipe_corrosion_protection with constraints: minimum_thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.3.305.1", "rule_name": "pipe_corrosion_protection"}
{"type": "bcl_completion", "input": "rule pipe_corrosion_protection:\n    where:\n        pipe.passes_through IN [\"concrete\", \"cinder_wall\", \"cinder_floor\", \"corrosive_material\"]\n    # Complete this rule", "output": "rule pipe_corrosion_protection:\n    where:\n        pipe.passes_through IN [\"concrete\", \"cinder_wall\", \"cinder_floor\", \"corrosive_material\"]\n        pipe.material != \"CPVC\"\n        must:\n        protection.type IN [\"sheathing\", \"wrapping\", \"other_approved_method\"]\n        protection.withstands_reaction_from IN [\"lime\", \"acid\", \"corrosive_material\"]\n        protection.allows_movement == true\n        protection.allows_expansion_contraction == true\n        protection.minimum_thickness >= 0.010.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.1\"\n    must:\n        protection.type IN [\"sheathing\", \"wrapping\", \"other_approved_method\"]\n        protection.withstands_reaction_from IN [\"lime\", \"acid\", \"corrosive_material\"]\n        protection.allows_movement == true\n        protection.allows_expansion_contraction == true\n        protection.minimum_thickness >= 0.010.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.305.1\"", "rule_name": "pipe_corrosion_protection"}
{"type": "safety_factor_reasoning", "input": "For pipe_corrosion_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.305.1.", "rule_name": "pipe_corrosion_protection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for termite protection sleeve: When pipe.penetrates == \"concrete_slab_on_grade\" and location.termite_treatment == true, it is required that sleeve.max_wall_thickness <= 0.010.inches and sleeve.sealed_within_slab == true", "output": "rule termite_protection_sleeve:\n    where:\n        pipe.penetrates == \"concrete_slab_on_grade\"\n        location.termite_treatment == true\n        sleeve.material == \"cellulose_free\"\n        must:\n        sleeve.max_wall_thickness <= 0.010.inches\n        sleeve.sealed_within_slab == true\n        seal.device == \"noncorrosive_clamping\"\n        annular_space_between(pipe, sleeve) == 0\n        termiticide_inside_sleeve == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.1.1\"\n    must:\n        sleeve.max_wall_thickness <= 0.010.inches\n        sleeve.sealed_within_slab == true\n        seal.device == \"noncorrosive_clamping\"\n        annular_space_between(pipe, sleeve) == 0\n        termiticide_inside_sleeve == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.1.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.305.1.1\"", "rule_name": "termite_protection_sleeve"}
{"type": "bcl_to_physics", "input": "rule termite_protection_sleeve with constraints: max_wall_thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.305.1.1", "rule_name": "termite_protection_sleeve"}
{"type": "bcl_completion", "input": "rule termite_protection_sleeve:\n    where:\n        pipe.penetrates == \"concrete_slab_on_grade\"\n    # Complete this rule", "output": "rule termite_protection_sleeve:\n    where:\n        pipe.penetrates == \"concrete_slab_on_grade\"\n        location.termite_treatment == true\n        sleeve.material == \"cellulose_free\"\n        must:\n        sleeve.max_wall_thickness <= 0.010.inches\n        sleeve.sealed_within_slab == true\n        seal.device == \"noncorrosive_clamping\"\n        annular_space_between(pipe, sleeve) == 0\n        termiticide_inside_sleeve == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.1.1\"\n    must:\n        sleeve.max_wall_thickness <= 0.010.inches\n        sleeve.sealed_within_slab == true\n        seal.device == \"noncorrosive_clamping\"\n        annular_space_between(pipe, sleeve) == 0\n        termiticide_inside_sleeve == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.1.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.305.1.1\"", "rule_name": "termite_protection_sleeve"}
{"type": "safety_factor_reasoning", "input": "For termite_protection_sleeve rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.305.1.1.", "rule_name": "termite_protection_sleeve", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for pipe through foundation: When pipe.passes_through == \"foundation_wall\" and must:, it is required that protection IN [\"relieving_arch\", \"pipe_sleeve\"] and if protection == \"pipe_sleeve\":", "output": "rule pipe_through_foundation:\n    where:\n        pipe.passes_through == \"foundation_wall\"\n        must:\n        protection IN [\"relieving_arch\", \"pipe_sleeve\"]\n        if protection == \"pipe_sleeve\":\n        sleeve.diameter >= pipe.diameter + 2.pipe_sizes\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.3\"\n    must:\n        protection IN [\"relieving_arch\", \"pipe_sleeve\"]\n        if protection == \"pipe_sleeve\":\n        sleeve.diameter >= pipe.diameter + 2.pipe_sizes\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.305.3\"", "rule_name": "pipe_through_foundation"}
{"type": "bcl_to_physics", "input": "rule pipe_through_foundation with conditions: protection IN [\"relieving_arch\", \"pipe_sleeve\"], if protection == \"pipe_sleeve\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.3.305.3", "rule_name": "pipe_through_foundation"}
{"type": "bcl_completion", "input": "rule pipe_through_foundation:\n    where:\n        pipe.passes_through == \"foundation_wall\"\n    # Complete this rule", "output": "rule pipe_through_foundation:\n    where:\n        pipe.passes_through == \"foundation_wall\"\n        must:\n        protection IN [\"relieving_arch\", \"pipe_sleeve\"]\n        if protection == \"pipe_sleeve\":\n        sleeve.diameter >= pipe.diameter + 2.pipe_sizes\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.3\"\n    must:\n        protection IN [\"relieving_arch\", \"pipe_sleeve\"]\n        if protection == \"pipe_sleeve\":\n        sleeve.diameter >= pipe.diameter + 2.pipe_sizes\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.305.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.305.3\"", "rule_name": "pipe_through_foundation"}
{"type": "safety_factor_reasoning", "input": "For pipe_through_foundation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.305.3.", "rule_name": "pipe_through_foundation", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for freeze protection: When pipe.type IN [\"water\", \"soil\", \"waste\"] and location IN [\"building_exterior\", \"attic\", \"crawl_space\", \"outside_wall\", \"freezing_area\"], it is required that protection IN [\"insulation\", \"heat\", \"both\"] and if pipe.type == \"water\" AND location == \"building_exterior\":", "output": "rule freeze_protection:\n    where:\n        pipe.type IN [\"water\", \"soil\", \"waste\"]\n        location IN [\"building_exterior\", \"attic\", \"crawl_space\", \"outside_wall\", \"freezing_area\"]\n        must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        if pipe.type == \"water\" AND location == \"building_exterior\":\n        pipe.depth >= max(6.inches, frost_line_depth)\n        pipe.depth >= 12.inches  # Below grade minimum\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.305.4\"\n    must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        if pipe.type == \"water\" AND location == \"building_exterior\":\n        pipe.depth >= max(6.inches, frost_line_depth)\n        pipe.depth >= 12.inches  # Below grade minimum\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.305.4\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.3.305.4\"", "rule_name": "freeze_protection"}
{"type": "bcl_to_physics", "input": "rule freeze_protection with constraints: depth", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.3.305.4", "rule_name": "freeze_protection"}
{"type": "bcl_completion", "input": "rule freeze_protection:\n    where:\n        pipe.type IN [\"water\", \"soil\", \"waste\"]\n    # Complete this rule", "output": "rule freeze_protection:\n    where:\n        pipe.type IN [\"water\", \"soil\", \"waste\"]\n        location IN [\"building_exterior\", \"attic\", \"crawl_space\", \"outside_wall\", \"freezing_area\"]\n        must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        if pipe.type == \"water\" AND location == \"building_exterior\":\n        pipe.depth >= max(6.inches, frost_line_depth)\n        pipe.depth >= 12.inches  # Below grade minimum\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.305.4\"\n    must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        if pipe.type == \"water\" AND location == \"building_exterior\":\n        pipe.depth >= max(6.inches, frost_line_depth)\n        pipe.depth >= 12.inches  # Below grade minimum\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.305.4\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.3.305.4\"", "rule_name": "freeze_protection"}
{"type": "safety_factor_reasoning", "input": "For freeze_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.3.305.4.", "rule_name": "freeze_protection", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for pipe physical damage protection: When pipe.material NOT IN [\"cast_iron\", \"galvanized_steel\"] and pipe.location == \"concealed\", it is required that shield_plate.installed == true and shield_plate.material == \"steel\"", "output": "rule pipe_physical_damage_protection:\n    where:\n        pipe.material NOT IN [\"cast_iron\", \"galvanized_steel\"]\n        pipe.location == \"concealed\"\n        pipe.installation_method IN [\"through_holes\", \"through_notches\"]\n        pipe.installation_in IN [\"studs\", \"joists\", \"rafters\"]\n        distance_to_member_edge < 1.25.inches\n        must:\n        shield_plate.installed == true\n        shield_plate.material == \"steel\"\n        shield_plate.thickness >= 0.0575.inches  # No. 16 gauge\n        shield_plate.coverage >= pipe.area_at_notch_or_bore\n        shield_plate.extension_above_sole_plate >= 2.inches\n        shield_plate.extension_below_top_plate >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.6\"\n    must:\n        shield_plate.installed == true\n        shield_plate.material == \"steel\"\n        shield_plate.thickness >= 0.0575.inches  # No. 16 gauge\n        shield_plate.coverage >= pipe.area_at_notch_or_bore\n        shield_plate.extension_above_sole_plate >= 2.inches\n        shield_plate.extension_below_top_plate >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.305.6\"", "rule_name": "pipe_physical_damage_protection"}
{"type": "bcl_to_physics", "input": "rule pipe_physical_damage_protection with constraints: distance_to_member_edge, thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.305.6", "rule_name": "pipe_physical_damage_protection"}
{"type": "bcl_completion", "input": "rule pipe_physical_damage_protection:\n    where:\n        pipe.material NOT IN [\"cast_iron\", \"galvanized_steel\"]\n    # Complete this rule", "output": "rule pipe_physical_damage_protection:\n    where:\n        pipe.material NOT IN [\"cast_iron\", \"galvanized_steel\"]\n        pipe.location == \"concealed\"\n        pipe.installation_method IN [\"through_holes\", \"through_notches\"]\n        pipe.installation_in IN [\"studs\", \"joists\", \"rafters\"]\n        distance_to_member_edge < 1.25.inches\n        must:\n        shield_plate.installed == true\n        shield_plate.material == \"steel\"\n        shield_plate.thickness >= 0.0575.inches  # No. 16 gauge\n        shield_plate.coverage >= pipe.area_at_notch_or_bore\n        shield_plate.extension_above_sole_plate >= 2.inches\n        shield_plate.extension_below_top_plate >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.6\"\n    must:\n        shield_plate.installed == true\n        shield_plate.material == \"steel\"\n        shield_plate.thickness >= 0.0575.inches  # No. 16 gauge\n        shield_plate.coverage >= pipe.area_at_notch_or_bore\n        shield_plate.extension_above_sole_plate >= 2.inches\n        shield_plate.extension_below_top_plate >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.305.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.305.6\"", "rule_name": "pipe_physical_damage_protection"}
{"type": "safety_factor_reasoning", "input": "For pipe_physical_damage_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.305.6.", "rule_name": "pipe_physical_damage_protection", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for buried pipe support: When pipe.installation == \"buried\" and must:, it is required that support.type == \"continuous\" and support.length == pipe.entire_length", "output": "rule buried_pipe_support:\n    where:\n        pipe.installation == \"buried\"\n        must:\n        support.type == \"continuous\"\n        support.length == pipe.entire_length\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.1\"\n    must:\n        support.type == \"continuous\"\n        support.length == pipe.entire_length\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.306.1\"", "rule_name": "buried_pipe_support"}
{"type": "bcl_to_physics", "input": "rule buried_pipe_support with conditions: support.type == \"continuous\", support.length == pipe.entire_length", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.3.306.1", "rule_name": "buried_pipe_support"}
{"type": "bcl_completion", "input": "rule buried_pipe_support:\n    where:\n        pipe.installation == \"buried\"\n    # Complete this rule", "output": "rule buried_pipe_support:\n    where:\n        pipe.installation == \"buried\"\n        must:\n        support.type == \"continuous\"\n        support.length == pipe.entire_length\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.1\"\n    must:\n        support.type == \"continuous\"\n        support.length == pipe.entire_length\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.306.1\"", "rule_name": "buried_pipe_support"}
{"type": "safety_factor_reasoning", "input": "For buried_pipe_support rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.306.1.", "rule_name": "buried_pipe_support", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for trench bedding: When trench.bottom == \"pipe_bed\" and must:, it is required that support.type == \"solid_continuous_load_bearing\" and support.between_joints == true", "output": "rule trench_bedding:\n    where:\n        trench.bottom == \"pipe_bed\"\n        must:\n        support.type == \"solid_continuous_load_bearing\"\n        support.between_joints == true\n        holes_provided_at IN [\"bell\", \"hub\", \"coupling\"]\n        pipe.supported_on_blocks == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2\"\n    must:\n        support.type == \"solid_continuous_load_bearing\"\n        support.between_joints == true\n        holes_provided_at IN [\"bell\", \"hub\", \"coupling\"]\n        pipe.supported_on_blocks == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.306.2\"", "rule_name": "trench_bedding"}
{"type": "bcl_to_physics", "input": "rule trench_bedding with conditions: support.type == \"solid_continuous_load_bearing\", support.between_joints == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.306.2", "rule_name": "trench_bedding"}
{"type": "bcl_completion", "input": "rule trench_bedding:\n    where:\n        trench.bottom == \"pipe_bed\"\n    # Complete this rule", "output": "rule trench_bedding:\n    where:\n        trench.bottom == \"pipe_bed\"\n        must:\n        support.type == \"solid_continuous_load_bearing\"\n        support.between_joints == true\n        holes_provided_at IN [\"bell\", \"hub\", \"coupling\"]\n        pipe.supported_on_blocks == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2\"\n    must:\n        support.type == \"solid_continuous_load_bearing\"\n        support.between_joints == true\n        holes_provided_at IN [\"bell\", \"hub\", \"coupling\"]\n        pipe.supported_on_blocks == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.306.2\"", "rule_name": "trench_bedding"}
{"type": "safety_factor_reasoning", "input": "For trench_bedding rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.306.2.", "rule_name": "trench_bedding", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for trench overexcavation: When trench.excavated_below_pipe_level == true and must:, it is required that backfill.to_pipe_level == true and backfill.material IN [\"sand\", \"fine_gravel\"]", "output": "rule trench_overexcavation:\n    where:\n        trench.excavated_below_pipe_level == true\n        must:\n        backfill.to_pipe_level == true\n        backfill.material IN [\"sand\", \"fine_gravel\"]\n        backfill.layer_thickness <= 6.inches\n        backfill.compacted_after_each_layer == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2.1\"\n    must:\n        backfill.to_pipe_level == true\n        backfill.material IN [\"sand\", \"fine_gravel\"]\n        backfill.layer_thickness <= 6.inches\n        backfill.compacted_after_each_layer == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.306.2.1\"", "rule_name": "trench_overexcavation"}
{"type": "bcl_to_physics", "input": "rule trench_overexcavation with constraints: layer_thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.306.2.1", "rule_name": "trench_overexcavation"}
{"type": "bcl_completion", "input": "rule trench_overexcavation:\n    where:\n        trench.excavated_below_pipe_level == true\n    # Complete this rule", "output": "rule trench_overexcavation:\n    where:\n        trench.excavated_below_pipe_level == true\n        must:\n        backfill.to_pipe_level == true\n        backfill.material IN [\"sand\", \"fine_gravel\"]\n        backfill.layer_thickness <= 6.inches\n        backfill.compacted_after_each_layer == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2.1\"\n    must:\n        backfill.to_pipe_level == true\n        backfill.material IN [\"sand\", \"fine_gravel\"]\n        backfill.layer_thickness <= 6.inches\n        backfill.compacted_after_each_layer == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.2.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.306.2.1\"", "rule_name": "trench_overexcavation"}
{"type": "safety_factor_reasoning", "input": "For trench_overexcavation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.306.2.1.", "rule_name": "trench_overexcavation", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for rock removal in trench: When trench.contains_rock == true and must:, it is required that rock.removed_depth >= pipe.bottom_level + 3.inches and backfill.material == \"sand\"", "output": "rule rock_removal_in_trench:\n    where:\n        trench.contains_rock == true\n        must:\n        rock.removed_depth >= pipe.bottom_level + 3.inches\n        backfill.material == \"sand\"\n        backfill.tamped == true\n        backfill.provides_uniform_support == true\n        pipe.rests_on_rock == false\n        joints.rest_on_rock == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.2.2\"\n    must:\n        rock.removed_depth >= pipe.bottom_level + 3.inches\n        backfill.material == \"sand\"\n        backfill.tamped == true\n        backfill.provides_uniform_support == true\n        pipe.rests_on_rock == false\n        joints.rest_on_rock == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.2.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.306.2.2\"", "rule_name": "rock_removal_in_trench"}
{"type": "bcl_to_physics", "input": "rule rock_removal_in_trench with conditions: rock.removed_depth >= pipe.bottom_level + 3.inches, backfill.material == \"sand\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.3.306.2.2", "rule_name": "rock_removal_in_trench"}
{"type": "bcl_completion", "input": "rule rock_removal_in_trench:\n    where:\n        trench.contains_rock == true\n    # Complete this rule", "output": "rule rock_removal_in_trench:\n    where:\n        trench.contains_rock == true\n        must:\n        rock.removed_depth >= pipe.bottom_level + 3.inches\n        backfill.material == \"sand\"\n        backfill.tamped == true\n        backfill.provides_uniform_support == true\n        pipe.rests_on_rock == false\n        joints.rest_on_rock == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.2.2\"\n    must:\n        rock.removed_depth >= pipe.bottom_level + 3.inches\n        backfill.material == \"sand\"\n        backfill.tamped == true\n        backfill.provides_uniform_support == true\n        pipe.rests_on_rock == false\n        joints.rest_on_rock == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.306.2.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.306.2.2\"", "rule_name": "rock_removal_in_trench"}
{"type": "safety_factor_reasoning", "input": "For rock_removal_in_trench rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.306.2.2.", "rule_name": "rock_removal_in_trench", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for soft soil stabilization: When trench.bottom_material == \"soft_poor_load_bearing\" and must:, it is required that stabilization.method IN [\"overexcavate_backfill\", \"concrete_foundation\"] and if stabilization.method == \"overexcavate_backfill\":", "output": "rule soft_soil_stabilization:\n    where:\n        trench.bottom_material == \"soft_poor_load_bearing\"\n        must:\n        stabilization.method IN [\"overexcavate_backfill\", \"concrete_foundation\"]\n        if stabilization.method == \"overexcavate_backfill\":\n        overexcavation.depth >= pipe.diameter * 2\n        backfill.material IN [\"fine_gravel\", \"crushed_stone\"]\n        if stabilization.method == \"concrete_foundation\":\n        foundation.bedded_with_sand == true\n        sand.tamped == true\n        support.uniform_between_joints == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.306.2.3\"\n    must:\n        stabilization.method IN [\"overexcavate_backfill\", \"concrete_foundation\"]\n        if stabilization.method == \"overexcavate_backfill\":\n        overexcavation.depth >= pipe.diameter * 2\n        backfill.material IN [\"fine_gravel\", \"crushed_stone\"]\n        if stabilization.method == \"concrete_foundation\":\n        foundation.bedded_with_sand == true\n        sand.tamped == true\n        support.uniform_between_joints == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.306.2.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.3.306.2.3\"", "rule_name": "soft_soil_stabilization"}
{"type": "bcl_to_physics", "input": "rule soft_soil_stabilization with conditions: stabilization.method IN [\"overexcavate_backfill\", \"concrete_foundation\"], if stabilization.method == \"overexcavate_backfill\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.3.306.2.3", "rule_name": "soft_soil_stabilization"}
{"type": "bcl_completion", "input": "rule soft_soil_stabilization:\n    where:\n        trench.bottom_material == \"soft_poor_load_bearing\"\n    # Complete this rule", "output": "rule soft_soil_stabilization:\n    where:\n        trench.bottom_material == \"soft_poor_load_bearing\"\n        must:\n        stabilization.method IN [\"overexcavate_backfill\", \"concrete_foundation\"]\n        if stabilization.method == \"overexcavate_backfill\":\n        overexcavation.depth >= pipe.diameter * 2\n        backfill.material IN [\"fine_gravel\", \"crushed_stone\"]\n        if stabilization.method == \"concrete_foundation\":\n        foundation.bedded_with_sand == true\n        sand.tamped == true\n        support.uniform_between_joints == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.306.2.3\"\n    must:\n        stabilization.method IN [\"overexcavate_backfill\", \"concrete_foundation\"]\n        if stabilization.method == \"overexcavate_backfill\":\n        overexcavation.depth >= pipe.diameter * 2\n        backfill.material IN [\"fine_gravel\", \"crushed_stone\"]\n        if stabilization.method == \"concrete_foundation\":\n        foundation.bedded_with_sand == true\n        sand.tamped == true\n        support.uniform_between_joints == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.306.2.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.3.306.2.3\"", "rule_name": "soft_soil_stabilization"}
{"type": "safety_factor_reasoning", "input": "For soft_soil_stabilization rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.3.306.2.3.", "rule_name": "soft_soil_stabilization", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for backfilling requirements: When pipe.requires_backfill == true and must:, it is required that backfill.free_from IN [\"construction_debris\", \"rocks\", \"broken_concrete\", \"frozen_chunks\"] and backfill.material == \"loose_earth\"", "output": "rule backfilling_requirements:\n    where:\n        pipe.requires_backfill == true\n        must:\n        backfill.free_from IN [\"construction_debris\", \"rocks\", \"broken_concrete\", \"frozen_chunks\"]\n        backfill.material == \"loose_earth\"\n        backfill.layer_thickness <= 6.inches\n        backfill.tamped_per_layer == true\n        backfill.crown_coverage >= 12.inches\n        backfill.compacted_for_support == true\n        backfill.brought_up_evenly == true\n        pipe.remains_aligned == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.3\"\n    must:\n        backfill.free_from IN [\"construction_debris\", \"rocks\", \"broken_concrete\", \"frozen_chunks\"]\n        backfill.material == \"loose_earth\"\n        backfill.layer_thickness <= 6.inches\n        backfill.tamped_per_layer == true\n        backfill.crown_coverage >= 12.inches\n        backfill.compacted_for_support == true\n        backfill.brought_up_evenly == true\n        pipe.remains_aligned == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.306.3\"", "rule_name": "backfilling_requirements"}
{"type": "bcl_to_physics", "input": "rule backfilling_requirements with constraints: layer_thickness, crown_coverage", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.306.3", "rule_name": "backfilling_requirements"}
{"type": "bcl_completion", "input": "rule backfilling_requirements:\n    where:\n        pipe.requires_backfill == true\n    # Complete this rule", "output": "rule backfilling_requirements:\n    where:\n        pipe.requires_backfill == true\n        must:\n        backfill.free_from IN [\"construction_debris\", \"rocks\", \"broken_concrete\", \"frozen_chunks\"]\n        backfill.material == \"loose_earth\"\n        backfill.layer_thickness <= 6.inches\n        backfill.tamped_per_layer == true\n        backfill.crown_coverage >= 12.inches\n        backfill.compacted_for_support == true\n        backfill.brought_up_evenly == true\n        pipe.remains_aligned == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.3\"\n    must:\n        backfill.free_from IN [\"construction_debris\", \"rocks\", \"broken_concrete\", \"frozen_chunks\"]\n        backfill.material == \"loose_earth\"\n        backfill.layer_thickness <= 6.inches\n        backfill.tamped_per_layer == true\n        backfill.crown_coverage >= 12.inches\n        backfill.compacted_for_support == true\n        backfill.brought_up_evenly == true\n        pipe.remains_aligned == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.306.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.306.3\"", "rule_name": "backfilling_requirements"}
{"type": "safety_factor_reasoning", "input": "For backfilling_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.306.3.", "rule_name": "backfilling_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for footing protection: When trench.parallel_to IN [\"footing\", \"wall\"] and must:, it is required that trench.does_not_extend_into_bearing_plane == true and bearing_plane_angle = 45.degrees", "output": "rule footing_protection:\n    where:\n        trench.parallel_to IN [\"footing\", \"wall\"]\n        must:\n        trench.does_not_extend_into_bearing_plane == true\n        bearing_plane_angle = 45.degrees\n        trench.location_outside_bearing_plane == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.307.5\"\n    must:\n        trench.does_not_extend_into_bearing_plane == true\n        bearing_plane_angle = 45.degrees\n        trench.location_outside_bearing_plane == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.307.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.3.307.5\"", "rule_name": "footing_protection"}
{"type": "bcl_to_physics", "input": "rule footing_protection with conditions: trench.does_not_extend_into_bearing_plane == true, bearing_plane_angle = 45.degrees", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.3.307.5", "rule_name": "footing_protection"}
{"type": "bcl_completion", "input": "rule footing_protection:\n    where:\n        trench.parallel_to IN [\"footing\", \"wall\"]\n    # Complete this rule", "output": "rule footing_protection:\n    where:\n        trench.parallel_to IN [\"footing\", \"wall\"]\n        must:\n        trench.does_not_extend_into_bearing_plane == true\n        bearing_plane_angle = 45.degrees\n        trench.location_outside_bearing_plane == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.307.5\"\n    must:\n        trench.does_not_extend_into_bearing_plane == true\n        bearing_plane_angle = 45.degrees\n        trench.location_outside_bearing_plane == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.3.307.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.3.307.5\"", "rule_name": "footing_protection"}
{"type": "safety_factor_reasoning", "input": "For footing_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.3.307.5.", "rule_name": "footing_protection", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for pipe support spacing: When pipe.requires_support == true and must:, it is required that if pipe.material == \"ABS\": and horizontal_spacing <= 4.feet", "output": "rule pipe_support_spacing:\n    where:\n        pipe.requires_support == true\n        must:\n        if pipe.material == \"ABS\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"cast_iron\":\n        horizontal_spacing <= 5.feet  # 10 feet for 10-foot lengths\n        vertical_spacing <= 15.feet\n        elif pipe.material == \"copper\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size <= 1.inch:\n        horizontal_spacing <= 3.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size > 1.inch:\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"PVC\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"steel\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 15.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.308.5\"\n    must:\n        if pipe.material == \"ABS\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"cast_iron\":\n        horizontal_spacing <= 5.feet  # 10 feet for 10-foot lengths\n        vertical_spacing <= 15.feet\n        elif pipe.material == \"copper\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size <= 1.inch:\n        horizontal_spacing <= 3.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size > 1.inch:\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"PVC\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"steel\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 15.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.308.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.308.5\"", "rule_name": "pipe_support_spacing"}
{"type": "bcl_to_physics", "input": "rule pipe_support_spacing with constraints: horizontal_spacing, vertical_spacing", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.308.5", "rule_name": "pipe_support_spacing"}
{"type": "bcl_completion", "input": "rule pipe_support_spacing:\n    where:\n        pipe.requires_support == true\n    # Complete this rule", "output": "rule pipe_support_spacing:\n    where:\n        pipe.requires_support == true\n        must:\n        if pipe.material == \"ABS\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"cast_iron\":\n        horizontal_spacing <= 5.feet  # 10 feet for 10-foot lengths\n        vertical_spacing <= 15.feet\n        elif pipe.material == \"copper\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size <= 1.inch:\n        horizontal_spacing <= 3.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size > 1.inch:\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"PVC\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"steel\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 15.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.308.5\"\n    must:\n        if pipe.material == \"ABS\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"cast_iron\":\n        horizontal_spacing <= 5.feet  # 10 feet for 10-foot lengths\n        vertical_spacing <= 15.feet\n        elif pipe.material == \"copper\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size <= 1.inch:\n        horizontal_spacing <= 3.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"CPVC\" AND pipe.size > 1.inch:\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"PVC\":\n        horizontal_spacing <= 4.feet\n        vertical_spacing <= 10.feet\n        elif pipe.material == \"steel\":\n        horizontal_spacing <= 12.feet\n        vertical_spacing <= 15.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.308.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.308.5\"", "rule_name": "pipe_support_spacing"}
{"type": "safety_factor_reasoning", "input": "For pipe_support_spacing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.308.5.", "rule_name": "pipe_support_spacing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sway bracing: When pipe.orientation == \"horizontal\" and pipe.diameter >= 4.inches, it is required that bracing.type == \"rigid\" and bracing.resists_upstream_movement == true", "output": "rule sway_bracing:\n    where:\n        pipe.orientation == \"horizontal\"\n        pipe.diameter >= 4.inches\n        pipe.conveys IN [\"drainage\", \"waste\"]\n        flow_direction_change > 45.degrees\n        must:\n        bracing.type == \"rigid\"\n        bracing.resists_upstream_movement == true\n        if flow_direction.to == \"vertical\":\n        bracing.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.6\"\n    must:\n        bracing.type == \"rigid\"\n        bracing.resists_upstream_movement == true\n        if flow_direction.to == \"vertical\":\n        bracing.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.308.6\"", "rule_name": "sway_bracing"}
{"type": "bcl_to_physics", "input": "rule sway_bracing with constraints: diameter, flow_direction_change", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.3.308.6", "rule_name": "sway_bracing"}
{"type": "bcl_completion", "input": "rule sway_bracing:\n    where:\n        pipe.orientation == \"horizontal\"\n    # Complete this rule", "output": "rule sway_bracing:\n    where:\n        pipe.orientation == \"horizontal\"\n        pipe.diameter >= 4.inches\n        pipe.conveys IN [\"drainage\", \"waste\"]\n        flow_direction_change > 45.degrees\n        must:\n        bracing.type == \"rigid\"\n        bracing.resists_upstream_movement == true\n        if flow_direction.to == \"vertical\":\n        bracing.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.6\"\n    must:\n        bracing.type == \"rigid\"\n        bracing.resists_upstream_movement == true\n        if flow_direction.to == \"vertical\":\n        bracing.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.308.6\"", "rule_name": "sway_bracing"}
{"type": "safety_factor_reasoning", "input": "For sway_bracing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.308.6.", "rule_name": "sway_bracing", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for pipe anchorage: When pipe.type == \"drainage\" and pipe.diameter > 4.inches, it is required that anchorage.prevents_axial_movement == true and restraints.at_direction_changes == true", "output": "rule pipe_anchorage:\n    where:\n        pipe.type == \"drainage\"\n        pipe.diameter > 4.inches\n        must:\n        anchorage.prevents_axial_movement == true\n        restraints.at_direction_changes == true\n        restraints.at_diameter_changes == true  # Greater than 2 pipe sizes\n        restraint.methods IN [\"braces\", \"blocks\", \"rodding\", \"manufacturer_specified\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.7\"\n    must:\n        anchorage.prevents_axial_movement == true\n        restraints.at_direction_changes == true\n        restraints.at_diameter_changes == true  # Greater than 2 pipe sizes\n        restraint.methods IN [\"braces\", \"blocks\", \"rodding\", \"manufacturer_specified\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.7\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.308.7\"", "rule_name": "pipe_anchorage"}
{"type": "bcl_to_physics", "input": "rule pipe_anchorage with constraints: diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.3.308.7", "rule_name": "pipe_anchorage"}
{"type": "bcl_completion", "input": "rule pipe_anchorage:\n    where:\n        pipe.type == \"drainage\"\n    # Complete this rule", "output": "rule pipe_anchorage:\n    where:\n        pipe.type == \"drainage\"\n        pipe.diameter > 4.inches\n        must:\n        anchorage.prevents_axial_movement == true\n        restraints.at_direction_changes == true\n        restraints.at_diameter_changes == true  # Greater than 2 pipe sizes\n        restraint.methods IN [\"braces\", \"blocks\", \"rodding\", \"manufacturer_specified\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.7\"\n    must:\n        anchorage.prevents_axial_movement == true\n        restraints.at_direction_changes == true\n        restraints.at_diameter_changes == true  # Greater than 2 pipe sizes\n        restraint.methods IN [\"braces\", \"blocks\", \"rodding\", \"manufacturer_specified\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.308.7\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.308.7\"", "rule_name": "pipe_anchorage"}
{"type": "safety_factor_reasoning", "input": "For pipe_anchorage rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.308.7.", "rule_name": "pipe_anchorage", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for water test requirements: When test.type == \"drainage_vent_water_test\" and must:, it is required that system.filled_to_overflow == true and if test.by_sections == true:", "output": "rule water_test_requirements:\n    where:\n        test.type == \"drainage_vent_water_test\"\n        must:\n        system.filled_to_overflow == true\n        if test.by_sections == true:\n        water_head >= 5.feet\n        previous_section.upper_5_feet_tested == true\n        test_duration >= 15.minutes\n        system.tight_at_all_points == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.2\"\n    must:\n        system.filled_to_overflow == true\n        if test.by_sections == true:\n        water_head >= 5.feet\n        previous_section.upper_5_feet_tested == true\n        test_duration >= 15.minutes\n        system.tight_at_all_points == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.312.2\"", "rule_name": "water_test_requirements"}
{"type": "bcl_to_physics", "input": "rule water_test_requirements with constraints: water_head, test_duration", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.3.312.2", "rule_name": "water_test_requirements"}
{"type": "bcl_completion", "input": "rule water_test_requirements:\n    where:\n        test.type == \"drainage_vent_water_test\"\n    # Complete this rule", "output": "rule water_test_requirements:\n    where:\n        test.type == \"drainage_vent_water_test\"\n        must:\n        system.filled_to_overflow == true\n        if test.by_sections == true:\n        water_head >= 5.feet\n        previous_section.upper_5_feet_tested == true\n        test_duration >= 15.minutes\n        system.tight_at_all_points == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.2\"\n    must:\n        system.filled_to_overflow == true\n        if test.by_sections == true:\n        water_head >= 5.feet\n        previous_section.upper_5_feet_tested == true\n        test_duration >= 15.minutes\n        system.tight_at_all_points == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.312.2\"", "rule_name": "water_test_requirements"}
{"type": "safety_factor_reasoning", "input": "For water_test_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.312.2.", "rule_name": "water_test_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for air test requirements: When test.type == \"drainage_vent_air_test\" and pipe.material != \"plastic\", it is required that test_pressure == 5.psi OR test_pressure == 10.inches_mercury and test_duration >= 15.minutes", "output": "rule air_test_requirements:\n    where:\n        test.type == \"drainage_vent_air_test\"\n        pipe.material != \"plastic\"\n        must:\n        test_pressure == 5.psi OR test_pressure == 10.inches_mercury\n        test_duration >= 15.minutes\n        adjustments_for IN [\"ambient_temperature\", \"gasket_seating\"]\n        adjustments.completed_before_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.3\"\n    must:\n        test_pressure == 5.psi OR test_pressure == 10.inches_mercury\n        test_duration >= 15.minutes\n        adjustments_for IN [\"ambient_temperature\", \"gasket_seating\"]\n        adjustments.completed_before_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.312.3\"", "rule_name": "air_test_requirements"}
{"type": "bcl_to_physics", "input": "rule air_test_requirements with constraints: test_duration", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.3.312.3", "rule_name": "air_test_requirements"}
{"type": "bcl_completion", "input": "rule air_test_requirements:\n    where:\n        test.type == \"drainage_vent_air_test\"\n    # Complete this rule", "output": "rule air_test_requirements:\n    where:\n        test.type == \"drainage_vent_air_test\"\n        pipe.material != \"plastic\"\n        must:\n        test_pressure == 5.psi OR test_pressure == 10.inches_mercury\n        test_duration >= 15.minutes\n        adjustments_for IN [\"ambient_temperature\", \"gasket_seating\"]\n        adjustments.completed_before_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.3\"\n    must:\n        test_pressure == 5.psi OR test_pressure == 10.inches_mercury\n        test_duration >= 15.minutes\n        adjustments_for IN [\"ambient_temperature\", \"gasket_seating\"]\n        adjustments.completed_before_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.312.3\"", "rule_name": "air_test_requirements"}
{"type": "safety_factor_reasoning", "input": "For air_test_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.312.3.", "rule_name": "air_test_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for water supply test: When test.type == \"water_supply_system\" and must:, it is required that test_pressure >= system.working_pressure and if test.method == \"air\" AND pipe.material != \"plastic\":", "output": "rule water_supply_test:\n    where:\n        test.type == \"water_supply_system\"\n        must:\n        test_pressure >= system.working_pressure\n        if test.method == \"air\" AND pipe.material != \"plastic\":\n        test_pressure >= 50.psi\n        test_duration >= 15.minutes\n        water_source == \"potable\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.5\"\n    must:\n        test_pressure >= system.working_pressure\n        if test.method == \"air\" AND pipe.material != \"plastic\":\n        test_pressure >= 50.psi\n        test_duration >= 15.minutes\n        water_source == \"potable\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.312.5\"", "rule_name": "water_supply_test"}
{"type": "bcl_to_physics", "input": "rule water_supply_test with constraints: test_pressure, test_duration", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.3.312.5", "rule_name": "water_supply_test"}
{"type": "bcl_completion", "input": "rule water_supply_test:\n    where:\n        test.type == \"water_supply_system\"\n    # Complete this rule", "output": "rule water_supply_test:\n    where:\n        test.type == \"water_supply_system\"\n        must:\n        test_pressure >= system.working_pressure\n        if test.method == \"air\" AND pipe.material != \"plastic\":\n        test_pressure >= 50.psi\n        test_duration >= 15.minutes\n        water_source == \"potable\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.5\"\n    must:\n        test_pressure >= system.working_pressure\n        if test.method == \"air\" AND pipe.material != \"plastic\":\n        test_pressure >= 50.psi\n        test_duration >= 15.minutes\n        water_source == \"potable\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.312.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.312.5\"", "rule_name": "water_supply_test"}
{"type": "safety_factor_reasoning", "input": "For water_supply_test rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.312.5.", "rule_name": "water_supply_test", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for shower liner test: When shower.waterproofing == \"applied_materials\" and must:, it is required that drain.plugged_watertight == true and water.depth >= 2.inches", "output": "rule shower_liner_test:\n    where:\n        shower.waterproofing == \"applied_materials\"\n        must:\n        drain.plugged_watertight == true\n        water.depth >= 2.inches\n        water.measured_at_threshold == true\n        if existing_threshold < 2.inches:\n        temporary_threshold.height >= 2.inches\n        test_duration >= 15.minutes\n        leakage == 0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.9\"\n    must:\n        drain.plugged_watertight == true\n        water.depth >= 2.inches\n        water.measured_at_threshold == true\n        if existing_threshold < 2.inches:\n        temporary_threshold.height >= 2.inches\n        test_duration >= 15.minutes\n        leakage == 0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.9\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.312.9\"", "rule_name": "shower_liner_test"}
{"type": "bcl_to_physics", "input": "rule shower_liner_test with constraints: depth, existing_threshold", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.312.9", "rule_name": "shower_liner_test"}
{"type": "bcl_completion", "input": "rule shower_liner_test:\n    where:\n        shower.waterproofing == \"applied_materials\"\n    # Complete this rule", "output": "rule shower_liner_test:\n    where:\n        shower.waterproofing == \"applied_materials\"\n        must:\n        drain.plugged_watertight == true\n        water.depth >= 2.inches\n        water.measured_at_threshold == true\n        if existing_threshold < 2.inches:\n        temporary_threshold.height >= 2.inches\n        test_duration >= 15.minutes\n        leakage == 0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.9\"\n    must:\n        drain.plugged_watertight == true\n        water.depth >= 2.inches\n        water.measured_at_threshold == true\n        if existing_threshold < 2.inches:\n        temporary_threshold.height >= 2.inches\n        test_duration >= 15.minutes\n        leakage == 0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.312.9\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.312.9\"", "rule_name": "shower_liner_test"}
{"type": "safety_factor_reasoning", "input": "For shower_liner_test rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.312.9.", "rule_name": "shower_liner_test", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for condensate piping slope: When pipe.type == \"condensate\" and must:, it is required that pipe.material == \"corrosion_resistant\" and pipe.size >= appliance.drain_connection_size", "output": "rule condensate_piping_slope:\n    where:\n        pipe.type == \"condensate\"\n        must:\n        pipe.material == \"corrosion_resistant\"\n        pipe.size >= appliance.drain_connection_size\n        pipe.slope >= 0.125.inches_per_foot  # 1% slope\n        pipe.slope_direction == \"toward_discharge\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.1\"\n    must:\n        pipe.material == \"corrosion_resistant\"\n        pipe.size >= appliance.drain_connection_size\n        pipe.slope >= 0.125.inches_per_foot  # 1% slope\n        pipe.slope_direction == \"toward_discharge\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.314.1\"", "rule_name": "condensate_piping_slope"}
{"type": "bcl_to_physics", "input": "rule condensate_piping_slope with constraints: slope", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.314.1", "rule_name": "condensate_piping_slope"}
{"type": "bcl_completion", "input": "rule condensate_piping_slope:\n    where:\n        pipe.type == \"condensate\"\n    # Complete this rule", "output": "rule condensate_piping_slope:\n    where:\n        pipe.type == \"condensate\"\n        must:\n        pipe.material == \"corrosion_resistant\"\n        pipe.size >= appliance.drain_connection_size\n        pipe.slope >= 0.125.inches_per_foot  # 1% slope\n        pipe.slope_direction == \"toward_discharge\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.1\"\n    must:\n        pipe.material == \"corrosion_resistant\"\n        pipe.size >= appliance.drain_connection_size\n        pipe.slope >= 0.125.inches_per_foot  # 1% slope\n        pipe.slope_direction == \"toward_discharge\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.314.1\"", "rule_name": "condensate_piping_slope"}
{"type": "safety_factor_reasoning", "input": "For condensate_piping_slope rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.314.1.", "rule_name": "condensate_piping_slope", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for condensate drain sizing: When drain.type == \"condensate\" and equipment.produces_condensate == true, it is required that pipe.size >= 0.75.inches and pipe.size_constant_or_increasing == true", "output": "rule condensate_drain_sizing:\n    where:\n        drain.type == \"condensate\"\n        equipment.produces_condensate == true\n        must:\n        pipe.size >= 0.75.inches\n        pipe.size_constant_or_increasing == true\n        if multiple_units.manifolded == true:\n        if capacity <= 20.tons:\n        pipe.size >= 0.75.inches\n        elif capacity <= 40.tons:\n        pipe.size >= 1.inch\n        elif capacity <= 90.tons:\n        pipe.size >= 1.25.inches\n        elif capacity <= 125.tons:\n        pipe.size >= 1.5.inches\n        elif capacity <= 250.tons:\n        pipe.size >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.2.2\"\n    must:\n        pipe.size >= 0.75.inches\n        pipe.size_constant_or_increasing == true\n        if multiple_units.manifolded == true:\n        if capacity <= 20.tons:\n        pipe.size >= 0.75.inches\n        elif capacity <= 40.tons:\n        pipe.size >= 1.inch\n        elif capacity <= 90.tons:\n        pipe.size >= 1.25.inches\n        elif capacity <= 125.tons:\n        pipe.size >= 1.5.inches\n        elif capacity <= 250.tons:\n        pipe.size >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.2.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.314.2.2\"", "rule_name": "condensate_drain_sizing"}
{"type": "bcl_to_physics", "input": "rule condensate_drain_sizing with constraints: size, capacity", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.3.314.2.2", "rule_name": "condensate_drain_sizing"}
{"type": "bcl_completion", "input": "rule condensate_drain_sizing:\n    where:\n        drain.type == \"condensate\"\n    # Complete this rule", "output": "rule condensate_drain_sizing:\n    where:\n        drain.type == \"condensate\"\n        equipment.produces_condensate == true\n        must:\n        pipe.size >= 0.75.inches\n        pipe.size_constant_or_increasing == true\n        if multiple_units.manifolded == true:\n        if capacity <= 20.tons:\n        pipe.size >= 0.75.inches\n        elif capacity <= 40.tons:\n        pipe.size >= 1.inch\n        elif capacity <= 90.tons:\n        pipe.size >= 1.25.inches\n        elif capacity <= 125.tons:\n        pipe.size >= 1.5.inches\n        elif capacity <= 250.tons:\n        pipe.size >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.2.2\"\n    must:\n        pipe.size >= 0.75.inches\n        pipe.size_constant_or_increasing == true\n        if multiple_units.manifolded == true:\n        if capacity <= 20.tons:\n        pipe.size >= 0.75.inches\n        elif capacity <= 40.tons:\n        pipe.size >= 1.inch\n        elif capacity <= 90.tons:\n        pipe.size >= 1.25.inches\n        elif capacity <= 125.tons:\n        pipe.size >= 1.5.inches\n        elif capacity <= 250.tons:\n        pipe.size >= 2.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.3.314.2.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.3.314.2.2\"", "rule_name": "condensate_drain_sizing"}
{"type": "safety_factor_reasoning", "input": "For condensate_drain_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.3.314.2.2.", "rule_name": "condensate_drain_sizing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for auxiliary drain pan: When equipment.produces_condensate == true and overflow.could_damage_building == true, it is required that protection.method IN [ and \"auxiliary_pan_with_drain\",", "output": "rule auxiliary_drain_pan:\n    where:\n        equipment.produces_condensate == true\n        overflow.could_damage_building == true\n        must:\n        protection.method IN [\n        \"auxiliary_pan_with_drain\",\n        \"overflow_drain_line\",\n        \"auxiliary_pan_with_shutoff\",\n        \"water_level_detector\"\n        ]\n        if protection.includes_pan == true:\n        pan.depth >= 1.5.inches\n        pan.width >= coil.width + 3.inches\n        pan.length >= coil.length + 3.inches\n        pan.material == \"corrosion_resistant\"\n        if pan.material == \"galvanized_steel\":\n        pan.thickness >= 0.0236.inches  # No. 24 gauge\n        elif pan.material == \"nonmetallic\":\n        pan.thickness >= 0.0625.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.314.2.3\"\n        constraint buried_pipe_loading:\n        where:\n        pipe.buried == true\n        must:\n        soil_load = soil_density * gravity * burial_depth * pipe.width\n        surface_load_on_pipe = surface_load * impact_factor / load_distribution_area\n        total_load = soil_load + surface_load_on_pipe\n        pipe.crushing_strength > total_load * safety_factor\n        safety_factor: 2.0\n        constraint pipe_thermal_expansion:\n        where:\n        pipe.subject_to_temperature_change == true\n        must:\n        expansion_length = pipe.length * material.expansion_coefficient * temperature_change\n        thermal_stress = material.modulus * material.expansion_coefficient * temperature_change\n        thermal_stress < material.yield_strength * 0.5\n        safety_factor: 2.0\n        constraint frost_line_protection:\n        where:\n        pipe.exterior_water_supply == true\n        must:\n        soil_insulation_value = burial_depth * soil.thermal_resistance\n        heat_loss_rate = (ground_temp - air_temp) / soil_insulation_value\n        time_to_freeze = pipe.water_volume * water.specific_heat * (32 - water_temp) / heat_loss_rate\n        time_to_freeze > maximum_cold_duration\n        safety_factor: 1.5\n        constraint support_spacing_deflection:\n        where:\n        pipe.supported == true\n        must:\n        deflection = (5 * distributed_load * span^4) / (384 * material.modulus * moment_of_inertia)\n        deflection < span / 240  # Typical deflection limit\n        bending_stress = (distributed_load * span^2) / (8 * section_modulus)\n        bending_stress < material.allowable_stress\n        safety_factor: 1.5\n        constraint test_pressure_integrity:\n        where:\n        test.pressure_test == true\n        must:\n        hoop_stress = (test_pressure * pipe.diameter) / (2 * pipe.wall_thickness)\n        hoop_stress < material.yield_strength * 0.5\n        joint.pressure_rating >= test_pressure * 1.5\n    must:\n        protection.method IN [\n        \"auxiliary_pan_with_drain\",\n        \"overflow_drain_line\",\n        \"auxiliary_pan_with_shutoff\",\n        \"water_level_detector\"\n        ]\n        if protection.includes_pan == true:\n        pan.depth >= 1.5.inches\n        pan.width >= coil.width + 3.inches\n        pan.length >= coil.length + 3.inches\n        pan.material == \"corrosion_resistant\"\n        if pan.material == \"galvanized_steel\":\n        pan.thickness >= 0.0236.inches  # No. 24 gauge\n        elif pan.material == \"nonmetallic\":\n        pan.thickness >= 0.0625.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.314.2.3\"\n        constraint buried_pipe_loading:\n        where:\n        pipe.buried == true\n        must:\n        soil_load = soil_density * gravity * burial_depth * pipe.width\n        surface_load_on_pipe = surface_load * impact_factor / load_distribution_area\n        total_load = soil_load + surface_load_on_pipe\n        pipe.crushing_strength > total_load * safety_factor\n        safety_factor: 2.0\n        constraint pipe_thermal_expansion:\n        where:\n        pipe.subject_to_temperature_change == true\n        must:\n        expansion_length = pipe.length * material.expansion_coefficient * temperature_change\n        thermal_stress = material.modulus * material.expansion_coefficient * temperature_change\n        thermal_stress < material.yield_strength * 0.5\n        safety_factor: 2.0\n        constraint frost_line_protection:\n        where:\n        pipe.exterior_water_supply == true\n        must:\n        soil_insulation_value = burial_depth * soil.thermal_resistance\n        heat_loss_rate = (ground_temp - air_temp) / soil_insulation_value\n        time_to_freeze = pipe.water_volume * water.specific_heat * (32 - water_temp) / heat_loss_rate\n        time_to_freeze > maximum_cold_duration\n        safety_factor: 1.5\n        constraint support_spacing_deflection:\n        where:\n        pipe.supported == true\n        must:\n        deflection = (5 * distributed_load * span^4) / (384 * material.modulus * moment_of_inertia)\n        deflection < span / 240  # Typical deflection limit\n        bending_stress = (distributed_load * span^2) / (8 * section_modulus)\n        bending_stress < material.allowable_stress\n        safety_factor: 1.5\n        constraint test_pressure_integrity:\n        where:\n        test.pressure_test == true\n        must:\n        hoop_stress = (test_pressure * pipe.diameter) / (2 * pipe.wall_thickness)\n        hoop_stress < material.yield_strength * 0.5\n        joint.pressure_rating >= test_pressure * 1.5\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.314.2.3\"", "rule_name": "auxiliary_drain_pan"}
{"type": "bcl_to_physics", "input": "rule auxiliary_drain_pan with constraints: depth, thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.3.314.2.3", "rule_name": "auxiliary_drain_pan"}
{"type": "bcl_completion", "input": "rule auxiliary_drain_pan:\n    where:\n        equipment.produces_condensate == true\n    # Complete this rule", "output": "rule auxiliary_drain_pan:\n    where:\n        equipment.produces_condensate == true\n        overflow.could_damage_building == true\n        must:\n        protection.method IN [\n        \"auxiliary_pan_with_drain\",\n        \"overflow_drain_line\",\n        \"auxiliary_pan_with_shutoff\",\n        \"water_level_detector\"\n        ]\n        if protection.includes_pan == true:\n        pan.depth >= 1.5.inches\n        pan.width >= coil.width + 3.inches\n        pan.length >= coil.length + 3.inches\n        pan.material == \"corrosion_resistant\"\n        if pan.material == \"galvanized_steel\":\n        pan.thickness >= 0.0236.inches  # No. 24 gauge\n        elif pan.material == \"nonmetallic\":\n        pan.thickness >= 0.0625.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.314.2.3\"\n        constraint buried_pipe_loading:\n        where:\n        pipe.buried == true\n        must:\n        soil_load = soil_density * gravity * burial_depth * pipe.width\n        surface_load_on_pipe = surface_load * impact_factor / load_distribution_area\n        total_load = soil_load + surface_load_on_pipe\n        pipe.crushing_strength > total_load * safety_factor\n        safety_factor: 2.0\n        constraint pipe_thermal_expansion:\n        where:\n        pipe.subject_to_temperature_change == true\n        must:\n        expansion_length = pipe.length * material.expansion_coefficient * temperature_change\n        thermal_stress = material.modulus * material.expansion_coefficient * temperature_change\n        thermal_stress < material.yield_strength * 0.5\n        safety_factor: 2.0\n        constraint frost_line_protection:\n        where:\n        pipe.exterior_water_supply == true\n        must:\n        soil_insulation_value = burial_depth * soil.thermal_resistance\n        heat_loss_rate = (ground_temp - air_temp) / soil_insulation_value\n        time_to_freeze = pipe.water_volume * water.specific_heat * (32 - water_temp) / heat_loss_rate\n        time_to_freeze > maximum_cold_duration\n        safety_factor: 1.5\n        constraint support_spacing_deflection:\n        where:\n        pipe.supported == true\n        must:\n        deflection = (5 * distributed_load * span^4) / (384 * material.modulus * moment_of_inertia)\n        deflection < span / 240  # Typical deflection limit\n        bending_stress = (distributed_load * span^2) / (8 * section_modulus)\n        bending_stress < material.allowable_stress\n        safety_factor: 1.5\n        constraint test_pressure_integrity:\n        where:\n        test.pressure_test == true\n        must:\n        hoop_stress = (test_pressure * pipe.diameter) / (2 * pipe.wall_thickness)\n        hoop_stress < material.yield_strength * 0.5\n        joint.pressure_rating >= test_pressure * 1.5\n    must:\n        protection.method IN [\n        \"auxiliary_pan_with_drain\",\n        \"overflow_drain_line\",\n        \"auxiliary_pan_with_shutoff\",\n        \"water_level_detector\"\n        ]\n        if protection.includes_pan == true:\n        pan.depth >= 1.5.inches\n        pan.width >= coil.width + 3.inches\n        pan.length >= coil.length + 3.inches\n        pan.material == \"corrosion_resistant\"\n        if pan.material == \"galvanized_steel\":\n        pan.thickness >= 0.0236.inches  # No. 24 gauge\n        elif pan.material == \"nonmetallic\":\n        pan.thickness >= 0.0625.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.3.314.2.3\"\n        constraint buried_pipe_loading:\n        where:\n        pipe.buried == true\n        must:\n        soil_load = soil_density * gravity * burial_depth * pipe.width\n        surface_load_on_pipe = surface_load * impact_factor / load_distribution_area\n        total_load = soil_load + surface_load_on_pipe\n        pipe.crushing_strength > total_load * safety_factor\n        safety_factor: 2.0\n        constraint pipe_thermal_expansion:\n        where:\n        pipe.subject_to_temperature_change == true\n        must:\n        expansion_length = pipe.length * material.expansion_coefficient * temperature_change\n        thermal_stress = material.modulus * material.expansion_coefficient * temperature_change\n        thermal_stress < material.yield_strength * 0.5\n        safety_factor: 2.0\n        constraint frost_line_protection:\n        where:\n        pipe.exterior_water_supply == true\n        must:\n        soil_insulation_value = burial_depth * soil.thermal_resistance\n        heat_loss_rate = (ground_temp - air_temp) / soil_insulation_value\n        time_to_freeze = pipe.water_volume * water.specific_heat * (32 - water_temp) / heat_loss_rate\n        time_to_freeze > maximum_cold_duration\n        safety_factor: 1.5\n        constraint support_spacing_deflection:\n        where:\n        pipe.supported == true\n        must:\n        deflection = (5 * distributed_load * span^4) / (384 * material.modulus * moment_of_inertia)\n        deflection < span / 240  # Typical deflection limit\n        bending_stress = (distributed_load * span^2) / (8 * section_modulus)\n        bending_stress < material.allowable_stress\n        safety_factor: 1.5\n        constraint test_pressure_integrity:\n        where:\n        test.pressure_test == true\n        must:\n        hoop_stress = (test_pressure * pipe.diameter) / (2 * pipe.wall_thickness)\n        hoop_stress < material.yield_strength * 0.5\n        joint.pressure_rating >= test_pressure * 1.5\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.3.314.2.3\"", "rule_name": "auxiliary_drain_pan"}
{"type": "safety_factor_reasoning", "input": "For auxiliary_drain_pan rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.3.314.2.3.", "rule_name": "auxiliary_drain_pan", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for sheet copper weight: When material.type == \"sheet_copper\" and application == \"general\", it is required that material.conforms_to == \"ASTM_B152\" and material.weight >= 12.ounces_per_sqft  # 3.7 kg/m\u00c2\u00b2", "output": "rule sheet_copper_weight:\n    where:\n        material.type == \"sheet_copper\"\n        application == \"general\"\n        must:\n        material.conforms_to == \"ASTM_B152\"\n        material.weight >= 12.ounces_per_sqft  # 3.7 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.402.3\"\n    must:\n        material.conforms_to == \"ASTM_B152\"\n        material.weight >= 12.ounces_per_sqft  # 3.7 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.402.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.402.3\"", "rule_name": "sheet_copper_weight"}
{"type": "bcl_to_physics", "input": "rule sheet_copper_weight with constraints: weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.402.3", "rule_name": "sheet_copper_weight"}
{"type": "bcl_completion", "input": "rule sheet_copper_weight:\n    where:\n        material.type == \"sheet_copper\"\n    # Complete this rule", "output": "rule sheet_copper_weight:\n    where:\n        material.type == \"sheet_copper\"\n        application == \"general\"\n        must:\n        material.conforms_to == \"ASTM_B152\"\n        material.weight >= 12.ounces_per_sqft  # 3.7 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.402.3\"\n    must:\n        material.conforms_to == \"ASTM_B152\"\n        material.weight >= 12.ounces_per_sqft  # 3.7 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.402.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.402.3\"", "rule_name": "sheet_copper_weight"}
{"type": "safety_factor_reasoning", "input": "For sheet_copper_weight rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.402.3.", "rule_name": "sheet_copper_weight", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sheet lead weight: When material.type == \"sheet_lead\" and application == \"pans\", it is required that material.weight >= 4.pounds_per_sqft  # 19.5 kg/m\u00c2\u00b2 and material.coating IN [\"asphalt_paint\", \"approved_coating\"]", "output": "rule sheet_lead_weight:\n    where:\n        material.type == \"sheet_lead\"\n        application == \"pans\"\n        must:\n        material.weight >= 4.pounds_per_sqft  # 19.5 kg/m\u00c2\u00b2\n        material.coating IN [\"asphalt_paint\", \"approved_coating\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.402.4\"\n    must:\n        material.weight >= 4.pounds_per_sqft  # 19.5 kg/m\u00c2\u00b2\n        material.coating IN [\"asphalt_paint\", \"approved_coating\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.402.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.402.4\"", "rule_name": "sheet_lead_weight"}
{"type": "bcl_to_physics", "input": "rule sheet_lead_weight with constraints: weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.4.402.4", "rule_name": "sheet_lead_weight"}
{"type": "bcl_completion", "input": "rule sheet_lead_weight:\n    where:\n        material.type == \"sheet_lead\"\n    # Complete this rule", "output": "rule sheet_lead_weight:\n    where:\n        material.type == \"sheet_lead\"\n        application == \"pans\"\n        must:\n        material.weight >= 4.pounds_per_sqft  # 19.5 kg/m\u00c2\u00b2\n        material.coating IN [\"asphalt_paint\", \"approved_coating\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.402.4\"\n    must:\n        material.weight >= 4.pounds_per_sqft  # 19.5 kg/m\u00c2\u00b2\n        material.coating IN [\"asphalt_paint\", \"approved_coating\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.402.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.402.4\"", "rule_name": "sheet_lead_weight"}
{"type": "safety_factor_reasoning", "input": "For sheet_lead_weight rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.4.402.4.", "rule_name": "sheet_lead_weight", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for public restroom distance: When occupancy.type != \"mall\" and toilet_facilities.required == true, it is required that abs(toilet_location.floor - occupied_space.floor) <= 1 and path_of_travel.distance <= 500.feet", "output": "rule public_restroom_distance:\n    where:\n        occupancy.type != \"mall\"\n        toilet_facilities.required == true\n        must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 500.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.3\"\n    must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 500.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.3.3\"", "rule_name": "public_restroom_distance"}
{"type": "bcl_to_physics", "input": "rule public_restroom_distance with constraints: distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.403.3.3", "rule_name": "public_restroom_distance"}
{"type": "bcl_completion", "input": "rule public_restroom_distance:\n    where:\n        occupancy.type != \"mall\"\n    # Complete this rule", "output": "rule public_restroom_distance:\n    where:\n        occupancy.type != \"mall\"\n        toilet_facilities.required == true\n        must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 500.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.3\"\n    must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 500.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.3.3\"", "rule_name": "public_restroom_distance"}
{"type": "safety_factor_reasoning", "input": "For public_restroom_distance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.403.3.3.", "rule_name": "public_restroom_distance", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for mall restroom distance: When occupancy.type == \"mall\" and toilet_facilities.required == true, it is required that abs(toilet_location.floor - occupied_space.floor) <= 1 and path_of_travel.distance <= 300.feet", "output": "rule mall_restroom_distance:\n    where:\n        occupancy.type == \"mall\"\n        toilet_facilities.required == true\n        must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.4\"\n    must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.4\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.3.4\"", "rule_name": "mall_restroom_distance"}
{"type": "bcl_to_physics", "input": "rule mall_restroom_distance with constraints: distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.403.3.4", "rule_name": "mall_restroom_distance"}
{"type": "bcl_completion", "input": "rule mall_restroom_distance:\n    where:\n        occupancy.type == \"mall\"\n    # Complete this rule", "output": "rule mall_restroom_distance:\n    where:\n        occupancy.type == \"mall\"\n        toilet_facilities.required == true\n        must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.4\"\n    must:\n        abs(toilet_location.floor - occupied_space.floor) <= 1\n        path_of_travel.distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.3.4\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.3.4\"", "rule_name": "mall_restroom_distance"}
{"type": "safety_factor_reasoning", "input": "For mall_restroom_distance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.403.3.4.", "rule_name": "mall_restroom_distance", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for drinking fountain distance: When drinking_fountain.required == true and location != \"individual_tenant_space\", it is required that if occupancy.type != \"mall\": and travel_distance <= 500.feet", "output": "rule drinking_fountain_distance:\n    where:\n        drinking_fountain.required == true\n        location != \"individual_tenant_space\"\n        must:\n        if occupancy.type != \"mall\":\n        travel_distance <= 500.feet\n        abs(fountain.floor - space.floor) <= 1\n        else:\n        travel_distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.5\"\n    must:\n        if occupancy.type != \"mall\":\n        travel_distance <= 500.feet\n        abs(fountain.floor - space.floor) <= 1\n        else:\n        travel_distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.5\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.5\"", "rule_name": "drinking_fountain_distance"}
{"type": "bcl_to_physics", "input": "rule drinking_fountain_distance with constraints: travel_distance, travel_distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.403.5", "rule_name": "drinking_fountain_distance"}
{"type": "bcl_completion", "input": "rule drinking_fountain_distance:\n    where:\n        drinking_fountain.required == true\n    # Complete this rule", "output": "rule drinking_fountain_distance:\n    where:\n        drinking_fountain.required == true\n        location != \"individual_tenant_space\"\n        must:\n        if occupancy.type != \"mall\":\n        travel_distance <= 500.feet\n        abs(fountain.floor - space.floor) <= 1\n        else:\n        travel_distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.5\"\n    must:\n        if occupancy.type != \"mall\":\n        travel_distance <= 500.feet\n        abs(fountain.floor - space.floor) <= 1\n        else:\n        travel_distance <= 300.feet\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.5\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.5\"", "rule_name": "drinking_fountain_distance"}
{"type": "safety_factor_reasoning", "input": "For drinking_fountain_distance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.403.5.", "rule_name": "drinking_fountain_distance", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for pool restroom distance: When facility.type == \"public_swimming_pool\" and restrooms.required == true, it is required that walking_distance(restroom.entry_door, pool.waters_edge) <= 200.feet and if pool.serves == \"designated_residential_units\":", "output": "rule pool_restroom_distance:\n    where:\n        facility.type == \"public_swimming_pool\"\n        restrooms.required == true\n        must:\n        walking_distance(restroom.entry_door, pool.waters_edge) <= 200.feet\n        if pool.serves == \"designated_residential_units\":\n        if all_units.within_radius(200.feet) AND units.height <= 3.stories:\n        poolside_facilities.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.6\"\n    must:\n        walking_distance(restroom.entry_door, pool.waters_edge) <= 200.feet\n        if pool.serves == \"designated_residential_units\":\n        if all_units.within_radius(200.feet) AND units.height <= 3.stories:\n        poolside_facilities.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.6\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.6\"", "rule_name": "pool_restroom_distance"}
{"type": "bcl_to_physics", "input": "rule pool_restroom_distance with constraints: height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.403.6", "rule_name": "pool_restroom_distance"}
{"type": "bcl_completion", "input": "rule pool_restroom_distance:\n    where:\n        facility.type == \"public_swimming_pool\"\n    # Complete this rule", "output": "rule pool_restroom_distance:\n    where:\n        facility.type == \"public_swimming_pool\"\n        restrooms.required == true\n        must:\n        walking_distance(restroom.entry_door, pool.waters_edge) <= 200.feet\n        if pool.serves == \"designated_residential_units\":\n        if all_units.within_radius(200.feet) AND units.height <= 3.stories:\n        poolside_facilities.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.6\"\n    must:\n        walking_distance(restroom.entry_door, pool.waters_edge) <= 200.feet\n        if pool.serves == \"designated_residential_units\":\n        if all_units.within_radius(200.feet) AND units.height <= 3.stories:\n        poolside_facilities.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.403.6\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.403.6\"", "rule_name": "pool_restroom_distance"}
{"type": "safety_factor_reasoning", "input": "For pool_restroom_distance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.403.6.", "rule_name": "pool_restroom_distance", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for water closet clearances: When fixture.type IN [\"water_closet\", \"urinal\", \"lavatory\", \"bidet\"] and must:, it is required that clearance_to_side_obstruction >= 15.inches  # From center and if adjacent_fixture.exists == true:", "output": "rule water_closet_clearances:\n    where:\n        fixture.type IN [\"water_closet\", \"urinal\", \"lavatory\", \"bidet\"]\n        must:\n        clearance_to_side_obstruction >= 15.inches  # From center\n        if adjacent_fixture.exists == true:\n        center_to_center_distance >= 30.inches\n        clearance_to_front_obstruction >= 21.inches\n        if fixture.type == \"water_closet\" AND compartment.required == true:\n        compartment.width >= 30.inches\n        if water_closet.floor_mounted == true:\n        compartment.depth >= 60.inches\n        else:  # Wall hung\n        compartment.depth >= 56.inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.1\"\n    must:\n        clearance_to_side_obstruction >= 15.inches  # From center\n        if adjacent_fixture.exists == true:\n        center_to_center_distance >= 30.inches\n        clearance_to_front_obstruction >= 21.inches\n        if fixture.type == \"water_closet\" AND compartment.required == true:\n        compartment.width >= 30.inches\n        if water_closet.floor_mounted == true:\n        compartment.depth >= 60.inches\n        else:  # Wall hung\n        compartment.depth >= 56.inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.405.3.1\"", "rule_name": "water_closet_clearances"}
{"type": "bcl_to_physics", "input": "rule water_closet_clearances with constraints: clearance_to_side_obstruction, center_to_center_distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.405.3.1", "rule_name": "water_closet_clearances"}
{"type": "bcl_completion", "input": "rule water_closet_clearances:\n    where:\n        fixture.type IN [\"water_closet\", \"urinal\", \"lavatory\", \"bidet\"]\n    # Complete this rule", "output": "rule water_closet_clearances:\n    where:\n        fixture.type IN [\"water_closet\", \"urinal\", \"lavatory\", \"bidet\"]\n        must:\n        clearance_to_side_obstruction >= 15.inches  # From center\n        if adjacent_fixture.exists == true:\n        center_to_center_distance >= 30.inches\n        clearance_to_front_obstruction >= 21.inches\n        if fixture.type == \"water_closet\" AND compartment.required == true:\n        compartment.width >= 30.inches\n        if water_closet.floor_mounted == true:\n        compartment.depth >= 60.inches\n        else:  # Wall hung\n        compartment.depth >= 56.inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.1\"\n    must:\n        clearance_to_side_obstruction >= 15.inches  # From center\n        if adjacent_fixture.exists == true:\n        center_to_center_distance >= 30.inches\n        clearance_to_front_obstruction >= 21.inches\n        if fixture.type == \"water_closet\" AND compartment.required == true:\n        compartment.width >= 30.inches\n        if water_closet.floor_mounted == true:\n        compartment.depth >= 60.inches\n        else:  # Wall hung\n        compartment.depth >= 56.inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.405.3.1\"", "rule_name": "water_closet_clearances"}
{"type": "safety_factor_reasoning", "input": "For water_closet_clearances rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.405.3.1.", "rule_name": "water_closet_clearances", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for urinal partition dimensions: When fixture.type == \"urinal\" and fixture.use IN [\"public\", \"employee\"], it is required that partition.width >= 30.inches and partition.start_height <= 12.inches  # From floor", "output": "rule urinal_partition_dimensions:\n    where:\n        fixture.type == \"urinal\"\n        fixture.use IN [\"public\", \"employee\"]\n        must:\n        partition.width >= 30.inches\n        partition.start_height <= 12.inches  # From floor\n        partition.end_height >= 60.inches    # Above floor\n        partition.projection >= max(\n        18.inches,  # From wall\n        urinal.front_lip + 6.inches\n        )\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.5\"\n    must:\n        partition.width >= 30.inches\n        partition.start_height <= 12.inches  # From floor\n        partition.end_height >= 60.inches    # Above floor\n        partition.projection >= max(\n        18.inches,  # From wall\n        urinal.front_lip + 6.inches\n        )\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.5\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.405.3.5\"", "rule_name": "urinal_partition_dimensions"}
{"type": "bcl_to_physics", "input": "rule urinal_partition_dimensions with constraints: width, start_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.405.3.5", "rule_name": "urinal_partition_dimensions"}
{"type": "bcl_completion", "input": "rule urinal_partition_dimensions:\n    where:\n        fixture.type == \"urinal\"\n    # Complete this rule", "output": "rule urinal_partition_dimensions:\n    where:\n        fixture.type == \"urinal\"\n        fixture.use IN [\"public\", \"employee\"]\n        must:\n        partition.width >= 30.inches\n        partition.start_height <= 12.inches  # From floor\n        partition.end_height >= 60.inches    # Above floor\n        partition.projection >= max(\n        18.inches,  # From wall\n        urinal.front_lip + 6.inches\n        )\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.5\"\n    must:\n        partition.width >= 30.inches\n        partition.start_height <= 12.inches  # From floor\n        partition.end_height >= 60.inches    # Above floor\n        partition.projection >= max(\n        18.inches,  # From wall\n        urinal.front_lip + 6.inches\n        )\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.405.3.5\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.405.3.5\"", "rule_name": "urinal_partition_dimensions"}
{"type": "safety_factor_reasoning", "input": "For urinal_partition_dimensions rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.405.3.5.", "rule_name": "urinal_partition_dimensions", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for floor flange thickness: When component.type == \"floor_flange\" and fixture.type == \"water_closet\", it is required that if material == \"copper_alloy\": and thickness >= 0.125.inches", "output": "rule floor_flange_thickness:\n    where:\n        component.type == \"floor_flange\"\n        fixture.type == \"water_closet\"\n        must:\n        if material == \"copper_alloy\":\n        thickness >= 0.125.inches\n        elif material == \"plastic\":\n        thickness >= 0.25.inches\n        elif material IN [\"cast_iron\", \"galvanized_malleable_iron\"]:\n        thickness >= 0.25.inches\n        caulking_depth >= 2.inches\n        elif material == \"hard_lead\":\n        weight >= 1.pound + 9.ounces\n        antimony_content >= 7.75.percent\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.405.4.1\"\n    must:\n        if material == \"copper_alloy\":\n        thickness >= 0.125.inches\n        elif material == \"plastic\":\n        thickness >= 0.25.inches\n        elif material IN [\"cast_iron\", \"galvanized_malleable_iron\"]:\n        thickness >= 0.25.inches\n        caulking_depth >= 2.inches\n        elif material == \"hard_lead\":\n        weight >= 1.pound + 9.ounces\n        antimony_content >= 7.75.percent\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.405.4.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.405.4.1\"", "rule_name": "floor_flange_thickness"}
{"type": "bcl_to_physics", "input": "rule floor_flange_thickness with constraints: thickness, thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.4.405.4.1", "rule_name": "floor_flange_thickness"}
{"type": "bcl_completion", "input": "rule floor_flange_thickness:\n    where:\n        component.type == \"floor_flange\"\n    # Complete this rule", "output": "rule floor_flange_thickness:\n    where:\n        component.type == \"floor_flange\"\n        fixture.type == \"water_closet\"\n        must:\n        if material == \"copper_alloy\":\n        thickness >= 0.125.inches\n        elif material == \"plastic\":\n        thickness >= 0.25.inches\n        elif material IN [\"cast_iron\", \"galvanized_malleable_iron\"]:\n        thickness >= 0.25.inches\n        caulking_depth >= 2.inches\n        elif material == \"hard_lead\":\n        weight >= 1.pound + 9.ounces\n        antimony_content >= 7.75.percent\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.405.4.1\"\n    must:\n        if material == \"copper_alloy\":\n        thickness >= 0.125.inches\n        elif material == \"plastic\":\n        thickness >= 0.25.inches\n        elif material IN [\"cast_iron\", \"galvanized_malleable_iron\"]:\n        thickness >= 0.25.inches\n        caulking_depth >= 2.inches\n        elif material == \"hard_lead\":\n        weight >= 1.pound + 9.ounces\n        antimony_content >= 7.75.percent\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.405.4.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.405.4.1\"", "rule_name": "floor_flange_thickness"}
{"type": "safety_factor_reasoning", "input": "For floor_flange_thickness rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.4.405.4.1.", "rule_name": "floor_flange_thickness", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for bathtub waste outlet: When fixture.type == \"bathtub\" and must:, it is required that waste_outlet.diameter >= 1.5.inches and waste_outlet.has_watertight_stopper == true", "output": "rule bathtub_waste_outlet:\n    where:\n        fixture.type == \"bathtub\"\n        must:\n        waste_outlet.diameter >= 1.5.inches\n        waste_outlet.has_watertight_stopper == true\n        if overflow.installed == true:\n        overflow.diameter >= 1.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.407.2\"\n    must:\n        waste_outlet.diameter >= 1.5.inches\n        waste_outlet.has_watertight_stopper == true\n        if overflow.installed == true:\n        overflow.diameter >= 1.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.407.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.407.2\"", "rule_name": "bathtub_waste_outlet"}
{"type": "bcl_to_physics", "input": "rule bathtub_waste_outlet with constraints: diameter, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.4.407.2", "rule_name": "bathtub_waste_outlet"}
{"type": "bcl_completion", "input": "rule bathtub_waste_outlet:\n    where:\n        fixture.type == \"bathtub\"\n    # Complete this rule", "output": "rule bathtub_waste_outlet:\n    where:\n        fixture.type == \"bathtub\"\n        must:\n        waste_outlet.diameter >= 1.5.inches\n        waste_outlet.has_watertight_stopper == true\n        if overflow.installed == true:\n        overflow.diameter >= 1.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.407.2\"\n    must:\n        waste_outlet.diameter >= 1.5.inches\n        waste_outlet.has_watertight_stopper == true\n        if overflow.installed == true:\n        overflow.diameter >= 1.5.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.407.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.407.2\"", "rule_name": "bathtub_waste_outlet"}
{"type": "safety_factor_reasoning", "input": "For bathtub_waste_outlet rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.407.2.", "rule_name": "bathtub_waste_outlet", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for bidet water temperature: When fixture.type == \"bidet\" and must:, it is required that discharge_temperature <= 110.fahrenheit  # 43\u00c2\u00b0C and temperature_limiting_device.conforms_to == \"ASSE_1070\"", "output": "rule bidet_water_temperature:\n    where:\n        fixture.type == \"bidet\"\n        must:\n        discharge_temperature <= 110.fahrenheit  # 43\u00c2\u00b0C\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.408.3\"\n    must:\n        discharge_temperature <= 110.fahrenheit  # 43\u00c2\u00b0C\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.408.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.408.3\"", "rule_name": "bidet_water_temperature"}
{"type": "bcl_to_physics", "input": "rule bidet_water_temperature with constraints: discharge_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.4.408.3", "rule_name": "bidet_water_temperature"}
{"type": "bcl_completion", "input": "rule bidet_water_temperature:\n    where:\n        fixture.type == \"bidet\"\n    # Complete this rule", "output": "rule bidet_water_temperature:\n    where:\n        fixture.type == \"bidet\"\n        must:\n        discharge_temperature <= 110.fahrenheit  # 43\u00c2\u00b0C\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.408.3\"\n    must:\n        discharge_temperature <= 110.fahrenheit  # 43\u00c2\u00b0C\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.408.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.408.3\"", "rule_name": "bidet_water_temperature"}
{"type": "safety_factor_reasoning", "input": "For bidet_water_temperature rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.408.3.", "rule_name": "bidet_water_temperature", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for drinking fountain height requirements: When drinking_fountains.required == true and quantity_required >= 2, it is required that low_fountain.for_wheelchair_users == true and high_fountain.for_standing_persons == true", "output": "rule drinking_fountain_height_requirements:\n    where:\n        drinking_fountains.required == true\n        quantity_required >= 2\n        must:\n        low_fountain.for_wheelchair_users == true\n        high_fountain.for_standing_persons == true\n        if single_fountain.has_two_spouts == true:\n        spout_1.complies_with_wheelchair_requirements == true\n        spout_2.complies_with_standing_requirements == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.4.410.3\"\n    must:\n        low_fountain.for_wheelchair_users == true\n        high_fountain.for_standing_persons == true\n        if single_fountain.has_two_spouts == true:\n        spout_1.complies_with_wheelchair_requirements == true\n        spout_2.complies_with_standing_requirements == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.4.410.3\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.4.410.3\"", "rule_name": "drinking_fountain_height_requirements"}
{"type": "bcl_to_physics", "input": "rule drinking_fountain_height_requirements with conditions: low_fountain.for_wheelchair_users == true, high_fountain.for_standing_persons == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Code.2024.4.410.3", "rule_name": "drinking_fountain_height_requirements"}
{"type": "bcl_completion", "input": "rule drinking_fountain_height_requirements:\n    where:\n        drinking_fountains.required == true\n    # Complete this rule", "output": "rule drinking_fountain_height_requirements:\n    where:\n        drinking_fountains.required == true\n        quantity_required >= 2\n        must:\n        low_fountain.for_wheelchair_users == true\n        high_fountain.for_standing_persons == true\n        if single_fountain.has_two_spouts == true:\n        spout_1.complies_with_wheelchair_requirements == true\n        spout_2.complies_with_standing_requirements == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.4.410.3\"\n    must:\n        low_fountain.for_wheelchair_users == true\n        high_fountain.for_standing_persons == true\n        if single_fountain.has_two_spouts == true:\n        spout_1.complies_with_wheelchair_requirements == true\n        spout_2.complies_with_standing_requirements == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.4.410.3\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.4.410.3\"", "rule_name": "drinking_fountain_height_requirements"}
{"type": "safety_factor_reasoning", "input": "For drinking_fountain_height_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.410.3.", "rule_name": "drinking_fountain_height_requirements", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for emergency fixture water temperature: When fixture.type IN [\"emergency_shower\", \"eyewash_station\"] and water_supply == \"hot_and_cold\", it is required that mixing_valve.type == \"temperature_actuated\" and mixing_valve.conforms_to == \"ASSE_1071\"", "output": "rule emergency_fixture_water_temperature:\n    where:\n        fixture.type IN [\"emergency_shower\", \"eyewash_station\"]\n        water_supply == \"hot_and_cold\"\n        must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1071\"\n        if supply.from_water_heater_only == true:\n        water_heater.conforms_to == \"ASSE_1085\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.411.3\"\n    must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1071\"\n        if supply.from_water_heater_only == true:\n        water_heater.conforms_to == \"ASSE_1085\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.411.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.411.3\"", "rule_name": "emergency_fixture_water_temperature"}
{"type": "bcl_to_physics", "input": "rule emergency_fixture_water_temperature with conditions: mixing_valve.type == \"temperature_actuated\", mixing_valve.conforms_to == \"ASSE_1071\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.4.411.3", "rule_name": "emergency_fixture_water_temperature"}
{"type": "bcl_completion", "input": "rule emergency_fixture_water_temperature:\n    where:\n        fixture.type IN [\"emergency_shower\", \"eyewash_station\"]\n    # Complete this rule", "output": "rule emergency_fixture_water_temperature:\n    where:\n        fixture.type IN [\"emergency_shower\", \"eyewash_station\"]\n        water_supply == \"hot_and_cold\"\n        must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1071\"\n        if supply.from_water_heater_only == true:\n        water_heater.conforms_to == \"ASSE_1085\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.411.3\"\n    must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1071\"\n        if supply.from_water_heater_only == true:\n        water_heater.conforms_to == \"ASSE_1085\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.411.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.411.3\"", "rule_name": "emergency_fixture_water_temperature"}
{"type": "safety_factor_reasoning", "input": "For emergency_fixture_water_temperature rule involving life safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.4.411.3.", "rule_name": "emergency_fixture_water_temperature", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for shower valve temperature limit: When valve.type IN [\"shower\", \"tub_shower_combination\"] and valve.individual == true, it is required that valve.type IN [\"balanced_pressure\", \"thermostatic\", \"combination\"] and valve.conforms_to == \"ASSE_1016\"", "output": "rule shower_valve_temperature_limit:\n    where:\n        valve.type IN [\"shower\", \"tub_shower_combination\"]\n        valve.individual == true\n        must:\n        valve.type IN [\"balanced_pressure\", \"thermostatic\", \"combination\"]\n        valve.conforms_to == \"ASSE_1016\"\n        valve.max_setting_limiter.installed == true\n        valve.max_temperature <= 120.fahrenheit\n        valve.flow_rating >= showerhead.flow_rate\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.3\"\n    must:\n        valve.type IN [\"balanced_pressure\", \"thermostatic\", \"combination\"]\n        valve.conforms_to == \"ASSE_1016\"\n        valve.max_setting_limiter.installed == true\n        valve.max_temperature <= 120.fahrenheit\n        valve.flow_rating >= showerhead.flow_rate\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.412.3\"", "rule_name": "shower_valve_temperature_limit"}
{"type": "bcl_to_physics", "input": "rule shower_valve_temperature_limit with constraints: max_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.4.412.3", "rule_name": "shower_valve_temperature_limit"}
{"type": "bcl_completion", "input": "rule shower_valve_temperature_limit:\n    where:\n        valve.type IN [\"shower\", \"tub_shower_combination\"]\n    # Complete this rule", "output": "rule shower_valve_temperature_limit:\n    where:\n        valve.type IN [\"shower\", \"tub_shower_combination\"]\n        valve.individual == true\n        must:\n        valve.type IN [\"balanced_pressure\", \"thermostatic\", \"combination\"]\n        valve.conforms_to == \"ASSE_1016\"\n        valve.max_setting_limiter.installed == true\n        valve.max_temperature <= 120.fahrenheit\n        valve.flow_rating >= showerhead.flow_rate\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.3\"\n    must:\n        valve.type IN [\"balanced_pressure\", \"thermostatic\", \"combination\"]\n        valve.conforms_to == \"ASSE_1016\"\n        valve.max_setting_limiter.installed == true\n        valve.max_temperature <= 120.fahrenheit\n        valve.flow_rating >= showerhead.flow_rate\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.412.3\"", "rule_name": "shower_valve_temperature_limit"}
{"type": "safety_factor_reasoning", "input": "For shower_valve_temperature_limit rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.412.3.", "rule_name": "shower_valve_temperature_limit", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for gang shower temperature control: When shower.type == \"gang_shower\" and supply.type == \"single_tempered_pipe\", it is required that mixing_valve.type == \"automatic_temperature_control\" and mixing_valve.conforms_to == \"ASSE_1069\"", "output": "rule gang_shower_temperature_control:\n    where:\n        shower.type == \"gang_shower\"\n        supply.type == \"single_tempered_pipe\"\n        must:\n        mixing_valve.type == \"automatic_temperature_control\"\n        mixing_valve.conforms_to == \"ASSE_1069\"\n        mixing_valve.max_temperature <= 120.fahrenheit\n        OR each_showerhead.individually_controlled == true\n        individual_valve.conforms_to == \"ASSE_1016\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.412.4\"\n    must:\n        mixing_valve.type == \"automatic_temperature_control\"\n        mixing_valve.conforms_to == \"ASSE_1069\"\n        mixing_valve.max_temperature <= 120.fahrenheit\n        OR each_showerhead.individually_controlled == true\n        individual_valve.conforms_to == \"ASSE_1016\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.412.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.412.4\"", "rule_name": "gang_shower_temperature_control"}
{"type": "bcl_to_physics", "input": "rule gang_shower_temperature_control with constraints: max_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.4.412.4", "rule_name": "gang_shower_temperature_control"}
{"type": "bcl_completion", "input": "rule gang_shower_temperature_control:\n    where:\n        shower.type == \"gang_shower\"\n    # Complete this rule", "output": "rule gang_shower_temperature_control:\n    where:\n        shower.type == \"gang_shower\"\n        supply.type == \"single_tempered_pipe\"\n        must:\n        mixing_valve.type == \"automatic_temperature_control\"\n        mixing_valve.conforms_to == \"ASSE_1069\"\n        mixing_valve.max_temperature <= 120.fahrenheit\n        OR each_showerhead.individually_controlled == true\n        individual_valve.conforms_to == \"ASSE_1016\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.412.4\"\n    must:\n        mixing_valve.type == \"automatic_temperature_control\"\n        mixing_valve.conforms_to == \"ASSE_1069\"\n        mixing_valve.max_temperature <= 120.fahrenheit\n        OR each_showerhead.individually_controlled == true\n        individual_valve.conforms_to == \"ASSE_1016\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.412.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.412.4\"", "rule_name": "gang_shower_temperature_control"}
{"type": "safety_factor_reasoning", "input": "For gang_shower_temperature_control rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.4.412.4.", "rule_name": "gang_shower_temperature_control", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for bathtub temperature limiting: When fixture.type IN [\"bathtub\", \"whirlpool_bathtub\"] and valve.type != \"combination_tub_shower\", it is required that temperature_limiting_device.installed == true and device.conforms_to == \"ASSE_1070\"", "output": "rule bathtub_temperature_limiting:\n    where:\n        fixture.type IN [\"bathtub\", \"whirlpool_bathtub\"]\n        valve.type != \"combination_tub_shower\"\n        must:\n        temperature_limiting_device.installed == true\n        device.conforms_to == \"ASSE_1070\"\n        device.max_setting <= 120.fahrenheit\n        OR water_heater.conforms_to IN [\"ASSE_1082\", \"ASSE_1084\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.5\"\n    must:\n        temperature_limiting_device.installed == true\n        device.conforms_to == \"ASSE_1070\"\n        device.max_setting <= 120.fahrenheit\n        OR water_heater.conforms_to IN [\"ASSE_1082\", \"ASSE_1084\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.412.5\"", "rule_name": "bathtub_temperature_limiting"}
{"type": "bcl_to_physics", "input": "rule bathtub_temperature_limiting with constraints: max_setting", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.4.412.5", "rule_name": "bathtub_temperature_limiting"}
{"type": "bcl_completion", "input": "rule bathtub_temperature_limiting:\n    where:\n        fixture.type IN [\"bathtub\", \"whirlpool_bathtub\"]\n    # Complete this rule", "output": "rule bathtub_temperature_limiting:\n    where:\n        fixture.type IN [\"bathtub\", \"whirlpool_bathtub\"]\n        valve.type != \"combination_tub_shower\"\n        must:\n        temperature_limiting_device.installed == true\n        device.conforms_to == \"ASSE_1070\"\n        device.max_setting <= 120.fahrenheit\n        OR water_heater.conforms_to IN [\"ASSE_1082\", \"ASSE_1084\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.5\"\n    must:\n        temperature_limiting_device.installed == true\n        device.conforms_to == \"ASSE_1070\"\n        device.max_setting <= 120.fahrenheit\n        OR water_heater.conforms_to IN [\"ASSE_1082\", \"ASSE_1084\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.412.5\"", "rule_name": "bathtub_temperature_limiting"}
{"type": "safety_factor_reasoning", "input": "For bathtub_temperature_limiting rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.412.5.", "rule_name": "bathtub_temperature_limiting", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for head shampoo sink temperature: When fixture.type == \"head_shampoo_sink\" and must:, it is required that hot_water_temperature <= 120.fahrenheit and faucet.has_integral_check_valves == true", "output": "rule head_shampoo_sink_temperature:\n    where:\n        fixture.type == \"head_shampoo_sink\"\n        must:\n        hot_water_temperature <= 120.fahrenheit\n        faucet.has_integral_check_valves == true\n        check_valves.prevent_crossover == true\n        limiting_method IN [\n        \"ASSE_1070_device\",\n        \"ASSE_1082_water_heater\",\n        \"ASSE_1062_flow_reduction\"\n        ]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.10\"\n    must:\n        hot_water_temperature <= 120.fahrenheit\n        faucet.has_integral_check_valves == true\n        check_valves.prevent_crossover == true\n        limiting_method IN [\n        \"ASSE_1070_device\",\n        \"ASSE_1082_water_heater\",\n        \"ASSE_1062_flow_reduction\"\n        ]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.10\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.412.10\"", "rule_name": "head_shampoo_sink_temperature"}
{"type": "bcl_to_physics", "input": "rule head_shampoo_sink_temperature with constraints: hot_water_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.4.412.10", "rule_name": "head_shampoo_sink_temperature"}
{"type": "bcl_completion", "input": "rule head_shampoo_sink_temperature:\n    where:\n        fixture.type == \"head_shampoo_sink\"\n    # Complete this rule", "output": "rule head_shampoo_sink_temperature:\n    where:\n        fixture.type == \"head_shampoo_sink\"\n        must:\n        hot_water_temperature <= 120.fahrenheit\n        faucet.has_integral_check_valves == true\n        check_valves.prevent_crossover == true\n        limiting_method IN [\n        \"ASSE_1070_device\",\n        \"ASSE_1082_water_heater\",\n        \"ASSE_1062_flow_reduction\"\n        ]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.10\"\n    must:\n        hot_water_temperature <= 120.fahrenheit\n        faucet.has_integral_check_valves == true\n        check_valves.prevent_crossover == true\n        limiting_method IN [\n        \"ASSE_1070_device\",\n        \"ASSE_1082_water_heater\",\n        \"ASSE_1062_flow_reduction\"\n        ]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.412.10\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.412.10\"", "rule_name": "head_shampoo_sink_temperature"}
{"type": "safety_factor_reasoning", "input": "For head_shampoo_sink_temperature rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.412.10.", "rule_name": "head_shampoo_sink_temperature", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for floor drain size: When drain.type == \"floor_drain\" and must:, it is required that outlet.diameter >= 2.inches and strainer.removable == true", "output": "rule floor_drain_size:\n    where:\n        drain.type == \"floor_drain\"\n        must:\n        outlet.diameter >= 2.inches\n        strainer.removable == true\n        access.provided == true\n        if location == \"public_laundry\" OR location == \"central_washing_facility\":\n        outlet.diameter >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.413.3\"\n    must:\n        outlet.diameter >= 2.inches\n        strainer.removable == true\n        access.provided == true\n        if location == \"public_laundry\" OR location == \"central_washing_facility\":\n        outlet.diameter >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.413.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.413.3\"", "rule_name": "floor_drain_size"}
{"type": "bcl_to_physics", "input": "rule floor_drain_size with constraints: diameter, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.413.3", "rule_name": "floor_drain_size"}
{"type": "bcl_completion", "input": "rule floor_drain_size:\n    where:\n        drain.type == \"floor_drain\"\n    # Complete this rule", "output": "rule floor_drain_size:\n    where:\n        drain.type == \"floor_drain\"\n        must:\n        outlet.diameter >= 2.inches\n        strainer.removable == true\n        access.provided == true\n        if location == \"public_laundry\" OR location == \"central_washing_facility\":\n        outlet.diameter >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.413.3\"\n    must:\n        outlet.diameter >= 2.inches\n        strainer.removable == true\n        access.provided == true\n        if location == \"public_laundry\" OR location == \"central_washing_facility\":\n        outlet.diameter >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.413.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.413.3\"", "rule_name": "floor_drain_size"}
{"type": "safety_factor_reasoning", "input": "For floor_drain_size rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.413.3.", "rule_name": "floor_drain_size", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for fill valve backflow prevention: When component.type == \"flush_tank_fill_valve\" and must:, it is required that fill_valve.type == \"antisiphon\" and fill_valve.conforms_to == \"ASSE_1002\"", "output": "rule fill_valve_backflow_prevention:\n    where:\n        component.type == \"flush_tank_fill_valve\"\n        must:\n        fill_valve.type == \"antisiphon\"\n        fill_valve.conforms_to == \"ASSE_1002\"\n        backflow_preventer.height >= overflow_pipe.full_opening + 1.inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.415.3.1\"\n    must:\n        fill_valve.type == \"antisiphon\"\n        fill_valve.conforms_to == \"ASSE_1002\"\n        backflow_preventer.height >= overflow_pipe.full_opening + 1.inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.415.3.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.415.3.1\"", "rule_name": "fill_valve_backflow_prevention"}
{"type": "bcl_to_physics", "input": "rule fill_valve_backflow_prevention with conditions: fill_valve.type == \"antisiphon\", fill_valve.conforms_to == \"ASSE_1002\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.4.415.3.1", "rule_name": "fill_valve_backflow_prevention"}
{"type": "bcl_completion", "input": "rule fill_valve_backflow_prevention:\n    where:\n        component.type == \"flush_tank_fill_valve\"\n    # Complete this rule", "output": "rule fill_valve_backflow_prevention:\n    where:\n        component.type == \"flush_tank_fill_valve\"\n        must:\n        fill_valve.type == \"antisiphon\"\n        fill_valve.conforms_to == \"ASSE_1002\"\n        backflow_preventer.height >= overflow_pipe.full_opening + 1.inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.415.3.1\"\n    must:\n        fill_valve.type == \"antisiphon\"\n        fill_valve.conforms_to == \"ASSE_1002\"\n        backflow_preventer.height >= overflow_pipe.full_opening + 1.inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.415.3.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.415.3.1\"", "rule_name": "fill_valve_backflow_prevention"}
{"type": "safety_factor_reasoning", "input": "For fill_valve_backflow_prevention rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.4.415.3.1.", "rule_name": "fill_valve_backflow_prevention", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for flush tank overflow: When fixture.type == \"flush_tank\" and must:, it is required that overflow.installed == true and overflow.discharges_to IN [\"water_closet\", \"urinal\"]", "output": "rule flush_tank_overflow:\n    where:\n        fixture.type == \"flush_tank\"\n        must:\n        overflow.installed == true\n        overflow.discharges_to IN [\"water_closet\", \"urinal\"]\n        overflow.capacity >= max_supply_rate\n        overflow_opening.above_flood_level_rim == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.415.3.2\"\n    must:\n        overflow.installed == true\n        overflow.discharges_to IN [\"water_closet\", \"urinal\"]\n        overflow.capacity >= max_supply_rate\n        overflow_opening.above_flood_level_rim == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.415.3.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.415.3.2\"", "rule_name": "flush_tank_overflow"}
{"type": "bcl_to_physics", "input": "rule flush_tank_overflow with conditions: overflow.installed == true, overflow.discharges_to IN [\"water_closet\", \"urinal\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.4.415.3.2", "rule_name": "flush_tank_overflow"}
{"type": "bcl_completion", "input": "rule flush_tank_overflow:\n    where:\n        fixture.type == \"flush_tank\"\n    # Complete this rule", "output": "rule flush_tank_overflow:\n    where:\n        fixture.type == \"flush_tank\"\n        must:\n        overflow.installed == true\n        overflow.discharges_to IN [\"water_closet\", \"urinal\"]\n        overflow.capacity >= max_supply_rate\n        overflow_opening.above_flood_level_rim == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.415.3.2\"\n    must:\n        overflow.installed == true\n        overflow.discharges_to IN [\"water_closet\", \"urinal\"]\n        overflow.capacity >= max_supply_rate\n        overflow_opening.above_flood_level_rim == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.415.3.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.415.3.2\"", "rule_name": "flush_tank_overflow"}
{"type": "safety_factor_reasoning", "input": "For flush_tank_overflow rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.415.3.2.", "rule_name": "flush_tank_overflow", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for food waste disposer drain size: When appliance.type == \"food_waste_disposer\" and must:, it is required that if disposer.type == \"domestic\": and drain.diameter >= 1.5.inches", "output": "rule food_waste_disposer_drain_size:\n    where:\n        appliance.type == \"food_waste_disposer\"\n        must:\n        if disposer.type == \"domestic\":\n        drain.diameter >= 1.5.inches\n        elif disposer.type == \"commercial\":\n        drain.diameter >= 1.5.inches\n        connection.trapped_separately == true\n        connection.separate_from_other_fixtures == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.416.2\"\n    must:\n        if disposer.type == \"domestic\":\n        drain.diameter >= 1.5.inches\n        elif disposer.type == \"commercial\":\n        drain.diameter >= 1.5.inches\n        connection.trapped_separately == true\n        connection.separate_from_other_fixtures == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.416.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.416.2\"", "rule_name": "food_waste_disposer_drain_size"}
{"type": "bcl_to_physics", "input": "rule food_waste_disposer_drain_size with constraints: diameter, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.416.2", "rule_name": "food_waste_disposer_drain_size"}
{"type": "bcl_completion", "input": "rule food_waste_disposer_drain_size:\n    where:\n        appliance.type == \"food_waste_disposer\"\n    # Complete this rule", "output": "rule food_waste_disposer_drain_size:\n    where:\n        appliance.type == \"food_waste_disposer\"\n        must:\n        if disposer.type == \"domestic\":\n        drain.diameter >= 1.5.inches\n        elif disposer.type == \"commercial\":\n        drain.diameter >= 1.5.inches\n        connection.trapped_separately == true\n        connection.separate_from_other_fixtures == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.416.2\"\n    must:\n        if disposer.type == \"domestic\":\n        drain.diameter >= 1.5.inches\n        elif disposer.type == \"commercial\":\n        drain.diameter >= 1.5.inches\n        connection.trapped_separately == true\n        connection.separate_from_other_fixtures == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.416.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.416.2\"", "rule_name": "food_waste_disposer_drain_size"}
{"type": "safety_factor_reasoning", "input": "For food_waste_disposer_drain_size rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.416.2.", "rule_name": "food_waste_disposer_drain_size", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for lavatory waste outlet: When fixture.type IN [\"lavatory\", \"laundry_tray\"] and must:, it is required that if fixture.type == \"lavatory\": and waste_outlet.diameter >= 1.25.inches", "output": "rule lavatory_waste_outlet:\n    where:\n        fixture.type IN [\"lavatory\", \"laundry_tray\"]\n        must:\n        if fixture.type == \"lavatory\":\n        waste_outlet.diameter >= 1.25.inches\n        else:  # Laundry tray\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_restrictor.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.419.3\"\n    must:\n        if fixture.type == \"lavatory\":\n        waste_outlet.diameter >= 1.25.inches\n        else:  # Laundry tray\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_restrictor.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.419.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.419.3\"", "rule_name": "lavatory_waste_outlet"}
{"type": "bcl_to_physics", "input": "rule lavatory_waste_outlet with constraints: diameter, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.419.3", "rule_name": "lavatory_waste_outlet"}
{"type": "bcl_completion", "input": "rule lavatory_waste_outlet:\n    where:\n        fixture.type IN [\"lavatory\", \"laundry_tray\"]\n    # Complete this rule", "output": "rule lavatory_waste_outlet:\n    where:\n        fixture.type IN [\"lavatory\", \"laundry_tray\"]\n        must:\n        if fixture.type == \"lavatory\":\n        waste_outlet.diameter >= 1.25.inches\n        else:  # Laundry tray\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_restrictor.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.419.3\"\n    must:\n        if fixture.type == \"lavatory\":\n        waste_outlet.diameter >= 1.25.inches\n        else:  # Laundry tray\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_restrictor.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.419.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.419.3\"", "rule_name": "lavatory_waste_outlet"}
{"type": "safety_factor_reasoning", "input": "For lavatory_waste_outlet rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.419.3.", "rule_name": "lavatory_waste_outlet", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for shower compartment dimensions: When fixture.type == \"shower_compartment\" and must:, it is required that interior_area >= 900.square_inches and minimum_dimension >= 30.inches", "output": "rule shower_compartment_dimensions:\n    where:\n        fixture.type == \"shower_compartment\"\n        must:\n        interior_area >= 900.square_inches\n        minimum_dimension >= 30.inches\n        measurement.from == \"finished_interior\"\n        measurement.at_height == \"top_of_threshold\"\n        clearance.height >= 70.inches\n        if minimum_dimension >= 25.inches:\n        interior_area >= 1300.square_inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4\"\n    must:\n        interior_area >= 900.square_inches\n        minimum_dimension >= 30.inches\n        measurement.from == \"finished_interior\"\n        measurement.at_height == \"top_of_threshold\"\n        clearance.height >= 70.inches\n        if minimum_dimension >= 25.inches:\n        interior_area >= 1300.square_inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.421.4\"", "rule_name": "shower_compartment_dimensions"}
{"type": "bcl_to_physics", "input": "rule shower_compartment_dimensions with constraints: interior_area, minimum_dimension", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.421.4", "rule_name": "shower_compartment_dimensions"}
{"type": "bcl_completion", "input": "rule shower_compartment_dimensions:\n    where:\n        fixture.type == \"shower_compartment\"\n    # Complete this rule", "output": "rule shower_compartment_dimensions:\n    where:\n        fixture.type == \"shower_compartment\"\n        must:\n        interior_area >= 900.square_inches\n        minimum_dimension >= 30.inches\n        measurement.from == \"finished_interior\"\n        measurement.at_height == \"top_of_threshold\"\n        clearance.height >= 70.inches\n        if minimum_dimension >= 25.inches:\n        interior_area >= 1300.square_inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4\"\n    must:\n        interior_area >= 900.square_inches\n        minimum_dimension >= 30.inches\n        measurement.from == \"finished_interior\"\n        measurement.at_height == \"top_of_threshold\"\n        clearance.height >= 70.inches\n        if minimum_dimension >= 25.inches:\n        interior_area >= 1300.square_inches\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.421.4\"", "rule_name": "shower_compartment_dimensions"}
{"type": "safety_factor_reasoning", "input": "For shower_compartment_dimensions rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.421.4.", "rule_name": "shower_compartment_dimensions", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for shower wall waterproofing: When location IN [\"shower_compartment\", \"tub_with_shower\"] and must:, it is required that wall_material.smooth == true and wall_material.corrosion_resistant == true", "output": "rule shower_wall_waterproofing:\n    where:\n        location IN [\"shower_compartment\", \"tub_with_shower\"]\n        must:\n        wall_material.smooth == true\n        wall_material.corrosion_resistant == true\n        wall_material.nonabsorbent == true\n        wall_material.waterproof == true\n        wall_height >= 6.feet  # Above room floor\n        wall_height >= 70.inches  # Above drain\n        joints.watertight == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.4.1\"\n    must:\n        wall_material.smooth == true\n        wall_material.corrosion_resistant == true\n        wall_material.nonabsorbent == true\n        wall_material.waterproof == true\n        wall_height >= 6.feet  # Above room floor\n        wall_height >= 70.inches  # Above drain\n        joints.watertight == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.4.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.421.4.1\"", "rule_name": "shower_wall_waterproofing"}
{"type": "bcl_to_physics", "input": "rule shower_wall_waterproofing with constraints: wall_height, wall_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.421.4.1", "rule_name": "shower_wall_waterproofing"}
{"type": "bcl_completion", "input": "rule shower_wall_waterproofing:\n    where:\n        location IN [\"shower_compartment\", \"tub_with_shower\"]\n    # Complete this rule", "output": "rule shower_wall_waterproofing:\n    where:\n        location IN [\"shower_compartment\", \"tub_with_shower\"]\n        must:\n        wall_material.smooth == true\n        wall_material.corrosion_resistant == true\n        wall_material.nonabsorbent == true\n        wall_material.waterproof == true\n        wall_height >= 6.feet  # Above room floor\n        wall_height >= 70.inches  # Above drain\n        joints.watertight == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.4.1\"\n    must:\n        wall_material.smooth == true\n        wall_material.corrosion_resistant == true\n        wall_material.nonabsorbent == true\n        wall_material.waterproof == true\n        wall_height >= 6.feet  # Above room floor\n        wall_height >= 70.inches  # Above drain\n        joints.watertight == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.4.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.421.4.1\"", "rule_name": "shower_wall_waterproofing"}
{"type": "safety_factor_reasoning", "input": "For shower_wall_waterproofing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.421.4.1.", "rule_name": "shower_wall_waterproofing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for shower access opening: When fixture.type == \"shower_compartment\" and must:, it is required that access_opening.clear_width >= 22.inches and access_opening.unobstructed == true", "output": "rule shower_access_opening:\n    where:\n        fixture.type == \"shower_compartment\"\n        must:\n        access_opening.clear_width >= 22.inches\n        access_opening.unobstructed == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4.2\"\n    must:\n        access_opening.clear_width >= 22.inches\n        access_opening.unobstructed == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.421.4.2\"", "rule_name": "shower_access_opening"}
{"type": "bcl_to_physics", "input": "rule shower_access_opening with constraints: clear_width", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.4.421.4.2", "rule_name": "shower_access_opening"}
{"type": "bcl_completion", "input": "rule shower_access_opening:\n    where:\n        fixture.type == \"shower_compartment\"\n    # Complete this rule", "output": "rule shower_access_opening:\n    where:\n        fixture.type == \"shower_compartment\"\n        must:\n        access_opening.clear_width >= 22.inches\n        access_opening.unobstructed == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4.2\"\n    must:\n        access_opening.clear_width >= 22.inches\n        access_opening.unobstructed == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.421.4.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.421.4.2\"", "rule_name": "shower_access_opening"}
{"type": "safety_factor_reasoning", "input": "For shower_access_opening rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.421.4.2.", "rule_name": "shower_access_opening", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for shower floor slope: When fixture.type == \"shower\" and floor.requires_lining == true, it is required that floor.slope >= 0.25.inches_per_foot  # 2% slope and floor.slopes_toward_drain == true", "output": "rule shower_floor_slope:\n    where:\n        fixture.type == \"shower\"\n        floor.requires_lining == true\n        must:\n        floor.slope >= 0.25.inches_per_foot  # 2% slope\n        floor.slopes_toward_drain == true\n        liner.turn_up_height >= 2.inches\n        liner.above_threshold == true\n        liner.no_penetrations_below(threshold + 1.inch)\n        liner.tested_per_section_312_9 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.5.2\"\n    must:\n        floor.slope >= 0.25.inches_per_foot  # 2% slope\n        floor.slopes_toward_drain == true\n        liner.turn_up_height >= 2.inches\n        liner.above_threshold == true\n        liner.no_penetrations_below(threshold + 1.inch)\n        liner.tested_per_section_312_9 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.5.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.421.5.2\"", "rule_name": "shower_floor_slope"}
{"type": "bcl_to_physics", "input": "rule shower_floor_slope with constraints: slope, turn_up_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.421.5.2", "rule_name": "shower_floor_slope"}
{"type": "bcl_completion", "input": "rule shower_floor_slope:\n    where:\n        fixture.type == \"shower\"\n    # Complete this rule", "output": "rule shower_floor_slope:\n    where:\n        fixture.type == \"shower\"\n        floor.requires_lining == true\n        must:\n        floor.slope >= 0.25.inches_per_foot  # 2% slope\n        floor.slopes_toward_drain == true\n        liner.turn_up_height >= 2.inches\n        liner.above_threshold == true\n        liner.no_penetrations_below(threshold + 1.inch)\n        liner.tested_per_section_312_9 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.5.2\"\n    must:\n        floor.slope >= 0.25.inches_per_foot  # 2% slope\n        floor.slopes_toward_drain == true\n        liner.turn_up_height >= 2.inches\n        liner.above_threshold == true\n        liner.no_penetrations_below(threshold + 1.inch)\n        liner.tested_per_section_312_9 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.421.5.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.421.5.2\"", "rule_name": "shower_floor_slope"}
{"type": "safety_factor_reasoning", "input": "For shower_floor_slope rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.421.5.2.", "rule_name": "shower_floor_slope", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for shower liner materials: When shower.liner_material != \"prefabricated_receptor\" and must:, it is required that material IN [ and \"PVC_sheet\",      # ASTM D4551", "output": "rule shower_liner_materials:\n    where:\n        shower.liner_material != \"prefabricated_receptor\"\n        must:\n        material IN [\n        \"PVC_sheet\",      # ASTM D4551\n        \"CPE_sheet\",      # ASTM D4068\n        \"sheet_lead\",     # 4 lb/sqft minimum\n        \"sheet_copper\",   # 12 oz/sqft minimum\n        \"sheet_applied_membrane\",  # ANSI A118.10\n        \"liquid_applied_material\"  # ANSI A118.10\n        ]\n        if material == \"sheet_lead\":\n        weight >= 4.pounds_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        elif material == \"sheet_copper\":\n        weight >= 12.ounces_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.421.5.2.1\"\n    must:\n        material IN [\n        \"PVC_sheet\",      # ASTM D4551\n        \"CPE_sheet\",      # ASTM D4068\n        \"sheet_lead\",     # 4 lb/sqft minimum\n        \"sheet_copper\",   # 12 oz/sqft minimum\n        \"sheet_applied_membrane\",  # ANSI A118.10\n        \"liquid_applied_material\"  # ANSI A118.10\n        ]\n        if material == \"sheet_lead\":\n        weight >= 4.pounds_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        elif material == \"sheet_copper\":\n        weight >= 12.ounces_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.421.5.2.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.421.5.2.1\"", "rule_name": "shower_liner_materials"}
{"type": "bcl_to_physics", "input": "rule shower_liner_materials with constraints: weight, weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.4.421.5.2.1", "rule_name": "shower_liner_materials"}
{"type": "bcl_completion", "input": "rule shower_liner_materials:\n    where:\n        shower.liner_material != \"prefabricated_receptor\"\n    # Complete this rule", "output": "rule shower_liner_materials:\n    where:\n        shower.liner_material != \"prefabricated_receptor\"\n        must:\n        material IN [\n        \"PVC_sheet\",      # ASTM D4551\n        \"CPE_sheet\",      # ASTM D4068\n        \"sheet_lead\",     # 4 lb/sqft minimum\n        \"sheet_copper\",   # 12 oz/sqft minimum\n        \"sheet_applied_membrane\",  # ANSI A118.10\n        \"liquid_applied_material\"  # ANSI A118.10\n        ]\n        if material == \"sheet_lead\":\n        weight >= 4.pounds_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        elif material == \"sheet_copper\":\n        weight >= 12.ounces_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.421.5.2.1\"\n    must:\n        material IN [\n        \"PVC_sheet\",      # ASTM D4551\n        \"CPE_sheet\",      # ASTM D4068\n        \"sheet_lead\",     # 4 lb/sqft minimum\n        \"sheet_copper\",   # 12 oz/sqft minimum\n        \"sheet_applied_membrane\",  # ANSI A118.10\n        \"liquid_applied_material\"  # ANSI A118.10\n        ]\n        if material == \"sheet_lead\":\n        weight >= 4.pounds_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        elif material == \"sheet_copper\":\n        weight >= 12.ounces_per_sqft\n        insulation == \"15_pound_asphalt_felt\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.4.421.5.2.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.4.421.5.2.1\"", "rule_name": "shower_liner_materials"}
{"type": "safety_factor_reasoning", "input": "For shower_liner_materials rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.4.421.5.2.1.", "rule_name": "shower_liner_materials", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for sink waste outlet: When fixture.type == \"sink\" and must:, it is required that waste_outlet.diameter >= 1.5.inches and strainer_or_crossbar.installed == true", "output": "rule sink_waste_outlet:\n    where:\n        fixture.type == \"sink\"\n        must:\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_crossbar.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.422.2\"\n    must:\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_crossbar.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.422.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.422.2\"", "rule_name": "sink_waste_outlet"}
{"type": "bcl_to_physics", "input": "rule sink_waste_outlet with constraints: diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.422.2", "rule_name": "sink_waste_outlet"}
{"type": "bcl_completion", "input": "rule sink_waste_outlet:\n    where:\n        fixture.type == \"sink\"\n    # Complete this rule", "output": "rule sink_waste_outlet:\n    where:\n        fixture.type == \"sink\"\n        must:\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_crossbar.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.422.2\"\n    must:\n        waste_outlet.diameter >= 1.5.inches\n        strainer_or_crossbar.installed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.422.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.422.2\"", "rule_name": "sink_waste_outlet"}
{"type": "safety_factor_reasoning", "input": "For sink_waste_outlet rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.422.2.", "rule_name": "sink_waste_outlet", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for specialty fixture temperature: When fixture.type IN [\"footbath\", \"pedicure_bath\"] and must:, it is required that water_temperature <= 120.fahrenheit and temperature_limiting_device.conforms_to == \"ASSE_1070\"", "output": "rule specialty_fixture_temperature:\n    where:\n        fixture.type IN [\"footbath\", \"pedicure_bath\"]\n        must:\n        water_temperature <= 120.fahrenheit\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        OR water_heater.conforms_to == \"ASSE_1082\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.423.3\"\n    must:\n        water_temperature <= 120.fahrenheit\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        OR water_heater.conforms_to == \"ASSE_1082\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.423.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.423.3\"", "rule_name": "specialty_fixture_temperature"}
{"type": "bcl_to_physics", "input": "rule specialty_fixture_temperature with constraints: water_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.4.423.3", "rule_name": "specialty_fixture_temperature"}
{"type": "bcl_completion", "input": "rule specialty_fixture_temperature:\n    where:\n        fixture.type IN [\"footbath\", \"pedicure_bath\"]\n    # Complete this rule", "output": "rule specialty_fixture_temperature:\n    where:\n        fixture.type IN [\"footbath\", \"pedicure_bath\"]\n        must:\n        water_temperature <= 120.fahrenheit\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        OR water_heater.conforms_to == \"ASSE_1082\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.423.3\"\n    must:\n        water_temperature <= 120.fahrenheit\n        temperature_limiting_device.conforms_to == \"ASSE_1070\"\n        OR water_heater.conforms_to == \"ASSE_1082\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.423.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.423.3\"", "rule_name": "specialty_fixture_temperature"}
{"type": "safety_factor_reasoning", "input": "For specialty_fixture_temperature rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.423.3.", "rule_name": "specialty_fixture_temperature", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for water closet connection: When fixture.type == \"water_closet\" and must:, it is required that closet_bend.size IN [\"4x3_inches\", \"4_inches\"] and if closet_bend.size == \"3_inches\":", "output": "rule water_closet_connection:\n    where:\n        fixture.type == \"water_closet\"\n        must:\n        closet_bend.size IN [\"4x3_inches\", \"4_inches\"]\n        if closet_bend.size == \"3_inches\":\n        flange.size == \"4x3_inches\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.425.4\"\n    must:\n        closet_bend.size IN [\"4x3_inches\", \"4_inches\"]\n        if closet_bend.size == \"3_inches\":\n        flange.size == \"4x3_inches\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.425.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.425.4\"", "rule_name": "water_closet_connection"}
{"type": "bcl_to_physics", "input": "rule water_closet_connection with conditions: closet_bend.size IN [\"4x3_inches\", \"4_inches\"], if closet_bend.size == \"3_inches\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.425.4", "rule_name": "water_closet_connection"}
{"type": "bcl_completion", "input": "rule water_closet_connection:\n    where:\n        fixture.type == \"water_closet\"\n    # Complete this rule", "output": "rule water_closet_connection:\n    where:\n        fixture.type == \"water_closet\"\n        must:\n        closet_bend.size IN [\"4x3_inches\", \"4_inches\"]\n        if closet_bend.size == \"3_inches\":\n        flange.size == \"4x3_inches\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.425.4\"\n    must:\n        closet_bend.size IN [\"4x3_inches\", \"4_inches\"]\n        if closet_bend.size == \"3_inches\":\n        flange.size == \"4x3_inches\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.425.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.425.4\"", "rule_name": "water_closet_connection"}
{"type": "safety_factor_reasoning", "input": "For water_closet_connection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.425.4.", "rule_name": "water_closet_connection", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for whirlpool pump location: When fixture.type == \"whirlpool_bathtub\" and must:, it is required that pump.location > trap.weir_height and pump_drain.sloped_to_drain == true", "output": "rule whirlpool_pump_location:\n    where:\n        fixture.type == \"whirlpool_bathtub\"\n        must:\n        pump.location > trap.weir_height\n        pump_drain.sloped_to_drain == true\n        circulation_piping.sloped_to_drain == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.426.2\"\n    must:\n        pump.location > trap.weir_height\n        pump_drain.sloped_to_drain == true\n        circulation_piping.sloped_to_drain == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.426.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.426.2\"", "rule_name": "whirlpool_pump_location"}
{"type": "bcl_to_physics", "input": "rule whirlpool_pump_location with conditions: pump.location > trap.weir_height, pump_drain.sloped_to_drain == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.4.426.2", "rule_name": "whirlpool_pump_location"}
{"type": "bcl_completion", "input": "rule whirlpool_pump_location:\n    where:\n        fixture.type == \"whirlpool_bathtub\"\n    # Complete this rule", "output": "rule whirlpool_pump_location:\n    where:\n        fixture.type == \"whirlpool_bathtub\"\n        must:\n        pump.location > trap.weir_height\n        pump_drain.sloped_to_drain == true\n        circulation_piping.sloped_to_drain == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.426.2\"\n    must:\n        pump.location > trap.weir_height\n        pump_drain.sloped_to_drain == true\n        circulation_piping.sloped_to_drain == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.4.426.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.4.426.2\"", "rule_name": "whirlpool_pump_location"}
{"type": "safety_factor_reasoning", "input": "For whirlpool_pump_location rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.426.2.", "rule_name": "whirlpool_pump_location", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for whirlpool pump access: When fixture.type == \"whirlpool_bathtub\" and pump.requires_access == true, it is required that if distance_to_pump <= 2.feet: and access_opening.size >= 12.inches \u00c3\u2014 12.inches", "output": "rule whirlpool_pump_access:\n    where:\n        fixture.type == \"whirlpool_bathtub\"\n        pump.requires_access == true\n        must:\n        if distance_to_pump <= 2.feet:\n        access_opening.size >= 12.inches \u00c3\u2014 12.inches\n        else:\n        access_opening.size >= 18.inches \u00c3\u2014 18.inches\n        access_opening.unobstructed == true\n        access_opening.permits_pump_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.426.5\"\n        constraint shower_scald_prevention:\n        where:\n        fixture.supplies_hot_water == true\n        fixture.for_human_contact == true\n        must:\n        response_time = thermal.heat_transfer_time(\n        water_volume_in_valve,\n        temperature_change,\n        flow_rate\n        )\n        response_time <= 2.seconds\n        max_temp_during_cold_failure <= 120.fahrenheit + 5.fahrenheit\n        safety_factor: 1.3\n        constraint floor_drain_capacity:\n        where:\n        drain.type == \"floor_drain\"\n        must:\n        drain_capacity = flow.volume_flow_rate(\n        drain.area,\n        sqrt(2 * gravity * water_depth)\n        )\n        drain_capacity >= expected_flow_rate * 1.5\n        safety_factor: 1.5\n        constraint fixture_accessibility:\n        where:\n        fixture.requires_human_access == true\n        must:\n        clearance.width >= human.shoulder_width + 6.inches\n        clearance.depth >= human.reach_distance\n        turning_radius >= human.wheelchair_turning_diameter / 2\n        safety_factor: 1.2\n        constraint overflow_prevention:\n        where:\n        tank.has_overflow == true\n        must:\n        overflow_flow = flow.volume_flow_rate(\n        overflow.area,\n        sqrt(2 * gravity * head_difference)\n        )\n        overflow_flow > maximum_supply_rate * 1.25\n        safety_factor: 1.25\n        constraint shower_floor_drainage:\n        where:\n        shower.has_sloped_floor == true\n        must:\n        drainage_time = shower_volume / drain_flow_rate\n        drainage_time < 60.seconds\n        floor_slope > minimum_slope_for_drainage(surface_texture)\n        safety_factor: 1.2\n        constraint whirlpool_pump_cavitation_prevention:\n        where:\n        fixture.type == \"whirlpool_bathtub\"\n        must:\n        NPSH_available = (atmospheric_pressure + static_head - vapor_pressure) / fluid_density\n        NPSH_available > NPSH_required * 1.2\n        pump_elevation > trap_weir_elevation + safety_margin\n    must:\n        if distance_to_pump <= 2.feet:\n        access_opening.size >= 12.inches \u00c3\u2014 12.inches\n        else:\n        access_opening.size >= 18.inches \u00c3\u2014 18.inches\n        access_opening.unobstructed == true\n        access_opening.permits_pump_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.426.5\"\n        constraint shower_scald_prevention:\n        where:\n        fixture.supplies_hot_water == true\n        fixture.for_human_contact == true\n        must:\n        response_time = thermal.heat_transfer_time(\n        water_volume_in_valve,\n        temperature_change,\n        flow_rate\n        )\n        response_time <= 2.seconds\n        max_temp_during_cold_failure <= 120.fahrenheit + 5.fahrenheit\n        safety_factor: 1.3\n        constraint floor_drain_capacity:\n        where:\n        drain.type == \"floor_drain\"\n        must:\n        drain_capacity = flow.volume_flow_rate(\n        drain.area,\n        sqrt(2 * gravity * water_depth)\n        )\n        drain_capacity >= expected_flow_rate * 1.5\n        safety_factor: 1.5\n        constraint fixture_accessibility:\n        where:\n        fixture.requires_human_access == true\n        must:\n        clearance.width >= human.shoulder_width + 6.inches\n        clearance.depth >= human.reach_distance\n        turning_radius >= human.wheelchair_turning_diameter / 2\n        safety_factor: 1.2\n        constraint overflow_prevention:\n        where:\n        tank.has_overflow == true\n        must:\n        overflow_flow = flow.volume_flow_rate(\n        overflow.area,\n        sqrt(2 * gravity * head_difference)\n        )\n        overflow_flow > maximum_supply_rate * 1.25\n        safety_factor: 1.25\n        constraint shower_floor_drainage:\n        where:\n        shower.has_sloped_floor == true\n        must:\n        drainage_time = shower_volume / drain_flow_rate\n        drainage_time < 60.seconds\n        floor_slope > minimum_slope_for_drainage(surface_texture)\n        safety_factor: 1.2\n        constraint whirlpool_pump_cavitation_prevention:\n        where:\n        fixture.type == \"whirlpool_bathtub\"\n        must:\n        NPSH_available = (atmospheric_pressure + static_head - vapor_pressure) / fluid_density\n        NPSH_available > NPSH_required * 1.2\n        pump_elevation > trap_weir_elevation + safety_margin\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.426.5\"", "rule_name": "whirlpool_pump_access"}
{"type": "bcl_to_physics", "input": "rule whirlpool_pump_access with constraints: distance_to_pump, size", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.4.426.5", "rule_name": "whirlpool_pump_access"}
{"type": "bcl_completion", "input": "rule whirlpool_pump_access:\n    where:\n        fixture.type == \"whirlpool_bathtub\"\n    # Complete this rule", "output": "rule whirlpool_pump_access:\n    where:\n        fixture.type == \"whirlpool_bathtub\"\n        pump.requires_access == true\n        must:\n        if distance_to_pump <= 2.feet:\n        access_opening.size >= 12.inches \u00c3\u2014 12.inches\n        else:\n        access_opening.size >= 18.inches \u00c3\u2014 18.inches\n        access_opening.unobstructed == true\n        access_opening.permits_pump_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.426.5\"\n        constraint shower_scald_prevention:\n        where:\n        fixture.supplies_hot_water == true\n        fixture.for_human_contact == true\n        must:\n        response_time = thermal.heat_transfer_time(\n        water_volume_in_valve,\n        temperature_change,\n        flow_rate\n        )\n        response_time <= 2.seconds\n        max_temp_during_cold_failure <= 120.fahrenheit + 5.fahrenheit\n        safety_factor: 1.3\n        constraint floor_drain_capacity:\n        where:\n        drain.type == \"floor_drain\"\n        must:\n        drain_capacity = flow.volume_flow_rate(\n        drain.area,\n        sqrt(2 * gravity * water_depth)\n        )\n        drain_capacity >= expected_flow_rate * 1.5\n        safety_factor: 1.5\n        constraint fixture_accessibility:\n        where:\n        fixture.requires_human_access == true\n        must:\n        clearance.width >= human.shoulder_width + 6.inches\n        clearance.depth >= human.reach_distance\n        turning_radius >= human.wheelchair_turning_diameter / 2\n        safety_factor: 1.2\n        constraint overflow_prevention:\n        where:\n        tank.has_overflow == true\n        must:\n        overflow_flow = flow.volume_flow_rate(\n        overflow.area,\n        sqrt(2 * gravity * head_difference)\n        )\n        overflow_flow > maximum_supply_rate * 1.25\n        safety_factor: 1.25\n        constraint shower_floor_drainage:\n        where:\n        shower.has_sloped_floor == true\n        must:\n        drainage_time = shower_volume / drain_flow_rate\n        drainage_time < 60.seconds\n        floor_slope > minimum_slope_for_drainage(surface_texture)\n        safety_factor: 1.2\n        constraint whirlpool_pump_cavitation_prevention:\n        where:\n        fixture.type == \"whirlpool_bathtub\"\n        must:\n        NPSH_available = (atmospheric_pressure + static_head - vapor_pressure) / fluid_density\n        NPSH_available > NPSH_required * 1.2\n        pump_elevation > trap_weir_elevation + safety_margin\n    must:\n        if distance_to_pump <= 2.feet:\n        access_opening.size >= 12.inches \u00c3\u2014 12.inches\n        else:\n        access_opening.size >= 18.inches \u00c3\u2014 18.inches\n        access_opening.unobstructed == true\n        access_opening.permits_pump_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.4.426.5\"\n        constraint shower_scald_prevention:\n        where:\n        fixture.supplies_hot_water == true\n        fixture.for_human_contact == true\n        must:\n        response_time = thermal.heat_transfer_time(\n        water_volume_in_valve,\n        temperature_change,\n        flow_rate\n        )\n        response_time <= 2.seconds\n        max_temp_during_cold_failure <= 120.fahrenheit + 5.fahrenheit\n        safety_factor: 1.3\n        constraint floor_drain_capacity:\n        where:\n        drain.type == \"floor_drain\"\n        must:\n        drain_capacity = flow.volume_flow_rate(\n        drain.area,\n        sqrt(2 * gravity * water_depth)\n        )\n        drain_capacity >= expected_flow_rate * 1.5\n        safety_factor: 1.5\n        constraint fixture_accessibility:\n        where:\n        fixture.requires_human_access == true\n        must:\n        clearance.width >= human.shoulder_width + 6.inches\n        clearance.depth >= human.reach_distance\n        turning_radius >= human.wheelchair_turning_diameter / 2\n        safety_factor: 1.2\n        constraint overflow_prevention:\n        where:\n        tank.has_overflow == true\n        must:\n        overflow_flow = flow.volume_flow_rate(\n        overflow.area,\n        sqrt(2 * gravity * head_difference)\n        )\n        overflow_flow > maximum_supply_rate * 1.25\n        safety_factor: 1.25\n        constraint shower_floor_drainage:\n        where:\n        shower.has_sloped_floor == true\n        must:\n        drainage_time = shower_volume / drain_flow_rate\n        drainage_time < 60.seconds\n        floor_slope > minimum_slope_for_drainage(surface_texture)\n        safety_factor: 1.2\n        constraint whirlpool_pump_cavitation_prevention:\n        where:\n        fixture.type == \"whirlpool_bathtub\"\n        must:\n        NPSH_available = (atmospheric_pressure + static_head - vapor_pressure) / fluid_density\n        NPSH_available > NPSH_required * 1.2\n        pump_elevation > trap_weir_elevation + safety_margin\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.4.426.5\"", "rule_name": "whirlpool_pump_access"}
{"type": "safety_factor_reasoning", "input": "For whirlpool_pump_access rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.4.426.5.", "rule_name": "whirlpool_pump_access", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for combination heating mixing valve: When system.type == \"combination_water_and_space_heating\" and space_heating_temperature > 140.fahrenheit, it is required that mixing_valve.type == \"temperature_actuated\" and mixing_valve.conforms_to == \"ASSE_1017\"", "output": "rule combination_heating_mixing_valve:\n    where:\n        system.type == \"combination_water_and_space_heating\"\n        space_heating_temperature > 140.fahrenheit\n        must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1017\"\n        hot_water_distribution.max_temperature <= 140.fahrenheit\n        water.potability_maintained == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.501.2\"\n    must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1017\"\n        hot_water_distribution.max_temperature <= 140.fahrenheit\n        water.potability_maintained == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.501.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.501.2\"", "rule_name": "combination_heating_mixing_valve"}
{"type": "bcl_to_physics", "input": "rule combination_heating_mixing_valve with constraints: space_heating_temperature, max_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.5.501.2", "rule_name": "combination_heating_mixing_valve"}
{"type": "bcl_completion", "input": "rule combination_heating_mixing_valve:\n    where:\n        system.type == \"combination_water_and_space_heating\"\n    # Complete this rule", "output": "rule combination_heating_mixing_valve:\n    where:\n        system.type == \"combination_water_and_space_heating\"\n        space_heating_temperature > 140.fahrenheit\n        must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1017\"\n        hot_water_distribution.max_temperature <= 140.fahrenheit\n        water.potability_maintained == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.501.2\"\n    must:\n        mixing_valve.type == \"temperature_actuated\"\n        mixing_valve.conforms_to == \"ASSE_1017\"\n        hot_water_distribution.max_temperature <= 140.fahrenheit\n        water.potability_maintained == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.501.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.501.2\"", "rule_name": "combination_heating_mixing_valve"}
{"type": "safety_factor_reasoning", "input": "For combination_heating_mixing_valve rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.5.501.2.", "rule_name": "combination_heating_mixing_valve", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for water heater drain valve: When water_heater.type == \"tank\" and OR storage_tank.type == \"hot_water\", it is required that drain_valve.installed_at_bottom == true and drain_valve.inlet_size >= 0.75.inches", "output": "rule water_heater_drain_valve:\n    where:\n        water_heater.type == \"tank\"\n        OR storage_tank.type == \"hot_water\"\n        must:\n        drain_valve.installed_at_bottom == true\n        drain_valve.inlet_size >= 0.75.inches\n        drain_valve.outlet_threads == \"male_garden_hose\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.3\"\n    must:\n        drain_valve.installed_at_bottom == true\n        drain_valve.inlet_size >= 0.75.inches\n        drain_valve.outlet_threads == \"male_garden_hose\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.501.3\"", "rule_name": "water_heater_drain_valve"}
{"type": "bcl_to_physics", "input": "rule water_heater_drain_valve with constraints: inlet_size", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.5.501.3", "rule_name": "water_heater_drain_valve"}
{"type": "bcl_completion", "input": "rule water_heater_drain_valve:\n    where:\n        water_heater.type == \"tank\"\n    # Complete this rule", "output": "rule water_heater_drain_valve:\n    where:\n        water_heater.type == \"tank\"\n        OR storage_tank.type == \"hot_water\"\n        must:\n        drain_valve.installed_at_bottom == true\n        drain_valve.inlet_size >= 0.75.inches\n        drain_valve.outlet_threads == \"male_garden_hose\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.3\"\n    must:\n        drain_valve.installed_at_bottom == true\n        drain_valve.inlet_size >= 0.75.inches\n        drain_valve.outlet_threads == \"male_garden_hose\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.501.3\"", "rule_name": "water_heater_drain_valve"}
{"type": "safety_factor_reasoning", "input": "For water_heater_drain_valve rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.501.3.", "rule_name": "water_heater_drain_valve", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for water heater access: When equipment.type IN [\"water_heater\", \"storage_tank\"] and must:, it is required that access.for_observation == true and access.for_maintenance == true", "output": "rule water_heater_access:\n    where:\n        equipment.type IN [\"water_heater\", \"storage_tank\"]\n        must:\n        access.for_observation == true\n        access.for_maintenance == true\n        access.for_servicing == true\n        access.for_replacement == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.4\"\n    must:\n        access.for_observation == true\n        access.for_maintenance == true\n        access.for_servicing == true\n        access.for_replacement == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.4\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.5.501.4\"", "rule_name": "water_heater_access"}
{"type": "bcl_to_physics", "input": "rule water_heater_access with conditions: access.for_observation == true, access.for_maintenance == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Code.2024.5.501.4", "rule_name": "water_heater_access"}
{"type": "bcl_completion", "input": "rule water_heater_access:\n    where:\n        equipment.type IN [\"water_heater\", \"storage_tank\"]\n    # Complete this rule", "output": "rule water_heater_access:\n    where:\n        equipment.type IN [\"water_heater\", \"storage_tank\"]\n        must:\n        access.for_observation == true\n        access.for_maintenance == true\n        access.for_servicing == true\n        access.for_replacement == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.4\"\n    must:\n        access.for_observation == true\n        access.for_maintenance == true\n        access.for_servicing == true\n        access.for_replacement == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.4\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.5.501.4\"", "rule_name": "water_heater_access"}
{"type": "safety_factor_reasoning", "input": "For water_heater_access rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.501.4.", "rule_name": "water_heater_access", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for tankless heater temperature: When water_heater.type == \"tankless\" and water.use == \"domestic\", it is required that outlet_temperature <= 140.fahrenheit and safety_factor: 1.2", "output": "rule tankless_heater_temperature:\n    where:\n        water_heater.type == \"tankless\"\n        water.use == \"domestic\"\n        must:\n        outlet_temperature <= 140.fahrenheit\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.501.6\"\n    must:\n        outlet_temperature <= 140.fahrenheit\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.501.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.5.501.6\"", "rule_name": "tankless_heater_temperature"}
{"type": "bcl_to_physics", "input": "rule tankless_heater_temperature with constraints: outlet_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.5.501.6", "rule_name": "tankless_heater_temperature"}
{"type": "bcl_completion", "input": "rule tankless_heater_temperature:\n    where:\n        water_heater.type == \"tankless\"\n    # Complete this rule", "output": "rule tankless_heater_temperature:\n    where:\n        water_heater.type == \"tankless\"\n        water.use == \"domestic\"\n        must:\n        outlet_temperature <= 140.fahrenheit\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.501.6\"\n    must:\n        outlet_temperature <= 140.fahrenheit\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.501.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.5.501.6\"", "rule_name": "tankless_heater_temperature"}
{"type": "safety_factor_reasoning", "input": "For tankless_heater_temperature rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.501.6.", "rule_name": "tankless_heater_temperature", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for pressure marking requirements: When equipment.type IN [\"storage_tank\", \"water_heater\"] and equipment.use == \"domestic_hot_water\", it is required that marking.maximum_working_pressure == true and marking.method IN [\"stamped_in_metal\", \"welded_plate\", \"permanent_attachment\"]", "output": "rule pressure_marking_requirements:\n    where:\n        equipment.type IN [\"storage_tank\", \"water_heater\"]\n        equipment.use == \"domestic_hot_water\"\n        must:\n        marking.maximum_working_pressure == true\n        marking.method IN [\"stamped_in_metal\", \"welded_plate\", \"permanent_attachment\"]\n        marking.position == \"outside_accessible\"\n        marking.allows_reinspection == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.7\"\n    must:\n        marking.maximum_working_pressure == true\n        marking.method IN [\"stamped_in_metal\", \"welded_plate\", \"permanent_attachment\"]\n        marking.position == \"outside_accessible\"\n        marking.allows_reinspection == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.7\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.5.501.7\"", "rule_name": "pressure_marking_requirements"}
{"type": "bcl_to_physics", "input": "rule pressure_marking_requirements with conditions: marking.maximum_working_pressure == true, marking.method IN [\"stamped_in_metal\", \"welded_plate\", \"permanent_attachment\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Code.2024.5.501.7", "rule_name": "pressure_marking_requirements"}
{"type": "bcl_completion", "input": "rule pressure_marking_requirements:\n    where:\n        equipment.type IN [\"storage_tank\", \"water_heater\"]\n    # Complete this rule", "output": "rule pressure_marking_requirements:\n    where:\n        equipment.type IN [\"storage_tank\", \"water_heater\"]\n        equipment.use == \"domestic_hot_water\"\n        must:\n        marking.maximum_working_pressure == true\n        marking.method IN [\"stamped_in_metal\", \"welded_plate\", \"permanent_attachment\"]\n        marking.position == \"outside_accessible\"\n        marking.allows_reinspection == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.7\"\n    must:\n        marking.maximum_working_pressure == true\n        marking.method IN [\"stamped_in_metal\", \"welded_plate\", \"permanent_attachment\"]\n        marking.position == \"outside_accessible\"\n        marking.allows_reinspection == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.501.7\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.5.501.7\"", "rule_name": "pressure_marking_requirements"}
{"type": "safety_factor_reasoning", "input": "For pressure_marking_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.501.7.", "rule_name": "pressure_marking_requirements", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for temperature control system: When system.type == \"hot_water_supply\" and must:, it is required that temperature_control.automatic == true and temperature_control.adjustable == true", "output": "rule temperature_control_system:\n    where:\n        system.type == \"hot_water_supply\"\n        must:\n        temperature_control.automatic == true\n        temperature_control.adjustable == true\n        temperature_control.range_from == \"lowest_acceptable\"\n        temperature_control.range_to == \"highest_acceptable\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.8\"\n    must:\n        temperature_control.automatic == true\n        temperature_control.adjustable == true\n        temperature_control.range_from == \"lowest_acceptable\"\n        temperature_control.range_to == \"highest_acceptable\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.8\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.501.8\"", "rule_name": "temperature_control_system"}
{"type": "bcl_to_physics", "input": "rule temperature_control_system with conditions: temperature_control.automatic == true, temperature_control.adjustable == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.5.501.8", "rule_name": "temperature_control_system"}
{"type": "bcl_completion", "input": "rule temperature_control_system:\n    where:\n        system.type == \"hot_water_supply\"\n    # Complete this rule", "output": "rule temperature_control_system:\n    where:\n        system.type == \"hot_water_supply\"\n        must:\n        temperature_control.automatic == true\n        temperature_control.adjustable == true\n        temperature_control.range_from == \"lowest_acceptable\"\n        temperature_control.range_to == \"highest_acceptable\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.8\"\n    must:\n        temperature_control.automatic == true\n        temperature_control.adjustable == true\n        temperature_control.range_from == \"lowest_acceptable\"\n        temperature_control.range_to == \"highest_acceptable\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.501.8\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.501.8\"", "rule_name": "temperature_control_system"}
{"type": "safety_factor_reasoning", "input": "For temperature_control_system rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.501.8.", "rule_name": "temperature_control_system", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for plenum prohibition: When water_heater.fuel IN [\"solid\", \"liquid\", \"gas\"] and room.contains == \"air_handling_machinery\", it is required that water_heater.installed == false and safety_factor: 2.0", "output": "rule plenum_prohibition:\n    where:\n        water_heater.fuel IN [\"solid\", \"liquid\", \"gas\"]\n        room.contains == \"air_handling_machinery\"\n        room.used_as == \"plenum\"\n        must:\n        water_heater.installed == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.5.502.2\"\n    must:\n        water_heater.installed == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.5.502.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.5.502.2\"", "rule_name": "plenum_prohibition"}
{"type": "bcl_to_physics", "input": "rule plenum_prohibition with conditions: water_heater.installed == false, safety_factor: 2.0", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.5.502.2", "rule_name": "plenum_prohibition"}
{"type": "bcl_completion", "input": "rule plenum_prohibition:\n    where:\n        water_heater.fuel IN [\"solid\", \"liquid\", \"gas\"]\n    # Complete this rule", "output": "rule plenum_prohibition:\n    where:\n        water_heater.fuel IN [\"solid\", \"liquid\", \"gas\"]\n        room.contains == \"air_handling_machinery\"\n        room.used_as == \"plenum\"\n        must:\n        water_heater.installed == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.5.502.2\"\n    must:\n        water_heater.installed == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.5.502.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.5.502.2\"", "rule_name": "plenum_prohibition"}
{"type": "safety_factor_reasoning", "input": "For plenum_prohibition rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.5.502.2.", "rule_name": "plenum_prohibition", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for attic installation access: When water_heater.location == \"attic\" and must:, it is required that passageway.height >= 30.inches and passageway.width >= 22.inches", "output": "rule attic_installation_access:\n    where:\n        water_heater.location == \"attic\"\n        must:\n        passageway.height >= 30.inches\n        passageway.width >= 22.inches\n        passageway.length <= 20.feet\n        passageway.flooring == \"continuous_solid\"\n        passageway.flooring_width >= 24.inches\n        service_space.length >= 30.inches\n        service_space.width >= 30.inches\n        service_space.location IN [\"front\", \"service_side\"]\n        access_opening.width >= 20.inches\n        access_opening.height >= 30.inches\n        access_opening.allows_heater_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.3\"\n    must:\n        passageway.height >= 30.inches\n        passageway.width >= 22.inches\n        passageway.length <= 20.feet\n        passageway.flooring == \"continuous_solid\"\n        passageway.flooring_width >= 24.inches\n        service_space.length >= 30.inches\n        service_space.width >= 30.inches\n        service_space.location IN [\"front\", \"service_side\"]\n        access_opening.width >= 20.inches\n        access_opening.height >= 30.inches\n        access_opening.allows_heater_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.502.3\"", "rule_name": "attic_installation_access"}
{"type": "bcl_to_physics", "input": "rule attic_installation_access with constraints: height, width", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.5.502.3", "rule_name": "attic_installation_access"}
{"type": "bcl_completion", "input": "rule attic_installation_access:\n    where:\n        water_heater.location == \"attic\"\n    # Complete this rule", "output": "rule attic_installation_access:\n    where:\n        water_heater.location == \"attic\"\n        must:\n        passageway.height >= 30.inches\n        passageway.width >= 22.inches\n        passageway.length <= 20.feet\n        passageway.flooring == \"continuous_solid\"\n        passageway.flooring_width >= 24.inches\n        service_space.length >= 30.inches\n        service_space.width >= 30.inches\n        service_space.location IN [\"front\", \"service_side\"]\n        access_opening.width >= 20.inches\n        access_opening.height >= 30.inches\n        access_opening.allows_heater_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.3\"\n    must:\n        passageway.height >= 30.inches\n        passageway.width >= 22.inches\n        passageway.length <= 20.feet\n        passageway.flooring == \"continuous_solid\"\n        passageway.flooring_width >= 24.inches\n        service_space.length >= 30.inches\n        service_space.width >= 30.inches\n        service_space.location IN [\"front\", \"service_side\"]\n        access_opening.width >= 20.inches\n        access_opening.height >= 30.inches\n        access_opening.allows_heater_removal == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.502.3\"", "rule_name": "attic_installation_access"}
{"type": "safety_factor_reasoning", "input": "For attic_installation_access rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.502.3.", "rule_name": "attic_installation_access", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for maintenance clearance: When appliance.requires_service == true and must:, it is required that access.without_disabling_fire_rating == true and access.without_removing_permanent_construction == true", "output": "rule maintenance_clearance:\n    where:\n        appliance.requires_service == true\n        must:\n        access.without_disabling_fire_rating == true\n        access.without_removing_permanent_construction == true\n        access.without_removing_other_appliances == true\n        working_space.length >= 30.inches\n        working_space.width >= 30.inches\n        working_space.location == \"front_of_control_side\"\n        working_space.level == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.5\"\n    must:\n        access.without_disabling_fire_rating == true\n        access.without_removing_permanent_construction == true\n        access.without_removing_other_appliances == true\n        working_space.length >= 30.inches\n        working_space.width >= 30.inches\n        working_space.location == \"front_of_control_side\"\n        working_space.level == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.5\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.502.5\"", "rule_name": "maintenance_clearance"}
{"type": "bcl_to_physics", "input": "rule maintenance_clearance with constraints: length, width", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.5.502.5", "rule_name": "maintenance_clearance"}
{"type": "bcl_completion", "input": "rule maintenance_clearance:\n    where:\n        appliance.requires_service == true\n    # Complete this rule", "output": "rule maintenance_clearance:\n    where:\n        appliance.requires_service == true\n        must:\n        access.without_disabling_fire_rating == true\n        access.without_removing_permanent_construction == true\n        access.without_removing_other_appliances == true\n        working_space.length >= 30.inches\n        working_space.width >= 30.inches\n        working_space.location == \"front_of_control_side\"\n        working_space.level == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.5\"\n    must:\n        access.without_disabling_fire_rating == true\n        access.without_removing_permanent_construction == true\n        access.without_removing_other_appliances == true\n        working_space.length >= 30.inches\n        working_space.width >= 30.inches\n        working_space.location == \"front_of_control_side\"\n        working_space.level == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.502.5\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.502.5\"", "rule_name": "maintenance_clearance"}
{"type": "safety_factor_reasoning", "input": "For maintenance_clearance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.502.5.", "rule_name": "maintenance_clearance", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for cold water shutoff: When equipment.type IN [\"hot_water_storage_tank\", \"water_heater\"] and must:, it is required that shutoff_valve.on_cold_water_branch == true and shutoff_valve.location == \"near_equipment\"", "output": "rule cold_water_shutoff:\n    where:\n        equipment.type IN [\"hot_water_storage_tank\", \"water_heater\"]\n        must:\n        shutoff_valve.on_cold_water_branch == true\n        shutoff_valve.location == \"near_equipment\"\n        shutoff_valve.serves_only_equipment == true\n        shutoff_valve.does_not_disrupt_other_cold_water == true\n        shutoff_valve.access_same_floor == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.503.1\"\n    must:\n        shutoff_valve.on_cold_water_branch == true\n        shutoff_valve.location == \"near_equipment\"\n        shutoff_valve.serves_only_equipment == true\n        shutoff_valve.does_not_disrupt_other_cold_water == true\n        shutoff_valve.access_same_floor == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.503.1\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.5.503.1\"", "rule_name": "cold_water_shutoff"}
{"type": "bcl_to_physics", "input": "rule cold_water_shutoff with conditions: shutoff_valve.on_cold_water_branch == true, shutoff_valve.location == \"near_equipment\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Code.2024.5.503.1", "rule_name": "cold_water_shutoff"}
{"type": "bcl_completion", "input": "rule cold_water_shutoff:\n    where:\n        equipment.type IN [\"hot_water_storage_tank\", \"water_heater\"]\n    # Complete this rule", "output": "rule cold_water_shutoff:\n    where:\n        equipment.type IN [\"hot_water_storage_tank\", \"water_heater\"]\n        must:\n        shutoff_valve.on_cold_water_branch == true\n        shutoff_valve.location == \"near_equipment\"\n        shutoff_valve.serves_only_equipment == true\n        shutoff_valve.does_not_disrupt_other_cold_water == true\n        shutoff_valve.access_same_floor == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.503.1\"\n    must:\n        shutoff_valve.on_cold_water_branch == true\n        shutoff_valve.location == \"near_equipment\"\n        shutoff_valve.serves_only_equipment == true\n        shutoff_valve.does_not_disrupt_other_cold_water == true\n        shutoff_valve.access_same_floor == true\n        safety_factor: 1.0\n        reference: \"FL.Code.2024.5.503.1\"\n    safety_factor: 1.0\n    reference: \"FL.Code.2024.5.503.1\"", "rule_name": "cold_water_shutoff"}
{"type": "safety_factor_reasoning", "input": "For cold_water_shutoff rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.503.1.", "rule_name": "cold_water_shutoff", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for antisiphon protection: When equipment.type IN [\"storage_water_heater\", \"tank\"] and must:, it is required that antisiphon_method IN [ and \"dip_tube_with_hole_at_top\",", "output": "rule antisiphon_protection:\n    where:\n        equipment.type IN [\"storage_water_heater\", \"tank\"]\n        must:\n        antisiphon_method IN [\n        \"dip_tube_with_hole_at_top\",\n        \"vacuum_relief_valve_in_cold_supply\"\n        ]\n        if antisiphon_method == \"vacuum_relief_valve_in_cold_supply\":\n        valve.location == \"above_top_of_heater\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.1\"\n    must:\n        antisiphon_method IN [\n        \"dip_tube_with_hole_at_top\",\n        \"vacuum_relief_valve_in_cold_supply\"\n        ]\n        if antisiphon_method == \"vacuum_relief_valve_in_cold_supply\":\n        valve.location == \"above_top_of_heater\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.504.1\"", "rule_name": "antisiphon_protection"}
{"type": "bcl_to_physics", "input": "rule antisiphon_protection with conditions: antisiphon_method IN [, \"dip_tube_with_hole_at_top\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.5.504.1", "rule_name": "antisiphon_protection"}
{"type": "bcl_completion", "input": "rule antisiphon_protection:\n    where:\n        equipment.type IN [\"storage_water_heater\", \"tank\"]\n    # Complete this rule", "output": "rule antisiphon_protection:\n    where:\n        equipment.type IN [\"storage_water_heater\", \"tank\"]\n        must:\n        antisiphon_method IN [\n        \"dip_tube_with_hole_at_top\",\n        \"vacuum_relief_valve_in_cold_supply\"\n        ]\n        if antisiphon_method == \"vacuum_relief_valve_in_cold_supply\":\n        valve.location == \"above_top_of_heater\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.1\"\n    must:\n        antisiphon_method IN [\n        \"dip_tube_with_hole_at_top\",\n        \"vacuum_relief_valve_in_cold_supply\"\n        ]\n        if antisiphon_method == \"vacuum_relief_valve_in_cold_supply\":\n        valve.location == \"above_top_of_heater\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.504.1\"", "rule_name": "antisiphon_protection"}
{"type": "safety_factor_reasoning", "input": "For antisiphon_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.5.504.1.", "rule_name": "antisiphon_protection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for bottom fed vacuum relief: When water_heater.feed_location == \"bottom\" and OR tank.feed_location == \"bottom\" AND tank.connected_to_heater == true, it is required that vacuum_relief_valve.installed == true and vacuum_relief_valve.conforms_to == \"ANSI_Z21.22\"", "output": "rule bottom_fed_vacuum_relief:\n    where:\n        water_heater.feed_location == \"bottom\"\n        OR tank.feed_location == \"bottom\" AND tank.connected_to_heater == true\n        must:\n        vacuum_relief_valve.installed == true\n        vacuum_relief_valve.conforms_to == \"ANSI_Z21.22\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.2\"\n    must:\n        vacuum_relief_valve.installed == true\n        vacuum_relief_valve.conforms_to == \"ANSI_Z21.22\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.504.2\"", "rule_name": "bottom_fed_vacuum_relief"}
{"type": "bcl_to_physics", "input": "rule bottom_fed_vacuum_relief with conditions: vacuum_relief_valve.installed == true, vacuum_relief_valve.conforms_to == \"ANSI_Z21.22\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.5.504.2", "rule_name": "bottom_fed_vacuum_relief"}
{"type": "bcl_completion", "input": "rule bottom_fed_vacuum_relief:\n    where:\n        water_heater.feed_location == \"bottom\"\n    # Complete this rule", "output": "rule bottom_fed_vacuum_relief:\n    where:\n        water_heater.feed_location == \"bottom\"\n        OR tank.feed_location == \"bottom\" AND tank.connected_to_heater == true\n        must:\n        vacuum_relief_valve.installed == true\n        vacuum_relief_valve.conforms_to == \"ANSI_Z21.22\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.2\"\n    must:\n        vacuum_relief_valve.installed == true\n        vacuum_relief_valve.conforms_to == \"ANSI_Z21.22\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.504.2\"", "rule_name": "bottom_fed_vacuum_relief"}
{"type": "safety_factor_reasoning", "input": "For bottom_fed_vacuum_relief rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.5.504.2.", "rule_name": "bottom_fed_vacuum_relief", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for temperature pressure relief: When water_heater.type == \"storage\" and water_heater.pressure > atmospheric_pressure, it is required that relief_valve.type IN [ and \"pressure_relief\",", "output": "rule temperature_pressure_relief:\n    where:\n        water_heater.type == \"storage\"\n        water_heater.pressure > atmospheric_pressure\n        must:\n        relief_valve.type IN [\n        \"pressure_relief\",\n        \"temperature_relief\",\n        \"combination_T_and_P\"\n        ]\n        relief_valve.self_closing == true\n        relief_valve.levered == true\n        relief_valve.conforms_to == \"ANSI_Z21.22\"\n        relief_valve.used_for_thermal_expansion == false\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4\"\n    must:\n        relief_valve.type IN [\n        \"pressure_relief\",\n        \"temperature_relief\",\n        \"combination_T_and_P\"\n        ]\n        relief_valve.self_closing == true\n        relief_valve.levered == true\n        relief_valve.conforms_to == \"ANSI_Z21.22\"\n        relief_valve.used_for_thermal_expansion == false\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.5.504.4\"", "rule_name": "temperature_pressure_relief"}
{"type": "bcl_to_physics", "input": "rule temperature_pressure_relief with conditions: relief_valve.type IN [, \"pressure_relief\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.5.504.4", "rule_name": "temperature_pressure_relief"}
{"type": "bcl_completion", "input": "rule temperature_pressure_relief:\n    where:\n        water_heater.type == \"storage\"\n    # Complete this rule", "output": "rule temperature_pressure_relief:\n    where:\n        water_heater.type == \"storage\"\n        water_heater.pressure > atmospheric_pressure\n        must:\n        relief_valve.type IN [\n        \"pressure_relief\",\n        \"temperature_relief\",\n        \"combination_T_and_P\"\n        ]\n        relief_valve.self_closing == true\n        relief_valve.levered == true\n        relief_valve.conforms_to == \"ANSI_Z21.22\"\n        relief_valve.used_for_thermal_expansion == false\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4\"\n    must:\n        relief_valve.type IN [\n        \"pressure_relief\",\n        \"temperature_relief\",\n        \"combination_T_and_P\"\n        ]\n        relief_valve.self_closing == true\n        relief_valve.levered == true\n        relief_valve.conforms_to == \"ANSI_Z21.22\"\n        relief_valve.used_for_thermal_expansion == false\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.5.504.4\"", "rule_name": "temperature_pressure_relief"}
{"type": "safety_factor_reasoning", "input": "For temperature_pressure_relief rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.5.504.4.", "rule_name": "temperature_pressure_relief", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for relief valve installation: When relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"] and must:, it is required that valve.installed_in == \"water_heater_shell\" and if valve.type IN [\"temperature\", \"combination\"]:", "output": "rule relief_valve_installation:\n    where:\n        relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"]\n        must:\n        valve.installed_in == \"water_heater_shell\"\n        if valve.type IN [\"temperature\", \"combination\"]:\n        valve.actuated_by == \"water_in_top_6_inches\"\n        check_valve_between(relief_valve, tank) == false\n        shutoff_valve_between(relief_valve, tank) == false\n        if installation.has_separate_storage_tank == true:\n        relief_valve.on_heater == true\n        relief_valve.on_storage_tank == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4.1\"\n    must:\n        valve.installed_in == \"water_heater_shell\"\n        if valve.type IN [\"temperature\", \"combination\"]:\n        valve.actuated_by == \"water_in_top_6_inches\"\n        check_valve_between(relief_valve, tank) == false\n        shutoff_valve_between(relief_valve, tank) == false\n        if installation.has_separate_storage_tank == true:\n        relief_valve.on_heater == true\n        relief_valve.on_storage_tank == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.5.504.4.1\"", "rule_name": "relief_valve_installation"}
{"type": "bcl_to_physics", "input": "rule relief_valve_installation with constraints: if valve.type IN [\"temperature\", \"combination\"]:", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.5.504.4.1", "rule_name": "relief_valve_installation"}
{"type": "bcl_completion", "input": "rule relief_valve_installation:\n    where:\n        relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"]\n    # Complete this rule", "output": "rule relief_valve_installation:\n    where:\n        relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"]\n        must:\n        valve.installed_in == \"water_heater_shell\"\n        if valve.type IN [\"temperature\", \"combination\"]:\n        valve.actuated_by == \"water_in_top_6_inches\"\n        check_valve_between(relief_valve, tank) == false\n        shutoff_valve_between(relief_valve, tank) == false\n        if installation.has_separate_storage_tank == true:\n        relief_valve.on_heater == true\n        relief_valve.on_storage_tank == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4.1\"\n    must:\n        valve.installed_in == \"water_heater_shell\"\n        if valve.type IN [\"temperature\", \"combination\"]:\n        valve.actuated_by == \"water_in_top_6_inches\"\n        check_valve_between(relief_valve, tank) == false\n        shutoff_valve_between(relief_valve, tank) == false\n        if installation.has_separate_storage_tank == true:\n        relief_valve.on_heater == true\n        relief_valve.on_storage_tank == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.4.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.5.504.4.1\"", "rule_name": "relief_valve_installation"}
{"type": "safety_factor_reasoning", "input": "For relief_valve_installation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.5.504.4.1.", "rule_name": "relief_valve_installation", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for relief valve ratings: When relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"] and must:, it is required that valve.labeled_by_approved_agency == true and valve.temperature_setting <= 210.fahrenheit", "output": "rule relief_valve_ratings:\n    where:\n        relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"]\n        must:\n        valve.labeled_by_approved_agency == true\n        valve.temperature_setting <= 210.fahrenheit\n        valve.pressure_setting <= min(\n        manufacturer.rated_working_pressure,\n        150.psi\n        )\n        valve.relieving_capacity >= equipment.heat_input\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.5\"\n    must:\n        valve.labeled_by_approved_agency == true\n        valve.temperature_setting <= 210.fahrenheit\n        valve.pressure_setting <= min(\n        manufacturer.rated_working_pressure,\n        150.psi\n        )\n        valve.relieving_capacity >= equipment.heat_input\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.5.504.5\"", "rule_name": "relief_valve_ratings"}
{"type": "bcl_to_physics", "input": "rule relief_valve_ratings with constraints: temperature_setting", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.5.504.5", "rule_name": "relief_valve_ratings"}
{"type": "bcl_completion", "input": "rule relief_valve_ratings:\n    where:\n        relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"]\n    # Complete this rule", "output": "rule relief_valve_ratings:\n    where:\n        relief_valve.type IN [\"temperature\", \"pressure\", \"combination\"]\n        must:\n        valve.labeled_by_approved_agency == true\n        valve.temperature_setting <= 210.fahrenheit\n        valve.pressure_setting <= min(\n        manufacturer.rated_working_pressure,\n        150.psi\n        )\n        valve.relieving_capacity >= equipment.heat_input\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.5\"\n    must:\n        valve.labeled_by_approved_agency == true\n        valve.temperature_setting <= 210.fahrenheit\n        valve.pressure_setting <= min(\n        manufacturer.rated_working_pressure,\n        150.psi\n        )\n        valve.relieving_capacity >= equipment.heat_input\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.5.504.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.5.504.5\"", "rule_name": "relief_valve_ratings"}
{"type": "safety_factor_reasoning", "input": "For relief_valve_ratings rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.5.504.5.", "rule_name": "relief_valve_ratings", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for relief discharge piping: When piping.serves == \"relief_valve\" and must:, it is required that piping.not_directly_connected_to_drainage == true and piping.discharge_through_air_gap == true", "output": "rule relief_discharge_piping:\n    where:\n        piping.serves == \"relief_valve\"\n        must:\n        piping.not_directly_connected_to_drainage == true\n        piping.discharge_through_air_gap == true\n        air_gap.location == \"same_room_as_heater\"\n        piping.diameter >= valve_outlet.diameter\n        piping.full_size_to_air_gap == true\n        piping.serves_single_device == true\n        discharge.to IN [\"floor\", \"pan\", \"waste_receptor\", \"outdoors\"]\n        discharge.prevents_personal_injury == true\n        discharge.prevents_structural_damage == true\n        discharge.readily_observable == true\n        piping.not_trapped == true\n        piping.flows_by_gravity == true\n        termination.height_above_floor <= 6.inches\n        termination.height_above_floor >= 2 * pipe.diameter\n        termination.no_threaded_connection == true\n        piping.no_valves == true\n        piping.no_tee_fittings == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.6\"\n    must:\n        piping.not_directly_connected_to_drainage == true\n        piping.discharge_through_air_gap == true\n        air_gap.location == \"same_room_as_heater\"\n        piping.diameter >= valve_outlet.diameter\n        piping.full_size_to_air_gap == true\n        piping.serves_single_device == true\n        discharge.to IN [\"floor\", \"pan\", \"waste_receptor\", \"outdoors\"]\n        discharge.prevents_personal_injury == true\n        discharge.prevents_structural_damage == true\n        discharge.readily_observable == true\n        piping.not_trapped == true\n        piping.flows_by_gravity == true\n        termination.height_above_floor <= 6.inches\n        termination.height_above_floor >= 2 * pipe.diameter\n        termination.no_threaded_connection == true\n        piping.no_valves == true\n        piping.no_tee_fittings == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.504.6\"", "rule_name": "relief_discharge_piping"}
{"type": "bcl_to_physics", "input": "rule relief_discharge_piping with constraints: height_above_floor", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.5.504.6", "rule_name": "relief_discharge_piping"}
{"type": "bcl_completion", "input": "rule relief_discharge_piping:\n    where:\n        piping.serves == \"relief_valve\"\n    # Complete this rule", "output": "rule relief_discharge_piping:\n    where:\n        piping.serves == \"relief_valve\"\n        must:\n        piping.not_directly_connected_to_drainage == true\n        piping.discharge_through_air_gap == true\n        air_gap.location == \"same_room_as_heater\"\n        piping.diameter >= valve_outlet.diameter\n        piping.full_size_to_air_gap == true\n        piping.serves_single_device == true\n        discharge.to IN [\"floor\", \"pan\", \"waste_receptor\", \"outdoors\"]\n        discharge.prevents_personal_injury == true\n        discharge.prevents_structural_damage == true\n        discharge.readily_observable == true\n        piping.not_trapped == true\n        piping.flows_by_gravity == true\n        termination.height_above_floor <= 6.inches\n        termination.height_above_floor >= 2 * pipe.diameter\n        termination.no_threaded_connection == true\n        piping.no_valves == true\n        piping.no_tee_fittings == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.6\"\n    must:\n        piping.not_directly_connected_to_drainage == true\n        piping.discharge_through_air_gap == true\n        air_gap.location == \"same_room_as_heater\"\n        piping.diameter >= valve_outlet.diameter\n        piping.full_size_to_air_gap == true\n        piping.serves_single_device == true\n        discharge.to IN [\"floor\", \"pan\", \"waste_receptor\", \"outdoors\"]\n        discharge.prevents_personal_injury == true\n        discharge.prevents_structural_damage == true\n        discharge.readily_observable == true\n        piping.not_trapped == true\n        piping.flows_by_gravity == true\n        termination.height_above_floor <= 6.inches\n        termination.height_above_floor >= 2 * pipe.diameter\n        termination.no_threaded_connection == true\n        piping.no_valves == true\n        piping.no_tee_fittings == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.5.504.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.5.504.6\"", "rule_name": "relief_discharge_piping"}
{"type": "safety_factor_reasoning", "input": "For relief_discharge_piping rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.5.504.6.", "rule_name": "relief_discharge_piping", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for water heater pan requirement: When water_heater.type == \"storage_tank\" and OR equipment.type == \"hot_water_storage_tank\", it is required that pan.installed == true and pan.material IN [", "output": "rule water_heater_pan_requirement:\n    where:\n        water_heater.type == \"storage_tank\"\n        OR equipment.type == \"hot_water_storage_tank\"\n        water_leakage.would_cause_damage == true\n        must:\n        pan.installed == true\n        pan.material IN [\n        {\"type\": \"galvanized_steel\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"aluminum\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"plastic\", \"thickness\": >= 0.036.inches},\n        \"other_approved_material\"\n        ]\n        if water_heater.fuel == \"gas\":\n        pan.material != \"plastic\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7\"\n    must:\n        pan.installed == true\n        pan.material IN [\n        {\"type\": \"galvanized_steel\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"aluminum\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"plastic\", \"thickness\": >= 0.036.inches},\n        \"other_approved_material\"\n        ]\n        if water_heater.fuel == \"gas\":\n        pan.material != \"plastic\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.5.504.7\"", "rule_name": "water_heater_pan_requirement"}
{"type": "bcl_to_physics", "input": "rule water_heater_pan_requirement with conditions: pan.installed == true, pan.material IN [", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.5.504.7", "rule_name": "water_heater_pan_requirement"}
{"type": "bcl_completion", "input": "rule water_heater_pan_requirement:\n    where:\n        water_heater.type == \"storage_tank\"\n    # Complete this rule", "output": "rule water_heater_pan_requirement:\n    where:\n        water_heater.type == \"storage_tank\"\n        OR equipment.type == \"hot_water_storage_tank\"\n        water_leakage.would_cause_damage == true\n        must:\n        pan.installed == true\n        pan.material IN [\n        {\"type\": \"galvanized_steel\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"aluminum\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"plastic\", \"thickness\": >= 0.036.inches},\n        \"other_approved_material\"\n        ]\n        if water_heater.fuel == \"gas\":\n        pan.material != \"plastic\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7\"\n    must:\n        pan.installed == true\n        pan.material IN [\n        {\"type\": \"galvanized_steel\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"aluminum\", \"thickness\": >= 0.0236.inches},\n        {\"type\": \"plastic\", \"thickness\": >= 0.036.inches},\n        \"other_approved_material\"\n        ]\n        if water_heater.fuel == \"gas\":\n        pan.material != \"plastic\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.5.504.7\"", "rule_name": "water_heater_pan_requirement"}
{"type": "safety_factor_reasoning", "input": "For water_heater_pan_requirement rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.504.7.", "rule_name": "water_heater_pan_requirement", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for pan dimensions and drain: When pan.serves == \"water_heater\" and must:, it is required that pan.depth >= 1.5.inches and pan.size_receives_all_dripping == true", "output": "rule pan_dimensions_and_drain:\n    where:\n        pan.serves == \"water_heater\"\n        must:\n        pan.depth >= 1.5.inches\n        pan.size_receives_all_dripping == true\n        pan.shape_receives_all_condensate == true\n        pan_drain.type == \"indirect_waste\"\n        pan_drain.diameter >= 0.75.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7.1\"\n    must:\n        pan.depth >= 1.5.inches\n        pan.size_receives_all_dripping == true\n        pan.shape_receives_all_condensate == true\n        pan_drain.type == \"indirect_waste\"\n        pan_drain.diameter >= 0.75.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.5.504.7.1\"", "rule_name": "pan_dimensions_and_drain"}
{"type": "bcl_to_physics", "input": "rule pan_dimensions_and_drain with constraints: depth, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.5.504.7.1", "rule_name": "pan_dimensions_and_drain"}
{"type": "bcl_completion", "input": "rule pan_dimensions_and_drain:\n    where:\n        pan.serves == \"water_heater\"\n    # Complete this rule", "output": "rule pan_dimensions_and_drain:\n    where:\n        pan.serves == \"water_heater\"\n        must:\n        pan.depth >= 1.5.inches\n        pan.size_receives_all_dripping == true\n        pan.shape_receives_all_condensate == true\n        pan_drain.type == \"indirect_waste\"\n        pan_drain.diameter >= 0.75.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7.1\"\n    must:\n        pan.depth >= 1.5.inches\n        pan.size_receives_all_dripping == true\n        pan.shape_receives_all_condensate == true\n        pan_drain.type == \"indirect_waste\"\n        pan_drain.diameter >= 0.75.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.5.504.7.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.5.504.7.1\"", "rule_name": "pan_dimensions_and_drain"}
{"type": "safety_factor_reasoning", "input": "For pan_dimensions_and_drain rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.504.7.1.", "rule_name": "pan_dimensions_and_drain", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for pan drain termination: When drain.type == \"pan_drain\" and must:, it is required that drain.extends_full_size == true and termination.location IN [", "output": "rule pan_drain_termination:\n    where:\n        drain.type == \"pan_drain\"\n        must:\n        drain.extends_full_size == true\n        termination.location IN [\n        \"indirect_waste_receptor\",\n        \"floor_drain\",\n        \"building_exterior\"\n        ]\n        if termination.location == \"building_exterior\":\n        termination.height_above_ground >= 6.inches\n        termination.height_above_ground <= 24.inches\n        if installation.type == \"replacement\" AND previous_pan_drain == false:\n        pan_drain.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.504.7.2\"\n    must:\n        drain.extends_full_size == true\n        termination.location IN [\n        \"indirect_waste_receptor\",\n        \"floor_drain\",\n        \"building_exterior\"\n        ]\n        if termination.location == \"building_exterior\":\n        termination.height_above_ground >= 6.inches\n        termination.height_above_ground <= 24.inches\n        if installation.type == \"replacement\" AND previous_pan_drain == false:\n        pan_drain.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.504.7.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.504.7.2\"", "rule_name": "pan_drain_termination"}
{"type": "bcl_to_physics", "input": "rule pan_drain_termination with constraints: height_above_ground, height_above_ground", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.5.504.7.2", "rule_name": "pan_drain_termination"}
{"type": "bcl_completion", "input": "rule pan_drain_termination:\n    where:\n        drain.type == \"pan_drain\"\n    # Complete this rule", "output": "rule pan_drain_termination:\n    where:\n        drain.type == \"pan_drain\"\n        must:\n        drain.extends_full_size == true\n        termination.location IN [\n        \"indirect_waste_receptor\",\n        \"floor_drain\",\n        \"building_exterior\"\n        ]\n        if termination.location == \"building_exterior\":\n        termination.height_above_ground >= 6.inches\n        termination.height_above_ground <= 24.inches\n        if installation.type == \"replacement\" AND previous_pan_drain == false:\n        pan_drain.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.504.7.2\"\n    must:\n        drain.extends_full_size == true\n        termination.location IN [\n        \"indirect_waste_receptor\",\n        \"floor_drain\",\n        \"building_exterior\"\n        ]\n        if termination.location == \"building_exterior\":\n        termination.height_above_ground >= 6.inches\n        termination.height_above_ground <= 24.inches\n        if installation.type == \"replacement\" AND previous_pan_drain == false:\n        pan_drain.required == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.504.7.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.504.7.2\"", "rule_name": "pan_drain_termination"}
{"type": "safety_factor_reasoning", "input": "For pan_drain_termination rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.504.7.2.", "rule_name": "pan_drain_termination", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for unfired vessel insulation: When storage_tank.type == \"hot_water\" and storage_tank.unfired == true, it is required that insulation.R_value >= 12.5  # (h \u00c3\u2014 ft\u00c2\u00b2 \u00c3\u2014 \u00c2\u00b0F)/Btu and safety_factor: 1.1", "output": "rule unfired_vessel_insulation:\n    where:\n        storage_tank.type == \"hot_water\"\n        storage_tank.unfired == true\n        must:\n        insulation.R_value >= 12.5  # (h \u00c3\u2014 ft\u00c2\u00b2 \u00c3\u2014 \u00c2\u00b0F)/Btu\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.505.1\"\n        constraint tank_temperature_stratification:\n        where:\n        water_heater.type == \"storage_tank\"\n        must:\n        temperature_gradient = thermal.buoyancy_stratification(\n        tank.height,\n        inlet_temperature,\n        setpoint_temperature\n        )\n        top_temperature = setpoint_temperature + temperature_gradient\n        relief_valve_temperature >= top_temperature * 0.95\n        safety_factor: 1.3\n        constraint thermal_expansion_pressure:\n        where:\n        system.has_backflow_preventer == true\n        system.closed == true\n        must:\n        volume_increase = water.volume * thermal.expansion_coefficient * temperature_rise\n        pressure_increase = volume_increase * water.bulk_modulus / system.volume\n        system.pressure_rating > operating_pressure + pressure_increase\n        safety_factor: 1.5\n        constraint vacuum_prevention:\n        where:\n        water_heater.bottom_fed == true\n        must:\n        max_siphon_height = atmospheric_pressure / (water.density * gravity)\n        vacuum_relief.opening_pressure < 0.5 * atmospheric_pressure\n        tank.buckling_pressure > vacuum_relief.opening_pressure * 2\n        safety_factor: 2.0\n        constraint insulation_heat_loss:\n        where:\n        tank.insulated == true\n        must:\n        heat_loss_rate = thermal.conduction_rate(\n        tank.surface_area,\n        (tank_temperature - ambient_temperature),\n        insulation.thickness,\n        insulation.thermal_conductivity\n        )\n        standby_loss_percentage = heat_loss_rate / heater.input_rate\n        standby_loss_percentage < 0.03  # 3% maximum\n        safety_factor: 1.2\n        constraint relief_valve_capacity:\n        where:\n        relief_valve.installed == true\n        must:\n        steam_generation_rate = heater.input_rate / water.latent_heat_vaporization\n        valve_flow_capacity = flow.orifice_flow(\n        valve.orifice_area,\n        sqrt(2 * (relief_pressure - atmospheric_pressure) / fluid.density)\n        )\n        valve_flow_capacity > steam_generation_rate * 1.5\n        safety_factor: 1.5\n        constraint pan_volume_capacity:\n        where:\n        pan.installed == true\n        must:\n        pan_volume = pan.area * pan.depth\n        drain_time = pan_volume / drain_flow_rate\n        drain_flow_rate > max_expected_leak_rate * 1.5\n    must:\n        insulation.R_value >= 12.5  # (h \u00c3\u2014 ft\u00c2\u00b2 \u00c3\u2014 \u00c2\u00b0F)/Btu\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.505.1\"\n        constraint tank_temperature_stratification:\n        where:\n        water_heater.type == \"storage_tank\"\n        must:\n        temperature_gradient = thermal.buoyancy_stratification(\n        tank.height,\n        inlet_temperature,\n        setpoint_temperature\n        )\n        top_temperature = setpoint_temperature + temperature_gradient\n        relief_valve_temperature >= top_temperature * 0.95\n        safety_factor: 1.3\n        constraint thermal_expansion_pressure:\n        where:\n        system.has_backflow_preventer == true\n        system.closed == true\n        must:\n        volume_increase = water.volume * thermal.expansion_coefficient * temperature_rise\n        pressure_increase = volume_increase * water.bulk_modulus / system.volume\n        system.pressure_rating > operating_pressure + pressure_increase\n        safety_factor: 1.5\n        constraint vacuum_prevention:\n        where:\n        water_heater.bottom_fed == true\n        must:\n        max_siphon_height = atmospheric_pressure / (water.density * gravity)\n        vacuum_relief.opening_pressure < 0.5 * atmospheric_pressure\n        tank.buckling_pressure > vacuum_relief.opening_pressure * 2\n        safety_factor: 2.0\n        constraint insulation_heat_loss:\n        where:\n        tank.insulated == true\n        must:\n        heat_loss_rate = thermal.conduction_rate(\n        tank.surface_area,\n        (tank_temperature - ambient_temperature),\n        insulation.thickness,\n        insulation.thermal_conductivity\n        )\n        standby_loss_percentage = heat_loss_rate / heater.input_rate\n        standby_loss_percentage < 0.03  # 3% maximum\n        safety_factor: 1.2\n        constraint relief_valve_capacity:\n        where:\n        relief_valve.installed == true\n        must:\n        steam_generation_rate = heater.input_rate / water.latent_heat_vaporization\n        valve_flow_capacity = flow.orifice_flow(\n        valve.orifice_area,\n        sqrt(2 * (relief_pressure - atmospheric_pressure) / fluid.density)\n        )\n        valve_flow_capacity > steam_generation_rate * 1.5\n        safety_factor: 1.5\n        constraint pan_volume_capacity:\n        where:\n        pan.installed == true\n        must:\n        pan_volume = pan.area * pan.depth\n        drain_time = pan_volume / drain_flow_rate\n        drain_flow_rate > max_expected_leak_rate * 1.5\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.505.1\"", "rule_name": "unfired_vessel_insulation"}
{"type": "bcl_to_physics", "input": "rule unfired_vessel_insulation with constraints: R_value, opening_pressure", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.5.505.1", "rule_name": "unfired_vessel_insulation"}
{"type": "bcl_completion", "input": "rule unfired_vessel_insulation:\n    where:\n        storage_tank.type == \"hot_water\"\n    # Complete this rule", "output": "rule unfired_vessel_insulation:\n    where:\n        storage_tank.type == \"hot_water\"\n        storage_tank.unfired == true\n        must:\n        insulation.R_value >= 12.5  # (h \u00c3\u2014 ft\u00c2\u00b2 \u00c3\u2014 \u00c2\u00b0F)/Btu\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.505.1\"\n        constraint tank_temperature_stratification:\n        where:\n        water_heater.type == \"storage_tank\"\n        must:\n        temperature_gradient = thermal.buoyancy_stratification(\n        tank.height,\n        inlet_temperature,\n        setpoint_temperature\n        )\n        top_temperature = setpoint_temperature + temperature_gradient\n        relief_valve_temperature >= top_temperature * 0.95\n        safety_factor: 1.3\n        constraint thermal_expansion_pressure:\n        where:\n        system.has_backflow_preventer == true\n        system.closed == true\n        must:\n        volume_increase = water.volume * thermal.expansion_coefficient * temperature_rise\n        pressure_increase = volume_increase * water.bulk_modulus / system.volume\n        system.pressure_rating > operating_pressure + pressure_increase\n        safety_factor: 1.5\n        constraint vacuum_prevention:\n        where:\n        water_heater.bottom_fed == true\n        must:\n        max_siphon_height = atmospheric_pressure / (water.density * gravity)\n        vacuum_relief.opening_pressure < 0.5 * atmospheric_pressure\n        tank.buckling_pressure > vacuum_relief.opening_pressure * 2\n        safety_factor: 2.0\n        constraint insulation_heat_loss:\n        where:\n        tank.insulated == true\n        must:\n        heat_loss_rate = thermal.conduction_rate(\n        tank.surface_area,\n        (tank_temperature - ambient_temperature),\n        insulation.thickness,\n        insulation.thermal_conductivity\n        )\n        standby_loss_percentage = heat_loss_rate / heater.input_rate\n        standby_loss_percentage < 0.03  # 3% maximum\n        safety_factor: 1.2\n        constraint relief_valve_capacity:\n        where:\n        relief_valve.installed == true\n        must:\n        steam_generation_rate = heater.input_rate / water.latent_heat_vaporization\n        valve_flow_capacity = flow.orifice_flow(\n        valve.orifice_area,\n        sqrt(2 * (relief_pressure - atmospheric_pressure) / fluid.density)\n        )\n        valve_flow_capacity > steam_generation_rate * 1.5\n        safety_factor: 1.5\n        constraint pan_volume_capacity:\n        where:\n        pan.installed == true\n        must:\n        pan_volume = pan.area * pan.depth\n        drain_time = pan_volume / drain_flow_rate\n        drain_flow_rate > max_expected_leak_rate * 1.5\n    must:\n        insulation.R_value >= 12.5  # (h \u00c3\u2014 ft\u00c2\u00b2 \u00c3\u2014 \u00c2\u00b0F)/Btu\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.5.505.1\"\n        constraint tank_temperature_stratification:\n        where:\n        water_heater.type == \"storage_tank\"\n        must:\n        temperature_gradient = thermal.buoyancy_stratification(\n        tank.height,\n        inlet_temperature,\n        setpoint_temperature\n        )\n        top_temperature = setpoint_temperature + temperature_gradient\n        relief_valve_temperature >= top_temperature * 0.95\n        safety_factor: 1.3\n        constraint thermal_expansion_pressure:\n        where:\n        system.has_backflow_preventer == true\n        system.closed == true\n        must:\n        volume_increase = water.volume * thermal.expansion_coefficient * temperature_rise\n        pressure_increase = volume_increase * water.bulk_modulus / system.volume\n        system.pressure_rating > operating_pressure + pressure_increase\n        safety_factor: 1.5\n        constraint vacuum_prevention:\n        where:\n        water_heater.bottom_fed == true\n        must:\n        max_siphon_height = atmospheric_pressure / (water.density * gravity)\n        vacuum_relief.opening_pressure < 0.5 * atmospheric_pressure\n        tank.buckling_pressure > vacuum_relief.opening_pressure * 2\n        safety_factor: 2.0\n        constraint insulation_heat_loss:\n        where:\n        tank.insulated == true\n        must:\n        heat_loss_rate = thermal.conduction_rate(\n        tank.surface_area,\n        (tank_temperature - ambient_temperature),\n        insulation.thickness,\n        insulation.thermal_conductivity\n        )\n        standby_loss_percentage = heat_loss_rate / heater.input_rate\n        standby_loss_percentage < 0.03  # 3% maximum\n        safety_factor: 1.2\n        constraint relief_valve_capacity:\n        where:\n        relief_valve.installed == true\n        must:\n        steam_generation_rate = heater.input_rate / water.latent_heat_vaporization\n        valve_flow_capacity = flow.orifice_flow(\n        valve.orifice_area,\n        sqrt(2 * (relief_pressure - atmospheric_pressure) / fluid.density)\n        )\n        valve_flow_capacity > steam_generation_rate * 1.5\n        safety_factor: 1.5\n        constraint pan_volume_capacity:\n        where:\n        pan.installed == true\n        must:\n        pan_volume = pan.area * pan.depth\n        drain_time = pan_volume / drain_flow_rate\n        drain_flow_rate > max_expected_leak_rate * 1.5\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.5.505.1\"", "rule_name": "unfired_vessel_insulation"}
{"type": "safety_factor_reasoning", "input": "For unfired_vessel_insulation rule involving life safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.5.505.1.", "rule_name": "unfired_vessel_insulation", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for solar water heating protection: When system.type == \"solar_water_heating\" and system.heats == \"potable_water\", it is required that system.complies_with_code == true and cross_connection_protection.provided == true", "output": "rule solar_water_heating_protection:\n    where:\n        system.type == \"solar_water_heating\"\n        system.heats == \"potable_water\"\n        must:\n        system.complies_with_code == true\n        cross_connection_protection.provided == true\n        potable_water_protection.maintained == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.601.2\"\n    must:\n        system.complies_with_code == true\n        cross_connection_protection.provided == true\n        potable_water_protection.maintained == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.601.2\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.601.2\"", "rule_name": "solar_water_heating_protection"}
{"type": "bcl_to_physics", "input": "rule solar_water_heating_protection with conditions: system.complies_with_code == true, cross_connection_protection.provided == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.6.601.2", "rule_name": "solar_water_heating_protection"}
{"type": "bcl_completion", "input": "rule solar_water_heating_protection:\n    where:\n        system.type == \"solar_water_heating\"\n    # Complete this rule", "output": "rule solar_water_heating_protection:\n    where:\n        system.type == \"solar_water_heating\"\n        system.heats == \"potable_water\"\n        must:\n        system.complies_with_code == true\n        cross_connection_protection.provided == true\n        potable_water_protection.maintained == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.601.2\"\n    must:\n        system.complies_with_code == true\n        cross_connection_protection.provided == true\n        potable_water_protection.maintained == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.601.2\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.601.2\"", "rule_name": "solar_water_heating_protection"}
{"type": "safety_factor_reasoning", "input": "For solar_water_heating_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.601.2.", "rule_name": "solar_water_heating_protection", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for grounding pipe replacement: When water_service.material == \"metallic\" and water_service.used_for == \"electrical_grounding\", it is required that if replacement.material == \"nonmetallic\": and alternate_grounding.approved == true", "output": "rule grounding_pipe_replacement:\n    where:\n        water_service.material == \"metallic\"\n        water_service.used_for == \"electrical_grounding\"\n        must:\n        if replacement.material == \"nonmetallic\":\n        alternate_grounding.approved == true\n        alternate_grounding.provided_first == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.601.3\"\n    must:\n        if replacement.material == \"nonmetallic\":\n        alternate_grounding.approved == true\n        alternate_grounding.provided_first == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.601.3\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.6.601.3\"", "rule_name": "grounding_pipe_replacement"}
{"type": "bcl_to_physics", "input": "rule grounding_pipe_replacement with conditions: if replacement.material == \"nonmetallic\":, alternate_grounding.approved == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.6.601.3", "rule_name": "grounding_pipe_replacement"}
{"type": "bcl_completion", "input": "rule grounding_pipe_replacement:\n    where:\n        water_service.material == \"metallic\"\n    # Complete this rule", "output": "rule grounding_pipe_replacement:\n    where:\n        water_service.material == \"metallic\"\n        water_service.used_for == \"electrical_grounding\"\n        must:\n        if replacement.material == \"nonmetallic\":\n        alternate_grounding.approved == true\n        alternate_grounding.provided_first == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.601.3\"\n    must:\n        if replacement.material == \"nonmetallic\":\n        alternate_grounding.approved == true\n        alternate_grounding.provided_first == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.601.3\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.6.601.3\"", "rule_name": "grounding_pipe_replacement"}
{"type": "safety_factor_reasoning", "input": "For grounding_pipe_replacement rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.601.3.", "rule_name": "grounding_pipe_replacement", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for epoxy lining rehabilitation: When piping_system.rehabilitation == \"epoxy_lining\" and piping_system.type == \"pressure\", it is required that lining_system.conforms_to == \"ASTM_F2831\" and safety_factor: 1.3", "output": "rule epoxy_lining_rehabilitation:\n    where:\n        piping_system.rehabilitation == \"epoxy_lining\"\n        piping_system.type == \"pressure\"\n        must:\n        lining_system.conforms_to == \"ASTM_F2831\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.601.5\"\n    must:\n        lining_system.conforms_to == \"ASTM_F2831\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.601.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.6.601.5\"", "rule_name": "epoxy_lining_rehabilitation"}
{"type": "bcl_to_physics", "input": "rule epoxy_lining_rehabilitation with conditions: lining_system.conforms_to == \"ASTM_F2831\", safety_factor: 1.3", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.6.601.5", "rule_name": "epoxy_lining_rehabilitation"}
{"type": "bcl_completion", "input": "rule epoxy_lining_rehabilitation:\n    where:\n        piping_system.rehabilitation == \"epoxy_lining\"\n    # Complete this rule", "output": "rule epoxy_lining_rehabilitation:\n    where:\n        piping_system.rehabilitation == \"epoxy_lining\"\n        piping_system.type == \"pressure\"\n        must:\n        lining_system.conforms_to == \"ASTM_F2831\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.601.5\"\n    must:\n        lining_system.conforms_to == \"ASTM_F2831\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.601.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.6.601.5\"", "rule_name": "epoxy_lining_rehabilitation"}
{"type": "safety_factor_reasoning", "input": "For epoxy_lining_rehabilitation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.6.601.5.", "rule_name": "epoxy_lining_rehabilitation", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for potable water supply required: When structure.has_plumbing_fixtures == true and structure.used_for IN [\"human_occupancy\", \"human_habitation\"], it is required that water_supply.type == \"potable\" and water_supply.quantity >= required_amounts", "output": "rule potable_water_supply_required:\n    where:\n        structure.has_plumbing_fixtures == true\n        structure.used_for IN [\"human_occupancy\", \"human_habitation\"]\n        must:\n        water_supply.type == \"potable\"\n        water_supply.quantity >= required_amounts\n        water_supply.pressure >= required_pressure\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.6.602.1\"\n    must:\n        water_supply.type == \"potable\"\n        water_supply.quantity >= required_amounts\n        water_supply.pressure >= required_pressure\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.6.602.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.6.602.1\"", "rule_name": "potable_water_supply_required"}
{"type": "bcl_to_physics", "input": "rule potable_water_supply_required with conditions: water_supply.type == \"potable\", water_supply.quantity >= required_amounts", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.6.602.1", "rule_name": "potable_water_supply_required"}
{"type": "bcl_completion", "input": "rule potable_water_supply_required:\n    where:\n        structure.has_plumbing_fixtures == true\n    # Complete this rule", "output": "rule potable_water_supply_required:\n    where:\n        structure.has_plumbing_fixtures == true\n        structure.used_for IN [\"human_occupancy\", \"human_habitation\"]\n        must:\n        water_supply.type == \"potable\"\n        water_supply.quantity >= required_amounts\n        water_supply.pressure >= required_pressure\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.6.602.1\"\n    must:\n        water_supply.type == \"potable\"\n        water_supply.quantity >= required_amounts\n        water_supply.pressure >= required_pressure\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.6.602.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.6.602.1\"", "rule_name": "potable_water_supply_required"}
{"type": "safety_factor_reasoning", "input": "For potable_water_supply_required rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.6.602.1.", "rule_name": "potable_water_supply_required", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for potable water uses: When fixture.provides_water_for IN [ and \"drinking\",, it is required that water_supply.type == \"potable\" and safety_factor: 2.0", "output": "rule potable_water_uses:\n    where:\n        fixture.provides_water_for IN [\n        \"drinking\",\n        \"bathing\",\n        \"culinary\",\n        \"food_processing\",\n        \"medical_products\",\n        \"pharmaceutical_products\"\n        ]\n        must:\n        water_supply.type == \"potable\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.2\"\n    must:\n        water_supply.type == \"potable\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.6.602.2\"", "rule_name": "potable_water_uses"}
{"type": "bcl_to_physics", "input": "rule potable_water_uses with conditions: water_supply.type == \"potable\", safety_factor: 2.0", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.6.602.2", "rule_name": "potable_water_uses"}
{"type": "bcl_completion", "input": "rule potable_water_uses:\n    where:\n        fixture.provides_water_for IN [\n    # Complete this rule", "output": "rule potable_water_uses:\n    where:\n        fixture.provides_water_for IN [\n        \"drinking\",\n        \"bathing\",\n        \"culinary\",\n        \"food_processing\",\n        \"medical_products\",\n        \"pharmaceutical_products\"\n        ]\n        must:\n        water_supply.type == \"potable\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.2\"\n    must:\n        water_supply.type == \"potable\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.6.602.2\"", "rule_name": "potable_water_uses"}
{"type": "safety_factor_reasoning", "input": "For potable_water_uses rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.602.2.", "rule_name": "potable_water_uses", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for individual water source types: When water_supply.type == \"individual\" and public_water.available == false, it is required that water_source.type IN [ and \"drilled_well\",", "output": "rule individual_water_source_types:\n    where:\n        water_supply.type == \"individual\"\n        public_water.available == false\n        must:\n        water_source.type IN [\n        \"drilled_well\",\n        \"driven_well\",\n        \"dug_well\",\n        \"bored_well\",\n        \"spring\",\n        \"stream\",\n        \"cistern\"\n        ]\n        if water_source.type IN [\"surface_water\", \"land_cistern\"]:\n        treatment.approved == true\n        treatment.prevents_contamination == true\n        water_source.complies_with == \"Florida_Statute_373\"\n        water_source.complies_with == \"NGWA-01\"  # For items not in state/local laws\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.1\"\n    must:\n        water_source.type IN [\n        \"drilled_well\",\n        \"driven_well\",\n        \"dug_well\",\n        \"bored_well\",\n        \"spring\",\n        \"stream\",\n        \"cistern\"\n        ]\n        if water_source.type IN [\"surface_water\", \"land_cistern\"]:\n        treatment.approved == true\n        treatment.prevents_contamination == true\n        water_source.complies_with == \"Florida_Statute_373\"\n        water_source.complies_with == \"NGWA-01\"  # For items not in state/local laws\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.602.3.1\"", "rule_name": "individual_water_source_types"}
{"type": "bcl_to_physics", "input": "rule individual_water_source_types with conditions: water_source.type IN [, \"drilled_well\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.6.602.3.1", "rule_name": "individual_water_source_types"}
{"type": "bcl_completion", "input": "rule individual_water_source_types:\n    where:\n        water_supply.type == \"individual\"\n    # Complete this rule", "output": "rule individual_water_source_types:\n    where:\n        water_supply.type == \"individual\"\n        public_water.available == false\n        must:\n        water_source.type IN [\n        \"drilled_well\",\n        \"driven_well\",\n        \"dug_well\",\n        \"bored_well\",\n        \"spring\",\n        \"stream\",\n        \"cistern\"\n        ]\n        if water_source.type IN [\"surface_water\", \"land_cistern\"]:\n        treatment.approved == true\n        treatment.prevents_contamination == true\n        water_source.complies_with == \"Florida_Statute_373\"\n        water_source.complies_with == \"NGWA-01\"  # For items not in state/local laws\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.1\"\n    must:\n        water_source.type IN [\n        \"drilled_well\",\n        \"driven_well\",\n        \"dug_well\",\n        \"bored_well\",\n        \"spring\",\n        \"stream\",\n        \"cistern\"\n        ]\n        if water_source.type IN [\"surface_water\", \"land_cistern\"]:\n        treatment.approved == true\n        treatment.prevents_contamination == true\n        water_source.complies_with == \"Florida_Statute_373\"\n        water_source.complies_with == \"NGWA-01\"  # For items not in state/local laws\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.602.3.1\"", "rule_name": "individual_water_source_types"}
{"type": "safety_factor_reasoning", "input": "For individual_water_source_types rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.602.3.1.", "rule_name": "individual_water_source_types", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for individual supply capacity: When water_supply.type == \"individual\" and must:, it is required that combined_capacity >= required_flow_rates and combined_capacity >= required_pressures", "output": "rule individual_supply_capacity:\n    where:\n        water_supply.type == \"individual\"\n        must:\n        combined_capacity >= required_flow_rates\n        combined_capacity >= required_pressures\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.2\"\n    must:\n        combined_capacity >= required_flow_rates\n        combined_capacity >= required_pressures\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.6.602.3.2\"", "rule_name": "individual_supply_capacity"}
{"type": "bcl_to_physics", "input": "rule individual_supply_capacity with conditions: combined_capacity >= required_flow_rates, combined_capacity >= required_pressures", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.6.602.3.2", "rule_name": "individual_supply_capacity"}
{"type": "bcl_completion", "input": "rule individual_supply_capacity:\n    where:\n        water_supply.type == \"individual\"\n    # Complete this rule", "output": "rule individual_supply_capacity:\n    where:\n        water_supply.type == \"individual\"\n        must:\n        combined_capacity >= required_flow_rates\n        combined_capacity >= required_pressures\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.2\"\n    must:\n        combined_capacity >= required_flow_rates\n        combined_capacity >= required_pressures\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.6.602.3.2\"", "rule_name": "individual_supply_capacity"}
{"type": "safety_factor_reasoning", "input": "For individual_supply_capacity rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.6.602.3.2.", "rule_name": "individual_supply_capacity", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for water quality approval: When water_supply.type == \"individual\" and must:, it is required that water_quality.approved_as_potable == true and approval.by == \"authority_having_jurisdiction\"", "output": "rule water_quality_approval:\n    where:\n        water_supply.type == \"individual\"\n        must:\n        water_quality.approved_as_potable == true\n        approval.by == \"authority_having_jurisdiction\"\n        approval.before_connection == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.3.3\"\n    must:\n        water_quality.approved_as_potable == true\n        approval.by == \"authority_having_jurisdiction\"\n        approval.before_connection == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.3.3\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.6.602.3.3\"", "rule_name": "water_quality_approval"}
{"type": "bcl_to_physics", "input": "rule water_quality_approval with conditions: water_quality.approved_as_potable == true, approval.by == \"authority_having_jurisdiction\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.6.602.3.3", "rule_name": "water_quality_approval"}
{"type": "bcl_completion", "input": "rule water_quality_approval:\n    where:\n        water_supply.type == \"individual\"\n    # Complete this rule", "output": "rule water_quality_approval:\n    where:\n        water_supply.type == \"individual\"\n        must:\n        water_quality.approved_as_potable == true\n        approval.by == \"authority_having_jurisdiction\"\n        approval.before_connection == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.3.3\"\n    must:\n        water_quality.approved_as_potable == true\n        approval.by == \"authority_having_jurisdiction\"\n        approval.before_connection == true\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.6.602.3.3\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.6.602.3.3\"", "rule_name": "water_quality_approval"}
{"type": "safety_factor_reasoning", "input": "For water_quality_approval rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.602.3.3.", "rule_name": "water_quality_approval", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for pump requirements: When water_supply.has_pump == true and water_supply.type == \"individual\", it is required that pump.rated_for == \"potable_water\" and pump.prevents_contamination == true", "output": "rule pump_requirements:\n    where:\n        water_supply.has_pump == true\n        water_supply.type == \"individual\"\n        must:\n        pump.rated_for == \"potable_water\"\n        pump.prevents_contamination == true\n        pump.conforms_to == \"NSF_61\"  # For drinking water\n        pump.sealed_to IN [\"well_casing\", \"watertight_cover\"]\n        pump.maintains_prime == true\n        pump.parts_accessible == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.5\"\n    must:\n        pump.rated_for == \"potable_water\"\n        pump.prevents_contamination == true\n        pump.conforms_to == \"NSF_61\"  # For drinking water\n        pump.sealed_to IN [\"well_casing\", \"watertight_cover\"]\n        pump.maintains_prime == true\n        pump.parts_accessible == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.602.3.5\"", "rule_name": "pump_requirements"}
{"type": "bcl_to_physics", "input": "rule pump_requirements with conditions: pump.rated_for == \"potable_water\", pump.prevents_contamination == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.6.602.3.5", "rule_name": "pump_requirements"}
{"type": "bcl_completion", "input": "rule pump_requirements:\n    where:\n        water_supply.has_pump == true\n    # Complete this rule", "output": "rule pump_requirements:\n    where:\n        water_supply.has_pump == true\n        water_supply.type == \"individual\"\n        must:\n        pump.rated_for == \"potable_water\"\n        pump.prevents_contamination == true\n        pump.conforms_to == \"NSF_61\"  # For drinking water\n        pump.sealed_to IN [\"well_casing\", \"watertight_cover\"]\n        pump.maintains_prime == true\n        pump.parts_accessible == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.5\"\n    must:\n        pump.rated_for == \"potable_water\"\n        pump.prevents_contamination == true\n        pump.conforms_to == \"NSF_61\"  # For drinking water\n        pump.sealed_to IN [\"well_casing\", \"watertight_cover\"]\n        pump.maintains_prime == true\n        pump.parts_accessible == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.3.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.602.3.5\"", "rule_name": "pump_requirements"}
{"type": "safety_factor_reasoning", "input": "For pump_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.602.3.5.", "rule_name": "pump_requirements", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for pump enclosure protection: When pump.location == \"enclosed\" and pump.serves == \"well\", it is required that enclosure.drained == true and enclosure.freeze_protected == true", "output": "rule pump_enclosure_protection:\n    where:\n        pump.location == \"enclosed\"\n        pump.serves == \"well\"\n        must:\n        enclosure.drained == true\n        enclosure.freeze_protected == true\n        if pump.location == \"basement\":\n        pump.mounting_height >= 18.inches  # Above floor\n        pump.on IN [\"block\", \"shelf\"]\n        well_pit.allowed == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.5.1\"\n    must:\n        enclosure.drained == true\n        enclosure.freeze_protected == true\n        if pump.location == \"basement\":\n        pump.mounting_height >= 18.inches  # Above floor\n        pump.on IN [\"block\", \"shelf\"]\n        well_pit.allowed == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.5.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.6.602.3.5.1\"", "rule_name": "pump_enclosure_protection"}
{"type": "bcl_to_physics", "input": "rule pump_enclosure_protection with constraints: mounting_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.6.602.3.5.1", "rule_name": "pump_enclosure_protection"}
{"type": "bcl_completion", "input": "rule pump_enclosure_protection:\n    where:\n        pump.location == \"enclosed\"\n    # Complete this rule", "output": "rule pump_enclosure_protection:\n    where:\n        pump.location == \"enclosed\"\n        pump.serves == \"well\"\n        must:\n        enclosure.drained == true\n        enclosure.freeze_protected == true\n        if pump.location == \"basement\":\n        pump.mounting_height >= 18.inches  # Above floor\n        pump.on IN [\"block\", \"shelf\"]\n        well_pit.allowed == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.5.1\"\n    must:\n        enclosure.drained == true\n        enclosure.freeze_protected == true\n        if pump.location == \"basement\":\n        pump.mounting_height >= 18.inches  # Above floor\n        pump.on IN [\"block\", \"shelf\"]\n        well_pit.allowed == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.6.602.3.5.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.6.602.3.5.1\"", "rule_name": "pump_enclosure_protection"}
{"type": "safety_factor_reasoning", "input": "For pump_enclosure_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.6.602.3.5.1.", "rule_name": "pump_enclosure_protection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for reclaimed water use: When water.type == \"reclaimed\" and must:, it is required that approved_uses IN [ and \"water_closet_flushing\",", "output": "rule reclaimed_water_use:\n    where:\n        water.type == \"reclaimed\"\n        must:\n        approved_uses IN [\n        \"water_closet_flushing\",\n        \"urinal_flushing\",\n        \"non_potable_fixtures\"\n        ]\n        compliance.with == \"Florida_DEP_requirements\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.4\"\n        constraint pump_suction_limit:\n        where:\n        pump.type == \"suction_pump\"\n        well.type IN [\"shallow_well\", \"driven_well\"]\n        must:\n        max_lift = (atmospheric_pressure - vapor_pressure) / (water.density * gravity)\n        actual_lift < max_lift * 0.7  # 70% for friction and NPSH\n        actual_lift <= 25.feet\n        safety_factor: 1.5\n        constraint water_system_pressure:\n        where:\n        system.type == \"individual_water_supply\"\n        must:\n        fixture_pressure = pump_pressure - elevation_loss - friction_loss\n        elevation_loss = water.density * gravity * elevation_difference\n        friction_loss = flow.darcy_weisbach_loss(pipe_length, pipe_diameter, flow_rate)\n        fixture_pressure >= 20.psi  # Typical minimum\n        fixture_pressure <= 80.psi  # Typical maximum\n        safety_factor: 1.3\n        constraint storage_capacity_requirement:\n        where:\n        water_supply.has_storage_tank == true\n        must:\n        peak_demand = fixture_units * flow_rate_per_unit * peak_factor\n        storage_volume >= peak_demand * peak_duration\n        source_flow_rate + storage_volume / refill_time >= average_demand\n        safety_factor: 1.5\n    must:\n        approved_uses IN [\n        \"water_closet_flushing\",\n        \"urinal_flushing\",\n        \"non_potable_fixtures\"\n        ]\n        compliance.with == \"Florida_DEP_requirements\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.4\"\n        constraint pump_suction_limit:\n        where:\n        pump.type == \"suction_pump\"\n        well.type IN [\"shallow_well\", \"driven_well\"]\n        must:\n        max_lift = (atmospheric_pressure - vapor_pressure) / (water.density * gravity)\n        actual_lift < max_lift * 0.7  # 70% for friction and NPSH\n        actual_lift <= 25.feet\n        safety_factor: 1.5\n        constraint water_system_pressure:\n        where:\n        system.type == \"individual_water_supply\"\n        must:\n        fixture_pressure = pump_pressure - elevation_loss - friction_loss\n        elevation_loss = water.density * gravity * elevation_difference\n        friction_loss = flow.darcy_weisbach_loss(pipe_length, pipe_diameter, flow_rate)\n        fixture_pressure >= 20.psi  # Typical minimum\n        fixture_pressure <= 80.psi  # Typical maximum\n        safety_factor: 1.3\n        constraint storage_capacity_requirement:\n        where:\n        water_supply.has_storage_tank == true\n        must:\n        peak_demand = fixture_units * flow_rate_per_unit * peak_factor\n        storage_volume >= peak_demand * peak_duration\n        source_flow_rate + storage_volume / refill_time >= average_demand\n        safety_factor: 1.5\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.602.4\"", "rule_name": "reclaimed_water_use"}
{"type": "bcl_to_physics", "input": "rule reclaimed_water_use with constraints: actual_lift, fixture_pressure", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.6.602.4", "rule_name": "reclaimed_water_use"}
{"type": "bcl_completion", "input": "rule reclaimed_water_use:\n    where:\n        water.type == \"reclaimed\"\n    # Complete this rule", "output": "rule reclaimed_water_use:\n    where:\n        water.type == \"reclaimed\"\n        must:\n        approved_uses IN [\n        \"water_closet_flushing\",\n        \"urinal_flushing\",\n        \"non_potable_fixtures\"\n        ]\n        compliance.with == \"Florida_DEP_requirements\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.4\"\n        constraint pump_suction_limit:\n        where:\n        pump.type == \"suction_pump\"\n        well.type IN [\"shallow_well\", \"driven_well\"]\n        must:\n        max_lift = (atmospheric_pressure - vapor_pressure) / (water.density * gravity)\n        actual_lift < max_lift * 0.7  # 70% for friction and NPSH\n        actual_lift <= 25.feet\n        safety_factor: 1.5\n        constraint water_system_pressure:\n        where:\n        system.type == \"individual_water_supply\"\n        must:\n        fixture_pressure = pump_pressure - elevation_loss - friction_loss\n        elevation_loss = water.density * gravity * elevation_difference\n        friction_loss = flow.darcy_weisbach_loss(pipe_length, pipe_diameter, flow_rate)\n        fixture_pressure >= 20.psi  # Typical minimum\n        fixture_pressure <= 80.psi  # Typical maximum\n        safety_factor: 1.3\n        constraint storage_capacity_requirement:\n        where:\n        water_supply.has_storage_tank == true\n        must:\n        peak_demand = fixture_units * flow_rate_per_unit * peak_factor\n        storage_volume >= peak_demand * peak_duration\n        source_flow_rate + storage_volume / refill_time >= average_demand\n        safety_factor: 1.5\n    must:\n        approved_uses IN [\n        \"water_closet_flushing\",\n        \"urinal_flushing\",\n        \"non_potable_fixtures\"\n        ]\n        compliance.with == \"Florida_DEP_requirements\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.6.602.4\"\n        constraint pump_suction_limit:\n        where:\n        pump.type == \"suction_pump\"\n        well.type IN [\"shallow_well\", \"driven_well\"]\n        must:\n        max_lift = (atmospheric_pressure - vapor_pressure) / (water.density * gravity)\n        actual_lift < max_lift * 0.7  # 70% for friction and NPSH\n        actual_lift <= 25.feet\n        safety_factor: 1.5\n        constraint water_system_pressure:\n        where:\n        system.type == \"individual_water_supply\"\n        must:\n        fixture_pressure = pump_pressure - elevation_loss - friction_loss\n        elevation_loss = water.density * gravity * elevation_difference\n        friction_loss = flow.darcy_weisbach_loss(pipe_length, pipe_diameter, flow_rate)\n        fixture_pressure >= 20.psi  # Typical minimum\n        fixture_pressure <= 80.psi  # Typical maximum\n        safety_factor: 1.3\n        constraint storage_capacity_requirement:\n        where:\n        water_supply.has_storage_tank == true\n        must:\n        peak_demand = fixture_units * flow_rate_per_unit * peak_factor\n        storage_volume >= peak_demand * peak_duration\n        source_flow_rate + storage_volume / refill_time >= average_demand\n        safety_factor: 1.5\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.6.602.4\"", "rule_name": "reclaimed_water_use"}
{"type": "safety_factor_reasoning", "input": "For reclaimed_water_use rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.6.602.4.", "rule_name": "reclaimed_water_use", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for food handling equipment indirect waste: When equipment.type IN [\"food_handling\", \"food_storage\", \"food_preparation\"] and location.type != \"dwelling_unit\", it is required that waste_connection.type == \"indirect\" and waste_connection.method == \"air_gap\"", "output": "rule food_handling_equipment_indirect_waste:\n    where:\n        equipment.type IN [\"food_handling\", \"food_storage\", \"food_preparation\"]\n        location.type != \"dwelling_unit\"\n        must:\n        waste_connection.type == \"indirect\"\n        waste_connection.method == \"air_gap\"\n        for compartment in equipment.compartments:\n        compartment.discharge.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1.1\"\n    must:\n        waste_connection.type == \"indirect\"\n        waste_connection.method == \"air_gap\"\n        for compartment in equipment.compartments:\n        compartment.discharge.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.802.1.1\"", "rule_name": "food_handling_equipment_indirect_waste"}
{"type": "bcl_to_physics", "input": "rule food_handling_equipment_indirect_waste with conditions: waste_connection.type == \"indirect\", waste_connection.method == \"air_gap\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1.1", "rule_name": "food_handling_equipment_indirect_waste"}
{"type": "bcl_completion", "input": "rule food_handling_equipment_indirect_waste:\n    where:\n        equipment.type IN [\"food_handling\", \"food_storage\", \"food_preparation\"]\n    # Complete this rule", "output": "rule food_handling_equipment_indirect_waste:\n    where:\n        equipment.type IN [\"food_handling\", \"food_storage\", \"food_preparation\"]\n        location.type != \"dwelling_unit\"\n        must:\n        waste_connection.type == \"indirect\"\n        waste_connection.method == \"air_gap\"\n        for compartment in equipment.compartments:\n        compartment.discharge.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1.1\"\n    must:\n        waste_connection.type == \"indirect\"\n        waste_connection.method == \"air_gap\"\n        for compartment in equipment.compartments:\n        compartment.discharge.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.802.1.1\"", "rule_name": "food_handling_equipment_indirect_waste"}
{"type": "safety_factor_reasoning", "input": "For food_handling_equipment_indirect_waste rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.8.802.1.1.", "rule_name": "food_handling_equipment_indirect_waste", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for floor drains in coolers: When floor_drain.location IN [\"walk_in_refrigerator\", \"walk_in_freezer\"] and location.type IN [\"food_service\", \"food_establishment\"], it is required that connection.type == \"indirect\" and connection.method == \"air_gap\"", "output": "rule floor_drains_in_coolers:\n    where:\n        floor_drain.location IN [\"walk_in_refrigerator\", \"walk_in_freezer\"]\n        location.type IN [\"food_service\", \"food_establishment\"]\n        must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        if location.temperature < 32.fahrenheit:\n        waste_line.trapped == false\n        receptor.location.temperature >= 32.fahrenheit\n        should:\n        if backwater_valve.installed == true:\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.2\"\n    must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        if location.temperature < 32.fahrenheit:\n        waste_line.trapped == false\n        receptor.location.temperature >= 32.fahrenheit\n        should:\n        if backwater_valve.installed == true:\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.1.2\"", "rule_name": "floor_drains_in_coolers"}
{"type": "bcl_to_physics", "input": "rule floor_drains_in_coolers with constraints: temperature, temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.8.802.1.2", "rule_name": "floor_drains_in_coolers"}
{"type": "bcl_completion", "input": "rule floor_drains_in_coolers:\n    where:\n        floor_drain.location IN [\"walk_in_refrigerator\", \"walk_in_freezer\"]\n    # Complete this rule", "output": "rule floor_drains_in_coolers:\n    where:\n        floor_drain.location IN [\"walk_in_refrigerator\", \"walk_in_freezer\"]\n        location.type IN [\"food_service\", \"food_establishment\"]\n        must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        if location.temperature < 32.fahrenheit:\n        waste_line.trapped == false\n        receptor.location.temperature >= 32.fahrenheit\n        should:\n        if backwater_valve.installed == true:\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.2\"\n    must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        if location.temperature < 32.fahrenheit:\n        waste_line.trapped == false\n        receptor.location.temperature >= 32.fahrenheit\n        should:\n        if backwater_valve.installed == true:\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.2\"\n    should:\n        if backwater_valve.installed == true:\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.1.2\"", "rule_name": "floor_drains_in_coolers"}
{"type": "safety_factor_reasoning", "input": "For floor_drains_in_coolers rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.8.802.1.2.", "rule_name": "floor_drains_in_coolers", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for potable clear water waste: When device.type IN [\"sterilizer\", \"relief_valve\"] and discharge.water_type == \"potable\", it is required that connection.type == \"indirect\" and connection.method == \"air_gap\"", "output": "rule potable_clear_water_waste:\n    where:\n        device.type IN [\"sterilizer\", \"relief_valve\"]\n        discharge.water_type == \"potable\"\n        must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.3\"\n    must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1.3\"", "rule_name": "potable_clear_water_waste"}
{"type": "bcl_to_physics", "input": "rule potable_clear_water_waste with conditions: connection.type == \"indirect\", connection.method == \"air_gap\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1.3", "rule_name": "potable_clear_water_waste"}
{"type": "bcl_completion", "input": "rule potable_clear_water_waste:\n    where:\n        device.type IN [\"sterilizer\", \"relief_valve\"]\n    # Complete this rule", "output": "rule potable_clear_water_waste:\n    where:\n        device.type IN [\"sterilizer\", \"relief_valve\"]\n        discharge.water_type == \"potable\"\n        must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.3\"\n    must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1.3\"", "rule_name": "potable_clear_water_waste"}
{"type": "safety_factor_reasoning", "input": "For potable_clear_water_waste rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.1.3.", "rule_name": "potable_clear_water_waste", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for swimming pool discharge: When source.type IN [\"swimming_pool\", \"filter_backwash\", \"pool_deck_drain\"] and must:, it is required that connection.type == \"indirect\" and connection.method == \"air_gap\"", "output": "rule swimming_pool_discharge:\n    where:\n        source.type IN [\"swimming_pool\", \"filter_backwash\", \"pool_deck_drain\"]\n        must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.4\"\n    must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1.4\"", "rule_name": "swimming_pool_discharge"}
{"type": "bcl_to_physics", "input": "rule swimming_pool_discharge with conditions: connection.type == \"indirect\", connection.method == \"air_gap\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1.4", "rule_name": "swimming_pool_discharge"}
{"type": "bcl_completion", "input": "rule swimming_pool_discharge:\n    where:\n        source.type IN [\"swimming_pool\", \"filter_backwash\", \"pool_deck_drain\"]\n    # Complete this rule", "output": "rule swimming_pool_discharge:\n    where:\n        source.type IN [\"swimming_pool\", \"filter_backwash\", \"pool_deck_drain\"]\n        must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.4\"\n    must:\n        connection.type == \"indirect\"\n        connection.method == \"air_gap\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1.4\"", "rule_name": "swimming_pool_discharge"}
{"type": "safety_factor_reasoning", "input": "For swimming_pool_discharge rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.1.4.", "rule_name": "swimming_pool_discharge", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for nonpotable clear water waste: When device.type IN [\"process_tank\", \"filter\", \"drip\", \"boiler\"] and discharge.water_type == \"nonpotable\", it is required that connection.type == \"indirect\" and connection.method IN [\"air_break\", \"air_gap\"]", "output": "rule nonpotable_clear_water_waste:\n    where:\n        device.type IN [\"process_tank\", \"filter\", \"drip\", \"boiler\"]\n        discharge.water_type == \"nonpotable\"\n        must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.5\"\n    must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1.5\"", "rule_name": "nonpotable_clear_water_waste"}
{"type": "bcl_to_physics", "input": "rule nonpotable_clear_water_waste with conditions: connection.type == \"indirect\", connection.method IN [\"air_break\", \"air_gap\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1.5", "rule_name": "nonpotable_clear_water_waste"}
{"type": "bcl_completion", "input": "rule nonpotable_clear_water_waste:\n    where:\n        device.type IN [\"process_tank\", \"filter\", \"drip\", \"boiler\"]\n    # Complete this rule", "output": "rule nonpotable_clear_water_waste:\n    where:\n        device.type IN [\"process_tank\", \"filter\", \"drip\", \"boiler\"]\n        discharge.water_type == \"nonpotable\"\n        must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.5\"\n    must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_break\", \"air_gap\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1.5\"", "rule_name": "nonpotable_clear_water_waste"}
{"type": "safety_factor_reasoning", "input": "For nonpotable_clear_water_waste rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.1.5.", "rule_name": "nonpotable_clear_water_waste", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for commercial dishwasher discharge: When equipment.type == \"commercial_dishwashing_machine\" and must:, it is required that connection.type == \"indirect\" and connection.method IN [\"air_gap\", \"air_break\"]", "output": "rule commercial_dishwasher_discharge:\n    where:\n        equipment.type == \"commercial_dishwashing_machine\"\n        must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        discharge_to.type == \"waste_receptor\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.6\"\n    must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        discharge_to.type == \"waste_receptor\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.1.6\"", "rule_name": "commercial_dishwasher_discharge"}
{"type": "bcl_to_physics", "input": "rule commercial_dishwasher_discharge with conditions: connection.type == \"indirect\", connection.method IN [\"air_gap\", \"air_break\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1.6", "rule_name": "commercial_dishwasher_discharge"}
{"type": "bcl_completion", "input": "rule commercial_dishwasher_discharge:\n    where:\n        equipment.type == \"commercial_dishwashing_machine\"\n    # Complete this rule", "output": "rule commercial_dishwasher_discharge:\n    where:\n        equipment.type == \"commercial_dishwashing_machine\"\n        must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        discharge_to.type == \"waste_receptor\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.6\"\n    must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        discharge_to.type == \"waste_receptor\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.1.6\"", "rule_name": "commercial_dishwasher_discharge"}
{"type": "safety_factor_reasoning", "input": "For commercial_dishwasher_discharge rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.8.802.1.6.", "rule_name": "commercial_dishwasher_discharge", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for food service sinks: When sink.use IN [\"utensil_washing\", \"dish_washing\", \"pot_washing\", \"pan_washing\"] and location.type != \"dwelling_unit\", it is required that connection.type == \"indirect\" and connection.method IN [\"air_gap\", \"air_break\"]", "output": "rule food_service_sinks:\n    where:\n        sink.use IN [\"utensil_washing\", \"dish_washing\", \"pot_washing\", \"pan_washing\"]\n        location.type != \"dwelling_unit\"\n        must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.7\"\n    must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.7\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.1.7\"", "rule_name": "food_service_sinks"}
{"type": "bcl_to_physics", "input": "rule food_service_sinks with conditions: connection.type == \"indirect\", connection.method IN [\"air_gap\", \"air_break\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1.7", "rule_name": "food_service_sinks"}
{"type": "bcl_completion", "input": "rule food_service_sinks:\n    where:\n        sink.use IN [\"utensil_washing\", \"dish_washing\", \"pot_washing\", \"pan_washing\"]\n    # Complete this rule", "output": "rule food_service_sinks:\n    where:\n        sink.use IN [\"utensil_washing\", \"dish_washing\", \"pot_washing\", \"pan_washing\"]\n        location.type != \"dwelling_unit\"\n        must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.7\"\n    must:\n        connection.type == \"indirect\"\n        connection.method IN [\"air_gap\", \"air_break\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.1.7\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.1.7\"", "rule_name": "food_service_sinks"}
{"type": "safety_factor_reasoning", "input": "For food_service_sinks rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.8.802.1.7.", "rule_name": "food_service_sinks", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for indirect waste pipe installation: When pipe.type == \"indirect_waste\" and must:, it is required that discharge.method IN [\"air_gap\", \"air_break\"] and discharge.to == \"waste_receptor\"", "output": "rule indirect_waste_pipe_installation:\n    where:\n        pipe.type == \"indirect_waste\"\n        must:\n        discharge.method IN [\"air_gap\", \"air_break\"]\n        discharge.to == \"waste_receptor\"\n        waste_receptor.trapped == true\n        waste_receptor.vented == true\n        if pipe.horizontal_length > 30.inches OR pipe.total_length > 54.inches:\n        pipe.trapped == true\n        should:\n        if receptor.receives_only == \"clear_water\" AND receptor.connects_to != \"sanitary_drainage\":\n        receptor.trap_required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3\"\n    must:\n        discharge.method IN [\"air_gap\", \"air_break\"]\n        discharge.to == \"waste_receptor\"\n        waste_receptor.trapped == true\n        waste_receptor.vented == true\n        if pipe.horizontal_length > 30.inches OR pipe.total_length > 54.inches:\n        pipe.trapped == true\n        should:\n        if receptor.receives_only == \"clear_water\" AND receptor.connects_to != \"sanitary_drainage\":\n        receptor.trap_required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.3\"", "rule_name": "indirect_waste_pipe_installation"}
{"type": "bcl_to_physics", "input": "rule indirect_waste_pipe_installation with constraints: horizontal_length, total_length", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.3", "rule_name": "indirect_waste_pipe_installation"}
{"type": "bcl_completion", "input": "rule indirect_waste_pipe_installation:\n    where:\n        pipe.type == \"indirect_waste\"\n    # Complete this rule", "output": "rule indirect_waste_pipe_installation:\n    where:\n        pipe.type == \"indirect_waste\"\n        must:\n        discharge.method IN [\"air_gap\", \"air_break\"]\n        discharge.to == \"waste_receptor\"\n        waste_receptor.trapped == true\n        waste_receptor.vented == true\n        if pipe.horizontal_length > 30.inches OR pipe.total_length > 54.inches:\n        pipe.trapped == true\n        should:\n        if receptor.receives_only == \"clear_water\" AND receptor.connects_to != \"sanitary_drainage\":\n        receptor.trap_required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3\"\n    must:\n        discharge.method IN [\"air_gap\", \"air_break\"]\n        discharge.to == \"waste_receptor\"\n        waste_receptor.trapped == true\n        waste_receptor.vented == true\n        if pipe.horizontal_length > 30.inches OR pipe.total_length > 54.inches:\n        pipe.trapped == true\n        should:\n        if receptor.receives_only == \"clear_water\" AND receptor.connects_to != \"sanitary_drainage\":\n        receptor.trap_required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3\"\n    should:\n        if receptor.receives_only == \"clear_water\" AND receptor.connects_to != \"sanitary_drainage\":\n        receptor.trap_required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.3\"", "rule_name": "indirect_waste_pipe_installation"}
{"type": "safety_factor_reasoning", "input": "For indirect_waste_pipe_installation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.3.", "rule_name": "indirect_waste_pipe_installation", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for air gap dimensions: When connection.method == \"air_gap\" and must:, it is required that air_gap.distance >= indirect_waste_pipe.effective_opening * 2 and air_gap.distance >= 1.inch  # Minimum absolute requirement", "output": "rule air_gap_dimensions:\n    where:\n        connection.method == \"air_gap\"\n        must:\n        air_gap.distance >= indirect_waste_pipe.effective_opening * 2\n        air_gap.distance >= 1.inch  # Minimum absolute requirement\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.3.1\"\n    must:\n        air_gap.distance >= indirect_waste_pipe.effective_opening * 2\n        air_gap.distance >= 1.inch  # Minimum absolute requirement\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.3.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.802.3.1\"", "rule_name": "air_gap_dimensions"}
{"type": "bcl_to_physics", "input": "rule air_gap_dimensions with constraints: distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.3.1", "rule_name": "air_gap_dimensions"}
{"type": "bcl_completion", "input": "rule air_gap_dimensions:\n    where:\n        connection.method == \"air_gap\"\n    # Complete this rule", "output": "rule air_gap_dimensions:\n    where:\n        connection.method == \"air_gap\"\n        must:\n        air_gap.distance >= indirect_waste_pipe.effective_opening * 2\n        air_gap.distance >= 1.inch  # Minimum absolute requirement\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.3.1\"\n    must:\n        air_gap.distance >= indirect_waste_pipe.effective_opening * 2\n        air_gap.distance >= 1.inch  # Minimum absolute requirement\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.3.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.802.3.1\"", "rule_name": "air_gap_dimensions"}
{"type": "safety_factor_reasoning", "input": "For air_gap_dimensions rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.8.802.3.1.", "rule_name": "air_gap_dimensions", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for air break requirements: When connection.method == \"air_break\" and must:, it is required that air_break.location == \"between_pipe_and_trap_seal\" and air_break.prevents_siphonage == true", "output": "rule air_break_requirements:\n    where:\n        connection.method == \"air_break\"\n        must:\n        air_break.location == \"between_pipe_and_trap_seal\"\n        air_break.prevents_siphonage == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3.2\"\n    must:\n        air_break.location == \"between_pipe_and_trap_seal\"\n        air_break.prevents_siphonage == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.3.2\"", "rule_name": "air_break_requirements"}
{"type": "bcl_to_physics", "input": "rule air_break_requirements with conditions: air_break.location == \"between_pipe_and_trap_seal\", air_break.prevents_siphonage == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.3.2", "rule_name": "air_break_requirements"}
{"type": "bcl_completion", "input": "rule air_break_requirements:\n    where:\n        connection.method == \"air_break\"\n    # Complete this rule", "output": "rule air_break_requirements:\n    where:\n        connection.method == \"air_break\"\n        must:\n        air_break.location == \"between_pipe_and_trap_seal\"\n        air_break.prevents_siphonage == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3.2\"\n    must:\n        air_break.location == \"between_pipe_and_trap_seal\"\n        air_break.prevents_siphonage == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.3.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.3.2\"", "rule_name": "air_break_requirements"}
{"type": "safety_factor_reasoning", "input": "For air_break_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.3.2.", "rule_name": "air_break_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for waste receptor strainer: When receptor.type == \"waste_receptor\" and receptor.type != \"hub_drain\" OR receptor.receives != \"clear_water_only\", it is required that strainer.installed == true and strainer.removable == true", "output": "rule waste_receptor_strainer:\n    where:\n        receptor.type == \"waste_receptor\"\n        receptor.type != \"hub_drain\" OR receptor.receives != \"clear_water_only\"\n        receptor.type != \"standpipe\"\n        must:\n        strainer.installed == true\n        strainer.removable == true\n        strainer.covers_outlet == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4\"\n    must:\n        strainer.installed == true\n        strainer.removable == true\n        strainer.covers_outlet == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.8.802.4\"", "rule_name": "waste_receptor_strainer"}
{"type": "bcl_to_physics", "input": "rule waste_receptor_strainer with conditions: strainer.installed == true, strainer.removable == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.4", "rule_name": "waste_receptor_strainer"}
{"type": "bcl_completion", "input": "rule waste_receptor_strainer:\n    where:\n        receptor.type == \"waste_receptor\"\n    # Complete this rule", "output": "rule waste_receptor_strainer:\n    where:\n        receptor.type == \"waste_receptor\"\n        receptor.type != \"hub_drain\" OR receptor.receives != \"clear_water_only\"\n        receptor.type != \"standpipe\"\n        must:\n        strainer.installed == true\n        strainer.removable == true\n        strainer.covers_outlet == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4\"\n    must:\n        strainer.installed == true\n        strainer.removable == true\n        strainer.covers_outlet == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.8.802.4\"", "rule_name": "waste_receptor_strainer"}
{"type": "safety_factor_reasoning", "input": "For waste_receptor_strainer rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.4.", "rule_name": "waste_receptor_strainer", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for waste receptor location: When fixture.type == \"waste_receptor\" and must:, it is required that location.concealed == false and location.type NOT IN [\"plenum\", \"crawl_space\", \"attic\", \"interstitial_space\"]", "output": "rule waste_receptor_location:\n    where:\n        fixture.type == \"waste_receptor\"\n        must:\n        location.concealed == false\n        location.type NOT IN [\"plenum\", \"crawl_space\", \"attic\", \"interstitial_space\"]\n        access.ready == true\n        access.unobstructed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4\"\n    must:\n        location.concealed == false\n        location.type NOT IN [\"plenum\", \"crawl_space\", \"attic\", \"interstitial_space\"]\n        access.ready == true\n        access.unobstructed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.4\"", "rule_name": "waste_receptor_location"}
{"type": "bcl_to_physics", "input": "rule waste_receptor_location with conditions: location.concealed == false, location.type NOT IN [\"plenum\", \"crawl_space\", \"attic\", \"interstitial_space\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.4", "rule_name": "waste_receptor_location"}
{"type": "bcl_completion", "input": "rule waste_receptor_location:\n    where:\n        fixture.type == \"waste_receptor\"\n    # Complete this rule", "output": "rule waste_receptor_location:\n    where:\n        fixture.type == \"waste_receptor\"\n        must:\n        location.concealed == false\n        location.type NOT IN [\"plenum\", \"crawl_space\", \"attic\", \"interstitial_space\"]\n        access.ready == true\n        access.unobstructed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4\"\n    must:\n        location.concealed == false\n        location.type NOT IN [\"plenum\", \"crawl_space\", \"attic\", \"interstitial_space\"]\n        access.ready == true\n        access.unobstructed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.4\"", "rule_name": "waste_receptor_location"}
{"type": "safety_factor_reasoning", "input": "For waste_receptor_location rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.4.", "rule_name": "waste_receptor_location", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for waste receptor sizing: When receptor.type == \"waste_receptor\" and must:, it is required that receptor.capacity >= sum(pipe.discharge_rate for pipe in receptor.served_pipes) * 1.25 and receptor.freeboard >= 2.inches", "output": "rule waste_receptor_sizing:\n    where:\n        receptor.type == \"waste_receptor\"\n        must:\n        receptor.capacity >= sum(pipe.discharge_rate for pipe in receptor.served_pipes) * 1.25\n        receptor.freeboard >= 2.inches\n        receptor.width >= max(pipe.discharge_spread for pipe in receptor.served_pipes) * 1.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.4.1\"\n    must:\n        receptor.capacity >= sum(pipe.discharge_rate for pipe in receptor.served_pipes) * 1.25\n        receptor.freeboard >= 2.inches\n        receptor.width >= max(pipe.discharge_spread for pipe in receptor.served_pipes) * 1.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.4.1\"\n    safety_factor: 1.25\n    reference: \"FL.Code.2024.8.802.4.1\"", "rule_name": "waste_receptor_sizing"}
{"type": "bcl_to_physics", "input": "rule waste_receptor_sizing with constraints: freeboard", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.25 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.4.1", "rule_name": "waste_receptor_sizing"}
{"type": "bcl_completion", "input": "rule waste_receptor_sizing:\n    where:\n        receptor.type == \"waste_receptor\"\n    # Complete this rule", "output": "rule waste_receptor_sizing:\n    where:\n        receptor.type == \"waste_receptor\"\n        must:\n        receptor.capacity >= sum(pipe.discharge_rate for pipe in receptor.served_pipes) * 1.25\n        receptor.freeboard >= 2.inches\n        receptor.width >= max(pipe.discharge_spread for pipe in receptor.served_pipes) * 1.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.4.1\"\n    must:\n        receptor.capacity >= sum(pipe.discharge_rate for pipe in receptor.served_pipes) * 1.25\n        receptor.freeboard >= 2.inches\n        receptor.width >= max(pipe.discharge_spread for pipe in receptor.served_pipes) * 1.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.4.1\"\n    safety_factor: 1.25\n    reference: \"FL.Code.2024.8.802.4.1\"", "rule_name": "waste_receptor_sizing"}
{"type": "safety_factor_reasoning", "input": "For waste_receptor_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.25 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.4.1.", "rule_name": "waste_receptor_sizing", "safety_factor": 1.25}
{"type": "legal_to_bcl", "input": "Requirement for hub drain requirements: When drain.type == \"hub_drain\" and must:, it is required that extension.height >= 1.inch and extension.above_floor == true", "output": "rule hub_drain_requirements:\n    where:\n        drain.type == \"hub_drain\"\n        must:\n        extension.height >= 1.inch\n        extension.above_floor == true\n        floor.type == \"water_impervious\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4.2\"\n    must:\n        extension.height >= 1.inch\n        extension.above_floor == true\n        floor.type == \"water_impervious\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.8.802.4.2\"", "rule_name": "hub_drain_requirements"}
{"type": "bcl_to_physics", "input": "rule hub_drain_requirements with constraints: height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.4.2", "rule_name": "hub_drain_requirements"}
{"type": "bcl_completion", "input": "rule hub_drain_requirements:\n    where:\n        drain.type == \"hub_drain\"\n    # Complete this rule", "output": "rule hub_drain_requirements:\n    where:\n        drain.type == \"hub_drain\"\n        must:\n        extension.height >= 1.inch\n        extension.above_floor == true\n        floor.type == \"water_impervious\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4.2\"\n    must:\n        extension.height >= 1.inch\n        extension.above_floor == true\n        floor.type == \"water_impervious\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.802.4.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.8.802.4.2\"", "rule_name": "hub_drain_requirements"}
{"type": "safety_factor_reasoning", "input": "For hub_drain_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.4.2.", "rule_name": "hub_drain_requirements", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for standpipe dimensions: When pipe.type == \"standpipe\" and must:, it is required that pipe.trapped == true and pipe.individual_trap == true", "output": "rule standpipe_dimensions:\n    where:\n        pipe.type == \"standpipe\"\n        must:\n        pipe.trapped == true\n        pipe.individual_trap == true\n        pipe.height >= 18.inches\n        pipe.height <= 42.inches\n        pipe.height_reference == \"above_trap_weir\"\n        access.for_rodding == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3\"\n    must:\n        pipe.trapped == true\n        pipe.individual_trap == true\n        pipe.height >= 18.inches\n        pipe.height <= 42.inches\n        pipe.height_reference == \"above_trap_weir\"\n        access.for_rodding == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.4.3\"", "rule_name": "standpipe_dimensions"}
{"type": "bcl_to_physics", "input": "rule standpipe_dimensions with constraints: height, height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.4.3", "rule_name": "standpipe_dimensions"}
{"type": "bcl_completion", "input": "rule standpipe_dimensions:\n    where:\n        pipe.type == \"standpipe\"\n    # Complete this rule", "output": "rule standpipe_dimensions:\n    where:\n        pipe.type == \"standpipe\"\n        must:\n        pipe.trapped == true\n        pipe.individual_trap == true\n        pipe.height >= 18.inches\n        pipe.height <= 42.inches\n        pipe.height_reference == \"above_trap_weir\"\n        access.for_rodding == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3\"\n    must:\n        pipe.trapped == true\n        pipe.individual_trap == true\n        pipe.height >= 18.inches\n        pipe.height <= 42.inches\n        pipe.height_reference == \"above_trap_weir\"\n        access.for_rodding == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.4.3\"", "rule_name": "standpipe_dimensions"}
{"type": "safety_factor_reasoning", "input": "For standpipe_dimensions rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.4.3.", "rule_name": "standpipe_dimensions", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for laundry tray to standpipe: When fixture.type == \"laundry_tray\" and connection.to == \"clothes_washer_standpipe\", it is required that laundry_tray.waste_line.trapped == false and standpipe.height >= 30.inches", "output": "rule laundry_tray_to_standpipe:\n    where:\n        fixture.type == \"laundry_tray\"\n        connection.to == \"clothes_washer_standpipe\"\n        must:\n        laundry_tray.waste_line.trapped == false\n        standpipe.height >= 30.inches\n        standpipe.height_reference == \"above_weir\"\n        standpipe.height > laundry_tray.flood_level_rim\n        horizontal_distance(laundry_tray.outlet, standpipe.side) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3.1\"\n    must:\n        laundry_tray.waste_line.trapped == false\n        standpipe.height >= 30.inches\n        standpipe.height_reference == \"above_weir\"\n        standpipe.height > laundry_tray.flood_level_rim\n        horizontal_distance(laundry_tray.outlet, standpipe.side) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.4.3.1\"", "rule_name": "laundry_tray_to_standpipe"}
{"type": "bcl_to_physics", "input": "rule laundry_tray_to_standpipe with constraints: height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.4.3.1", "rule_name": "laundry_tray_to_standpipe"}
{"type": "bcl_completion", "input": "rule laundry_tray_to_standpipe:\n    where:\n        fixture.type == \"laundry_tray\"\n    # Complete this rule", "output": "rule laundry_tray_to_standpipe:\n    where:\n        fixture.type == \"laundry_tray\"\n        connection.to == \"clothes_washer_standpipe\"\n        must:\n        laundry_tray.waste_line.trapped == false\n        standpipe.height >= 30.inches\n        standpipe.height_reference == \"above_weir\"\n        standpipe.height > laundry_tray.flood_level_rim\n        horizontal_distance(laundry_tray.outlet, standpipe.side) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3.1\"\n    must:\n        laundry_tray.waste_line.trapped == false\n        standpipe.height >= 30.inches\n        standpipe.height_reference == \"above_weir\"\n        standpipe.height > laundry_tray.flood_level_rim\n        horizontal_distance(laundry_tray.outlet, standpipe.side) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.4.3.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.4.3.1\"", "rule_name": "laundry_tray_to_standpipe"}
{"type": "safety_factor_reasoning", "input": "For laundry_tray_to_standpipe rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.4.3.1.", "rule_name": "laundry_tray_to_standpipe", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for corrosive waste neutralization: When waste.type IN [\"corrosive\", \"spent_acid\", \"harmful_chemical\"] and waste.pH < 6.5 OR waste.pH > 9.0 OR waste.harmful == true, it is required that neutralizer.installed == true and neutralizer.approved == true", "output": "rule corrosive_waste_neutralization:\n    where:\n        waste.type IN [\"corrosive\", \"spent_acid\", \"harmful_chemical\"]\n        waste.pH < 6.5 OR waste.pH > 9.0 OR waste.harmful == true\n        must:\n        neutralizer.installed == true\n        neutralizer.approved == true\n        neutralizer.operation == \"automatic\"\n        neutralizer.dilution_water.supply == \"sufficient\"\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.effluent.noninjurious == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.803.1\"\n    must:\n        neutralizer.installed == true\n        neutralizer.approved == true\n        neutralizer.operation == \"automatic\"\n        neutralizer.dilution_water.supply == \"sufficient\"\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.effluent.noninjurious == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.803.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.803.1\"", "rule_name": "corrosive_waste_neutralization"}
{"type": "bcl_to_physics", "input": "rule corrosive_waste_neutralization with constraints: pH, pH", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.803.1", "rule_name": "corrosive_waste_neutralization"}
{"type": "bcl_completion", "input": "rule corrosive_waste_neutralization:\n    where:\n        waste.type IN [\"corrosive\", \"spent_acid\", \"harmful_chemical\"]\n    # Complete this rule", "output": "rule corrosive_waste_neutralization:\n    where:\n        waste.type IN [\"corrosive\", \"spent_acid\", \"harmful_chemical\"]\n        waste.pH < 6.5 OR waste.pH > 9.0 OR waste.harmful == true\n        must:\n        neutralizer.installed == true\n        neutralizer.approved == true\n        neutralizer.operation == \"automatic\"\n        neutralizer.dilution_water.supply == \"sufficient\"\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.effluent.noninjurious == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.803.1\"\n    must:\n        neutralizer.installed == true\n        neutralizer.approved == true\n        neutralizer.operation == \"automatic\"\n        neutralizer.dilution_water.supply == \"sufficient\"\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.effluent.noninjurious == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.803.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.803.1\"", "rule_name": "corrosive_waste_neutralization"}
{"type": "safety_factor_reasoning", "input": "For corrosive_waste_neutralization rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.803.1.", "rule_name": "corrosive_waste_neutralization", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for chemical drainage system separation: When system.type == \"chemical_drainage\" and must:, it is required that separation_from_sanitary == \"complete\" and chemical_vent.separated == true", "output": "rule chemical_drainage_system_separation:\n    where:\n        system.type == \"chemical_drainage\"\n        must:\n        separation_from_sanitary == \"complete\"\n        chemical_vent.separated == true\n        if discharge.to == \"sanitary_system\":\n        waste.treated_per_803_1 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.803.2\"\n        constraint air_gap_backflow_prevention:\n        where:\n        connection.has_air_gap == true\n        must:\n        air_gap.height > maximum_surge_height(system_pressure, pipe_diameter)\n        air_gap.height > splash_height(discharge_velocity, discharge_angle)\n        safety_factor: 2.0\n        constraint receptor_overflow_prevention:\n        where:\n        receptor.receives_discharge == true\n        must:\n        receptor.drain_rate > total_discharge_rate * 1.25\n        receptor.volume > peak_discharge_volume(duration=30.seconds)\n        safety_factor: 1.5\n        constraint freezer_drain_freeze_prevention:\n        where:\n        drain.location.temperature < 32.fahrenheit\n        must:\n        waste_line.slope > min_slope_for_drainage(temperature=location.temperature)\n        waste_line.insulated == false  # Allow drainage before freezing\n        time_to_drain < time_to_freeze(pipe_diameter, flow_temperature, ambient_temperature)\n    must:\n        separation_from_sanitary == \"complete\"\n        chemical_vent.separated == true\n        if discharge.to == \"sanitary_system\":\n        waste.treated_per_803_1 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.803.2\"\n        constraint air_gap_backflow_prevention:\n        where:\n        connection.has_air_gap == true\n        must:\n        air_gap.height > maximum_surge_height(system_pressure, pipe_diameter)\n        air_gap.height > splash_height(discharge_velocity, discharge_angle)\n        safety_factor: 2.0\n        constraint receptor_overflow_prevention:\n        where:\n        receptor.receives_discharge == true\n        must:\n        receptor.drain_rate > total_discharge_rate * 1.25\n        receptor.volume > peak_discharge_volume(duration=30.seconds)\n        safety_factor: 1.5\n        constraint freezer_drain_freeze_prevention:\n        where:\n        drain.location.temperature < 32.fahrenheit\n        must:\n        waste_line.slope > min_slope_for_drainage(temperature=location.temperature)\n        waste_line.insulated == false  # Allow drainage before freezing\n        time_to_drain < time_to_freeze(pipe_diameter, flow_temperature, ambient_temperature)\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.803.2\"", "rule_name": "chemical_drainage_system_separation"}
{"type": "bcl_to_physics", "input": "rule chemical_drainage_system_separation with constraints: temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.8.803.2", "rule_name": "chemical_drainage_system_separation"}
{"type": "bcl_completion", "input": "rule chemical_drainage_system_separation:\n    where:\n        system.type == \"chemical_drainage\"\n    # Complete this rule", "output": "rule chemical_drainage_system_separation:\n    where:\n        system.type == \"chemical_drainage\"\n        must:\n        separation_from_sanitary == \"complete\"\n        chemical_vent.separated == true\n        if discharge.to == \"sanitary_system\":\n        waste.treated_per_803_1 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.803.2\"\n        constraint air_gap_backflow_prevention:\n        where:\n        connection.has_air_gap == true\n        must:\n        air_gap.height > maximum_surge_height(system_pressure, pipe_diameter)\n        air_gap.height > splash_height(discharge_velocity, discharge_angle)\n        safety_factor: 2.0\n        constraint receptor_overflow_prevention:\n        where:\n        receptor.receives_discharge == true\n        must:\n        receptor.drain_rate > total_discharge_rate * 1.25\n        receptor.volume > peak_discharge_volume(duration=30.seconds)\n        safety_factor: 1.5\n        constraint freezer_drain_freeze_prevention:\n        where:\n        drain.location.temperature < 32.fahrenheit\n        must:\n        waste_line.slope > min_slope_for_drainage(temperature=location.temperature)\n        waste_line.insulated == false  # Allow drainage before freezing\n        time_to_drain < time_to_freeze(pipe_diameter, flow_temperature, ambient_temperature)\n    must:\n        separation_from_sanitary == \"complete\"\n        chemical_vent.separated == true\n        if discharge.to == \"sanitary_system\":\n        waste.treated_per_803_1 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.803.2\"\n        constraint air_gap_backflow_prevention:\n        where:\n        connection.has_air_gap == true\n        must:\n        air_gap.height > maximum_surge_height(system_pressure, pipe_diameter)\n        air_gap.height > splash_height(discharge_velocity, discharge_angle)\n        safety_factor: 2.0\n        constraint receptor_overflow_prevention:\n        where:\n        receptor.receives_discharge == true\n        must:\n        receptor.drain_rate > total_discharge_rate * 1.25\n        receptor.volume > peak_discharge_volume(duration=30.seconds)\n        safety_factor: 1.5\n        constraint freezer_drain_freeze_prevention:\n        where:\n        drain.location.temperature < 32.fahrenheit\n        must:\n        waste_line.slope > min_slope_for_drainage(temperature=location.temperature)\n        waste_line.insulated == false  # Allow drainage before freezing\n        time_to_drain < time_to_freeze(pipe_diameter, flow_temperature, ambient_temperature)\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.803.2\"", "rule_name": "chemical_drainage_system_separation"}
{"type": "safety_factor_reasoning", "input": "For chemical_drainage_system_separation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.8.803.2.", "rule_name": "chemical_drainage_system_separation", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for trap seal pressure protection: When fixture.has_trap == true and system.has_vent_piping == true, it is required that pressure_differential <= 1.inch_water_column  # 249 Pa and vent_system.permits_air_admission == true", "output": "rule trap_seal_pressure_protection:\n    where:\n        fixture.has_trap == true\n        system.has_vent_piping == true\n        must:\n        pressure_differential <= 1.inch_water_column  # 249 Pa\n        vent_system.permits_air_admission == true\n        vent_system.permits_air_emission == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.901.2\"\n    must:\n        pressure_differential <= 1.inch_water_column  # 249 Pa\n        vent_system.permits_air_admission == true\n        vent_system.permits_air_emission == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.901.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.901.2\"", "rule_name": "trap_seal_pressure_protection"}
{"type": "bcl_to_physics", "input": "rule trap_seal_pressure_protection with constraints: pressure_differential", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.9.901.2", "rule_name": "trap_seal_pressure_protection"}
{"type": "bcl_completion", "input": "rule trap_seal_pressure_protection:\n    where:\n        fixture.has_trap == true\n    # Complete this rule", "output": "rule trap_seal_pressure_protection:\n    where:\n        fixture.has_trap == true\n        system.has_vent_piping == true\n        must:\n        pressure_differential <= 1.inch_water_column  # 249 Pa\n        vent_system.permits_air_admission == true\n        vent_system.permits_air_emission == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.901.2\"\n    must:\n        pressure_differential <= 1.inch_water_column  # 249 Pa\n        vent_system.permits_air_admission == true\n        vent_system.permits_air_emission == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.901.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.901.2\"", "rule_name": "trap_seal_pressure_protection"}
{"type": "safety_factor_reasoning", "input": "For trap_seal_pressure_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.901.2.", "rule_name": "trap_seal_pressure_protection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for chemical waste vent independence: When system.type == \"chemical_waste\" and system.has_vent == true, it is required that vent_system.independent_of_sanitary == true and vent_termination IN [", "output": "rule chemical_waste_vent_independence:\n    where:\n        system.type == \"chemical_waste\"\n        system.has_vent == true\n        must:\n        vent_system.independent_of_sanitary == true\n        vent_termination IN [\n        \"separate_through_roof\",\n        \"air_admittance_valve\"\n        ]\n        if vent_termination == \"air_admittance_valve\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_approved_per == \"Section_702.6\"\n        valve.chemical_resistance_tested == \"ASTM_F1412\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.901.3\"\n    must:\n        vent_system.independent_of_sanitary == true\n        vent_termination IN [\n        \"separate_through_roof\",\n        \"air_admittance_valve\"\n        ]\n        if vent_termination == \"air_admittance_valve\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_approved_per == \"Section_702.6\"\n        valve.chemical_resistance_tested == \"ASTM_F1412\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.901.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.9.901.3\"", "rule_name": "chemical_waste_vent_independence"}
{"type": "bcl_to_physics", "input": "rule chemical_waste_vent_independence with conditions: vent_system.independent_of_sanitary == true, vent_termination IN [", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.9.901.3", "rule_name": "chemical_waste_vent_independence"}
{"type": "bcl_completion", "input": "rule chemical_waste_vent_independence:\n    where:\n        system.type == \"chemical_waste\"\n    # Complete this rule", "output": "rule chemical_waste_vent_independence:\n    where:\n        system.type == \"chemical_waste\"\n        system.has_vent == true\n        must:\n        vent_system.independent_of_sanitary == true\n        vent_termination IN [\n        \"separate_through_roof\",\n        \"air_admittance_valve\"\n        ]\n        if vent_termination == \"air_admittance_valve\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_approved_per == \"Section_702.6\"\n        valve.chemical_resistance_tested == \"ASTM_F1412\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.901.3\"\n    must:\n        vent_system.independent_of_sanitary == true\n        vent_termination IN [\n        \"separate_through_roof\",\n        \"air_admittance_valve\"\n        ]\n        if vent_termination == \"air_admittance_valve\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_approved_per == \"Section_702.6\"\n        valve.chemical_resistance_tested == \"ASTM_F1412\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.901.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.9.901.3\"", "rule_name": "chemical_waste_vent_independence"}
{"type": "safety_factor_reasoning", "input": "For chemical_waste_vent_independence rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.9.901.3.", "rule_name": "chemical_waste_vent_independence", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for vent flashing copper: When flashing.material == \"sheet_copper\" and flashing.for == \"vent_pipe\", it is required that material.conforms_to == \"ASTM_B152\" and weight >= 8.ounces_per_sqft  # 2.5 kg/m\u00c2\u00b2", "output": "rule vent_flashing_copper:\n    where:\n        flashing.material == \"sheet_copper\"\n        flashing.for == \"vent_pipe\"\n        must:\n        material.conforms_to == \"ASTM_B152\"\n        weight >= 8.ounces_per_sqft  # 2.5 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.2\"\n    must:\n        material.conforms_to == \"ASTM_B152\"\n        weight >= 8.ounces_per_sqft  # 2.5 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.902.2\"", "rule_name": "vent_flashing_copper"}
{"type": "bcl_to_physics", "input": "rule vent_flashing_copper with constraints: weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.902.2", "rule_name": "vent_flashing_copper"}
{"type": "bcl_completion", "input": "rule vent_flashing_copper:\n    where:\n        flashing.material == \"sheet_copper\"\n    # Complete this rule", "output": "rule vent_flashing_copper:\n    where:\n        flashing.material == \"sheet_copper\"\n        flashing.for == \"vent_pipe\"\n        must:\n        material.conforms_to == \"ASTM_B152\"\n        weight >= 8.ounces_per_sqft  # 2.5 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.2\"\n    must:\n        material.conforms_to == \"ASTM_B152\"\n        weight >= 8.ounces_per_sqft  # 2.5 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.902.2\"", "rule_name": "vent_flashing_copper"}
{"type": "safety_factor_reasoning", "input": "For vent_flashing_copper rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.902.2.", "rule_name": "vent_flashing_copper", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent flashing lead: When flashing.material == \"sheet_lead\" and flashing.for == \"vent_pipe\", it is required that if flashing.type == \"field_constructed\": and weight >= 3.pounds_per_sqft  # 15 kg/m\u00c2\u00b2", "output": "rule vent_flashing_lead:\n    where:\n        flashing.material == \"sheet_lead\"\n        flashing.for == \"vent_pipe\"\n        must:\n        if flashing.type == \"field_constructed\":\n        weight >= 3.pounds_per_sqft  # 15 kg/m\u00c2\u00b2\n        elif flashing.type == \"prefabricated\":\n        weight >= 2.5.pounds_per_sqft  # 12 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.3\"\n    must:\n        if flashing.type == \"field_constructed\":\n        weight >= 3.pounds_per_sqft  # 15 kg/m\u00c2\u00b2\n        elif flashing.type == \"prefabricated\":\n        weight >= 2.5.pounds_per_sqft  # 12 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.902.3\"", "rule_name": "vent_flashing_lead"}
{"type": "bcl_to_physics", "input": "rule vent_flashing_lead with constraints: weight, weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.902.3", "rule_name": "vent_flashing_lead"}
{"type": "bcl_completion", "input": "rule vent_flashing_lead:\n    where:\n        flashing.material == \"sheet_lead\"\n    # Complete this rule", "output": "rule vent_flashing_lead:\n    where:\n        flashing.material == \"sheet_lead\"\n        flashing.for == \"vent_pipe\"\n        must:\n        if flashing.type == \"field_constructed\":\n        weight >= 3.pounds_per_sqft  # 15 kg/m\u00c2\u00b2\n        elif flashing.type == \"prefabricated\":\n        weight >= 2.5.pounds_per_sqft  # 12 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.3\"\n    must:\n        if flashing.type == \"field_constructed\":\n        weight >= 3.pounds_per_sqft  # 15 kg/m\u00c2\u00b2\n        elif flashing.type == \"prefabricated\":\n        weight >= 2.5.pounds_per_sqft  # 12 kg/m\u00c2\u00b2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.902.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.902.3\"", "rule_name": "vent_flashing_lead"}
{"type": "safety_factor_reasoning", "input": "For vent_flashing_lead rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.902.3.", "rule_name": "vent_flashing_lead", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for roof vent extension: When vent.extends_through == \"roof\" and vent.type == \"open\", it is required that if roof.use == \"standard\": and termination_height >= 6.inches  # Above roof", "output": "rule roof_vent_extension:\n    where:\n        vent.extends_through == \"roof\"\n        vent.type == \"open\"\n        must:\n        if roof.use == \"standard\":\n        termination_height >= 6.inches  # Above roof\n        elif roof.use IN [\"promenade\", \"restaurant\", \"bar\", \"observation_deck\", \"sunbathing\"]:\n        termination_height >= 7.feet  # Above roof\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.1-903.1.2\"\n    must:\n        if roof.use == \"standard\":\n        termination_height >= 6.inches  # Above roof\n        elif roof.use IN [\"promenade\", \"restaurant\", \"bar\", \"observation_deck\", \"sunbathing\"]:\n        termination_height >= 7.feet  # Above roof\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.1-903.1.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.903.1.1-903.1.2\"", "rule_name": "roof_vent_extension"}
{"type": "bcl_to_physics", "input": "rule roof_vent_extension with constraints: termination_height, termination_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.903.1.1-903.1.2", "rule_name": "roof_vent_extension"}
{"type": "bcl_completion", "input": "rule roof_vent_extension:\n    where:\n        vent.extends_through == \"roof\"\n    # Complete this rule", "output": "rule roof_vent_extension:\n    where:\n        vent.extends_through == \"roof\"\n        vent.type == \"open\"\n        must:\n        if roof.use == \"standard\":\n        termination_height >= 6.inches  # Above roof\n        elif roof.use IN [\"promenade\", \"restaurant\", \"bar\", \"observation_deck\", \"sunbathing\"]:\n        termination_height >= 7.feet  # Above roof\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.1-903.1.2\"\n    must:\n        if roof.use == \"standard\":\n        termination_height >= 6.inches  # Above roof\n        elif roof.use IN [\"promenade\", \"restaurant\", \"bar\", \"observation_deck\", \"sunbathing\"]:\n        termination_height >= 7.feet  # Above roof\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.1-903.1.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.903.1.1-903.1.2\"", "rule_name": "roof_vent_extension"}
{"type": "safety_factor_reasoning", "input": "For roof_vent_extension rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.903.1.1-903.1.2.", "rule_name": "roof_vent_extension", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for protected vent terminal: When vent.extends_through == \"sloped_roof\" and vent.covered_by IN [\"solar_panel\", \"photovoltaic_panel\", \"architectural_feature\", \"decorative_shroud\"], it is required that termination_height >= 2.inches  # Above roof surface and cover.prevents_snow_accumulation == true", "output": "rule protected_vent_terminal:\n    where:\n        vent.extends_through == \"sloped_roof\"\n        vent.covered_by IN [\"solar_panel\", \"photovoltaic_panel\", \"architectural_feature\", \"decorative_shroud\"]\n        must:\n        termination_height >= 2.inches  # Above roof surface\n        cover.prevents_snow_accumulation == true\n        cover.prevents_wind_effects == true\n        open_area >= pipe.inside_area\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.3\"\n    must:\n        termination_height >= 2.inches  # Above roof surface\n        cover.prevents_snow_accumulation == true\n        cover.prevents_wind_effects == true\n        open_area >= pipe.inside_area\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.903.1.3\"", "rule_name": "protected_vent_terminal"}
{"type": "bcl_to_physics", "input": "rule protected_vent_terminal with constraints: termination_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.903.1.3", "rule_name": "protected_vent_terminal"}
{"type": "bcl_completion", "input": "rule protected_vent_terminal:\n    where:\n        vent.extends_through == \"sloped_roof\"\n    # Complete this rule", "output": "rule protected_vent_terminal:\n    where:\n        vent.extends_through == \"sloped_roof\"\n        vent.covered_by IN [\"solar_panel\", \"photovoltaic_panel\", \"architectural_feature\", \"decorative_shroud\"]\n        must:\n        termination_height >= 2.inches  # Above roof surface\n        cover.prevents_snow_accumulation == true\n        cover.prevents_wind_effects == true\n        open_area >= pipe.inside_area\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.3\"\n    must:\n        termination_height >= 2.inches  # Above roof surface\n        cover.prevents_snow_accumulation == true\n        cover.prevents_wind_effects == true\n        open_area >= pipe.inside_area\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.1.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.903.1.3\"", "rule_name": "protected_vent_terminal"}
{"type": "safety_factor_reasoning", "input": "For protected_vent_terminal rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.903.1.3.", "rule_name": "protected_vent_terminal", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sidewall vent terminal: When vent.extends_through == \"wall\" and must:, it is required that distance_from_lot_line >= 10.feet and height_above_grade >= 10.feet", "output": "rule sidewall_vent_terminal:\n    where:\n        vent.extends_through == \"wall\"\n        must:\n        distance_from_lot_line >= 10.feet\n        height_above_grade >= 10.feet\n        if structure.has_soffit_vents == true:\n        termination_under_overhang == false\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.903.1.4\"\n    must:\n        distance_from_lot_line >= 10.feet\n        height_above_grade >= 10.feet\n        if structure.has_soffit_vents == true:\n        termination_under_overhang == false\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.903.1.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.903.1.4\"", "rule_name": "sidewall_vent_terminal"}
{"type": "bcl_to_physics", "input": "rule sidewall_vent_terminal with constraints: distance_from_lot_line, height_above_grade", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.9.903.1.4", "rule_name": "sidewall_vent_terminal"}
{"type": "bcl_completion", "input": "rule sidewall_vent_terminal:\n    where:\n        vent.extends_through == \"wall\"\n    # Complete this rule", "output": "rule sidewall_vent_terminal:\n    where:\n        vent.extends_through == \"wall\"\n        must:\n        distance_from_lot_line >= 10.feet\n        height_above_grade >= 10.feet\n        if structure.has_soffit_vents == true:\n        termination_under_overhang == false\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.903.1.4\"\n    must:\n        distance_from_lot_line >= 10.feet\n        height_above_grade >= 10.feet\n        if structure.has_soffit_vents == true:\n        termination_under_overhang == false\n        protection.prevents_birds == true\n        protection.prevents_rodents == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.903.1.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.903.1.4\"", "rule_name": "sidewall_vent_terminal"}
{"type": "safety_factor_reasoning", "input": "For sidewall_vent_terminal rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.903.1.4.", "rule_name": "sidewall_vent_terminal", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for frost closure prevention: When climate.design_temperature_97_5_percent <= 0.fahrenheit  # -18\u00c2\u00b0C and vent.extends_through IN [\"roof\", \"wall\"], it is required that vent.diameter >= 3.inches and if size.increased == true:", "output": "rule frost_closure_prevention:\n    where:\n        climate.design_temperature_97_5_percent <= 0.fahrenheit  # -18\u00c2\u00b0C\n        vent.extends_through IN [\"roof\", \"wall\"]\n        must:\n        vent.diameter >= 3.inches\n        if size.increased == true:\n        increase_location >= 1.foot  # Inside thermal envelope\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.2\"\n    must:\n        vent.diameter >= 3.inches\n        if size.increased == true:\n        increase_location >= 1.foot  # Inside thermal envelope\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.2\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.9.903.2\"", "rule_name": "frost_closure_prevention"}
{"type": "bcl_to_physics", "input": "rule frost_closure_prevention with constraints: design_temperature_97_5_percent, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.9.903.2", "rule_name": "frost_closure_prevention"}
{"type": "bcl_completion", "input": "rule frost_closure_prevention:\n    where:\n        climate.design_temperature_97_5_percent <= 0.fahrenheit  # -18\u00c2\u00b0C\n    # Complete this rule", "output": "rule frost_closure_prevention:\n    where:\n        climate.design_temperature_97_5_percent <= 0.fahrenheit  # -18\u00c2\u00b0C\n        vent.extends_through IN [\"roof\", \"wall\"]\n        must:\n        vent.diameter >= 3.inches\n        if size.increased == true:\n        increase_location >= 1.foot  # Inside thermal envelope\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.2\"\n    must:\n        vent.diameter >= 3.inches\n        if size.increased == true:\n        increase_location >= 1.foot  # Inside thermal envelope\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.2\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.9.903.2\"", "rule_name": "frost_closure_prevention"}
{"type": "safety_factor_reasoning", "input": "For frost_closure_prevention rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.9.903.2.", "rule_name": "frost_closure_prevention", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for vent terminal location: When vent.type == \"open\" and vent.from == \"drainage_system\", it is required that not_beneath IN [\"door\", \"openable_window\", \"air_intake\"] and if horizontal_distance < 10.feet:", "output": "rule vent_terminal_location:\n    where:\n        vent.type == \"open\"\n        vent.from == \"drainage_system\"\n        must:\n        not_beneath IN [\"door\", \"openable_window\", \"air_intake\"]\n        if horizontal_distance < 10.feet:\n        vertical_clearance >= 3.feet  # Above opening top\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.5\"\n    must:\n        not_beneath IN [\"door\", \"openable_window\", \"air_intake\"]\n        if horizontal_distance < 10.feet:\n        vertical_clearance >= 3.feet  # Above opening top\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.903.5\"", "rule_name": "vent_terminal_location"}
{"type": "bcl_to_physics", "input": "rule vent_terminal_location with constraints: horizontal_distance, vertical_clearance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.903.5", "rule_name": "vent_terminal_location"}
{"type": "bcl_completion", "input": "rule vent_terminal_location:\n    where:\n        vent.type == \"open\"\n    # Complete this rule", "output": "rule vent_terminal_location:\n    where:\n        vent.type == \"open\"\n        vent.from == \"drainage_system\"\n        must:\n        not_beneath IN [\"door\", \"openable_window\", \"air_intake\"]\n        if horizontal_distance < 10.feet:\n        vertical_clearance >= 3.feet  # Above opening top\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.5\"\n    must:\n        not_beneath IN [\"door\", \"openable_window\", \"air_intake\"]\n        if horizontal_distance < 10.feet:\n        vertical_clearance >= 3.feet  # Above opening top\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.903.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.903.5\"", "rule_name": "vent_terminal_location"}
{"type": "safety_factor_reasoning", "input": "For vent_terminal_location rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.903.5.", "rule_name": "vent_terminal_location", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for exterior vent freeze protection: When climate.design_temperature_97_5_percent < 0.fahrenheit and vent.installed_on == \"structure_exterior\", it is required that protection IN [\"insulation\", \"heat\", \"both\"] and safety_factor: 1.5", "output": "rule exterior_vent_freeze_protection:\n    where:\n        climate.design_temperature_97_5_percent < 0.fahrenheit\n        vent.installed_on == \"structure_exterior\"\n        must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.7\"\n    must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.7\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.9.903.7\"", "rule_name": "exterior_vent_freeze_protection"}
{"type": "bcl_to_physics", "input": "rule exterior_vent_freeze_protection with constraints: design_temperature_97_5_percent", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.9.903.7", "rule_name": "exterior_vent_freeze_protection"}
{"type": "bcl_completion", "input": "rule exterior_vent_freeze_protection:\n    where:\n        climate.design_temperature_97_5_percent < 0.fahrenheit\n    # Complete this rule", "output": "rule exterior_vent_freeze_protection:\n    where:\n        climate.design_temperature_97_5_percent < 0.fahrenheit\n        vent.installed_on == \"structure_exterior\"\n        must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.7\"\n    must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.9.903.7\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.9.903.7\"", "rule_name": "exterior_vent_freeze_protection"}
{"type": "safety_factor_reasoning", "input": "For exterior_vent_freeze_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.9.903.7.", "rule_name": "exterior_vent_freeze_protection", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for required vent extension: When building.has_drain == true and must:, it is required that vent_pipes_to_outdoors >= 1 and vent.type == \"dry_vent\"", "output": "rule required_vent_extension:\n    where:\n        building.has_drain == true\n        must:\n        vent_pipes_to_outdoors >= 1\n        vent.type == \"dry_vent\"\n        vent.connects_to IN [\"building_drain\", \"drain_extension\"]\n        vent.not_island_fixture_vent == true\n        vent.sized_per == \"Section_906.2\"\n        vent.based_on == \"building_drain_size\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.1\"\n    must:\n        vent_pipes_to_outdoors >= 1\n        vent.type == \"dry_vent\"\n        vent.connects_to IN [\"building_drain\", \"drain_extension\"]\n        vent.not_island_fixture_vent == true\n        vent.sized_per == \"Section_906.2\"\n        vent.based_on == \"building_drain_size\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.904.1\"", "rule_name": "required_vent_extension"}
{"type": "bcl_to_physics", "input": "rule required_vent_extension with conditions: vent_pipes_to_outdoors >= 1, vent.type == \"dry_vent\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.904.1", "rule_name": "required_vent_extension"}
{"type": "bcl_completion", "input": "rule required_vent_extension:\n    where:\n        building.has_drain == true\n    # Complete this rule", "output": "rule required_vent_extension:\n    where:\n        building.has_drain == true\n        must:\n        vent_pipes_to_outdoors >= 1\n        vent.type == \"dry_vent\"\n        vent.connects_to IN [\"building_drain\", \"drain_extension\"]\n        vent.not_island_fixture_vent == true\n        vent.sized_per == \"Section_906.2\"\n        vent.based_on == \"building_drain_size\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.1\"\n    must:\n        vent_pipes_to_outdoors >= 1\n        vent.type == \"dry_vent\"\n        vent.connects_to IN [\"building_drain\", \"drain_extension\"]\n        vent.not_island_fixture_vent == true\n        vent.sized_per == \"Section_906.2\"\n        vent.based_on == \"building_drain_size\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.904.1\"", "rule_name": "required_vent_extension"}
{"type": "safety_factor_reasoning", "input": "For required_vent_extension rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.904.1.", "rule_name": "required_vent_extension", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent stack requirement: When drainage_stack.branch_intervals >= 5 and must:, it is required that vent_stack.required == true and safety_factor: 1.2", "output": "rule vent_stack_requirement:\n    where:\n        drainage_stack.branch_intervals >= 5\n        must:\n        vent_stack.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.2\"\n    must:\n        vent_stack.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.904.2\"", "rule_name": "vent_stack_requirement"}
{"type": "bcl_to_physics", "input": "rule vent_stack_requirement with conditions: vent_stack.required == true, safety_factor: 1.2", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.904.2", "rule_name": "vent_stack_requirement"}
{"type": "bcl_completion", "input": "rule vent_stack_requirement:\n    where:\n        drainage_stack.branch_intervals >= 5\n    # Complete this rule", "output": "rule vent_stack_requirement:\n    where:\n        drainage_stack.branch_intervals >= 5\n        must:\n        vent_stack.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.2\"\n    must:\n        vent_stack.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.904.2\"", "rule_name": "vent_stack_requirement"}
{"type": "safety_factor_reasoning", "input": "For vent_stack_requirement rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.904.2.", "rule_name": "vent_stack_requirement", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent stack base connection: When drainage_stack.has_vent_stack == true and must:, it is required that connection.at == \"drainage_stack_base\" and connection.at_or_below == \"lowest_horizontal_branch\"", "output": "rule vent_stack_base_connection:\n    where:\n        drainage_stack.has_vent_stack == true\n        must:\n        connection.at == \"drainage_stack_base\"\n        connection.at_or_below == \"lowest_horizontal_branch\"\n        if connection.to == \"building_drain\":\n        location == \"downstream_of_drainage_stack\"\n        distance <= 10 * drainage_stack.diameter\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.4\"\n    must:\n        connection.at == \"drainage_stack_base\"\n        connection.at_or_below == \"lowest_horizontal_branch\"\n        if connection.to == \"building_drain\":\n        location == \"downstream_of_drainage_stack\"\n        distance <= 10 * drainage_stack.diameter\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.904.4\"", "rule_name": "vent_stack_base_connection"}
{"type": "bcl_to_physics", "input": "rule vent_stack_base_connection with conditions: connection.at == \"drainage_stack_base\", connection.at_or_below == \"lowest_horizontal_branch\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.904.4", "rule_name": "vent_stack_base_connection"}
{"type": "bcl_completion", "input": "rule vent_stack_base_connection:\n    where:\n        drainage_stack.has_vent_stack == true\n    # Complete this rule", "output": "rule vent_stack_base_connection:\n    where:\n        drainage_stack.has_vent_stack == true\n        must:\n        connection.at == \"drainage_stack_base\"\n        connection.at_or_below == \"lowest_horizontal_branch\"\n        if connection.to == \"building_drain\":\n        location == \"downstream_of_drainage_stack\"\n        distance <= 10 * drainage_stack.diameter\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.4\"\n    must:\n        connection.at == \"drainage_stack_base\"\n        connection.at_or_below == \"lowest_horizontal_branch\"\n        if connection.to == \"building_drain\":\n        location == \"downstream_of_drainage_stack\"\n        distance <= 10 * drainage_stack.diameter\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.904.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.904.4\"", "rule_name": "vent_stack_base_connection"}
{"type": "safety_factor_reasoning", "input": "For vent_stack_base_connection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.904.4.", "rule_name": "vent_stack_base_connection", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent drainage slope: When pipe.type IN [\"vent\", \"branch_vent\"] and must:, it is required that pipe.graded_to_drain_back == true and drainage.by == \"gravity\"", "output": "rule vent_drainage_slope:\n    where:\n        pipe.type IN [\"vent\", \"branch_vent\"]\n        must:\n        pipe.graded_to_drain_back == true\n        drainage.by == \"gravity\"\n        drainage.to == \"drainage_pipe\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.905.2\"\n    must:\n        pipe.graded_to_drain_back == true\n        drainage.by == \"gravity\"\n        drainage.to == \"drainage_pipe\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.905.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.9.905.2\"", "rule_name": "vent_drainage_slope"}
{"type": "bcl_to_physics", "input": "rule vent_drainage_slope with conditions: pipe.graded_to_drain_back == true, drainage.by == \"gravity\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.9.905.2", "rule_name": "vent_drainage_slope"}
{"type": "bcl_completion", "input": "rule vent_drainage_slope:\n    where:\n        pipe.type IN [\"vent\", \"branch_vent\"]\n    # Complete this rule", "output": "rule vent_drainage_slope:\n    where:\n        pipe.type IN [\"vent\", \"branch_vent\"]\n        must:\n        pipe.graded_to_drain_back == true\n        drainage.by == \"gravity\"\n        drainage.to == \"drainage_pipe\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.905.2\"\n    must:\n        pipe.graded_to_drain_back == true\n        drainage.by == \"gravity\"\n        drainage.to == \"drainage_pipe\"\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.905.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.9.905.2\"", "rule_name": "vent_drainage_slope"}
{"type": "safety_factor_reasoning", "input": "For vent_drainage_slope rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.905.2.", "rule_name": "vent_drainage_slope", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for dry vent connection height: When vent.type == \"dry\" and vent.connects_to == \"horizontal_drain\", it is required that connection.above == \"horizontal_drain_centerline\" and safety_factor: 1.2", "output": "rule dry_vent_connection_height:\n    where:\n        vent.type == \"dry\"\n        vent.connects_to == \"horizontal_drain\"\n        must:\n        connection.above == \"horizontal_drain_centerline\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.3\"\n    must:\n        connection.above == \"horizontal_drain_centerline\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.905.3\"", "rule_name": "dry_vent_connection_height"}
{"type": "bcl_to_physics", "input": "rule dry_vent_connection_height with conditions: connection.above == \"horizontal_drain_centerline\", safety_factor: 1.2", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.905.3", "rule_name": "dry_vent_connection_height"}
{"type": "bcl_completion", "input": "rule dry_vent_connection_height:\n    where:\n        vent.type == \"dry\"\n    # Complete this rule", "output": "rule dry_vent_connection_height:\n    where:\n        vent.type == \"dry\"\n        vent.connects_to == \"horizontal_drain\"\n        must:\n        connection.above == \"horizontal_drain_centerline\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.3\"\n    must:\n        connection.above == \"horizontal_drain_centerline\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.905.3\"", "rule_name": "dry_vent_connection_height"}
{"type": "safety_factor_reasoning", "input": "For dry_vent_connection_height rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.905.3.", "rule_name": "dry_vent_connection_height", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent vertical rise: When vent.type == \"dry\" and must:, it is required that vertical_rise >= 6.inches and rise_above == \"highest_trap_flood_level_rim\"", "output": "rule vent_vertical_rise:\n    where:\n        vent.type == \"dry\"\n        must:\n        vertical_rise >= 6.inches\n        rise_above == \"highest_trap_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.4\"\n    must:\n        vertical_rise >= 6.inches\n        rise_above == \"highest_trap_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.905.4\"", "rule_name": "vent_vertical_rise"}
{"type": "bcl_to_physics", "input": "rule vent_vertical_rise with constraints: vertical_rise", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.905.4", "rule_name": "vent_vertical_rise"}
{"type": "bcl_completion", "input": "rule vent_vertical_rise:\n    where:\n        vent.type == \"dry\"\n    # Complete this rule", "output": "rule vent_vertical_rise:\n    where:\n        vent.type == \"dry\"\n        must:\n        vertical_rise >= 6.inches\n        rise_above == \"highest_trap_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.4\"\n    must:\n        vertical_rise >= 6.inches\n        rise_above == \"highest_trap_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.905.4\"", "rule_name": "vent_vertical_rise"}
{"type": "safety_factor_reasoning", "input": "For vent_vertical_rise rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.905.4.", "rule_name": "vent_vertical_rise", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent connection height: When vent.connects_to IN [\"vent_stack\", \"stack_vent\"] and must:, it is required that connection_height >= 6.inches and height_above == \"highest_fixture_flood_level_rim\"", "output": "rule vent_connection_height:\n    where:\n        vent.connects_to IN [\"vent_stack\", \"stack_vent\"]\n        must:\n        connection_height >= 6.inches\n        height_above == \"highest_fixture_flood_level_rim\"\n        if pipe.type IN [\"branch_vent\", \"relief_vent\", \"loop_vent\"]:\n        pipe.location >= 6.inches\n        location_above == \"highest_fixture_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.5\"\n    must:\n        connection_height >= 6.inches\n        height_above == \"highest_fixture_flood_level_rim\"\n        if pipe.type IN [\"branch_vent\", \"relief_vent\", \"loop_vent\"]:\n        pipe.location >= 6.inches\n        location_above == \"highest_fixture_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.905.5\"", "rule_name": "vent_connection_height"}
{"type": "bcl_to_physics", "input": "rule vent_connection_height with constraints: connection_height, location", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.905.5", "rule_name": "vent_connection_height"}
{"type": "bcl_completion", "input": "rule vent_connection_height:\n    where:\n        vent.connects_to IN [\"vent_stack\", \"stack_vent\"]\n    # Complete this rule", "output": "rule vent_connection_height:\n    where:\n        vent.connects_to IN [\"vent_stack\", \"stack_vent\"]\n        must:\n        connection_height >= 6.inches\n        height_above == \"highest_fixture_flood_level_rim\"\n        if pipe.type IN [\"branch_vent\", \"relief_vent\", \"loop_vent\"]:\n        pipe.location >= 6.inches\n        location_above == \"highest_fixture_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.5\"\n    must:\n        connection_height >= 6.inches\n        height_above == \"highest_fixture_flood_level_rim\"\n        if pipe.type IN [\"branch_vent\", \"relief_vent\", \"loop_vent\"]:\n        pipe.location >= 6.inches\n        location_above == \"highest_fixture_flood_level_rim\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.905.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.905.5\"", "rule_name": "vent_connection_height"}
{"type": "safety_factor_reasoning", "input": "For vent_connection_height rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.905.5.", "rule_name": "vent_connection_height", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for stack vent minimum size: When vent.type IN [\"stack_vent\", \"vent_stack\"] and must:, it is required that diameter >= max( and drain_served.diameter / 2,", "output": "rule stack_vent_minimum_size:\n    where:\n        vent.type IN [\"stack_vent\", \"vent_stack\"]\n        must:\n        diameter >= max(\n        drain_served.diameter / 2,\n        1.25.inches\n        )\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.1\"\n    must:\n        diameter >= max(\n        drain_served.diameter / 2,\n        1.25.inches\n        )\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.906.1\"", "rule_name": "stack_vent_minimum_size"}
{"type": "bcl_to_physics", "input": "rule stack_vent_minimum_size with conditions: diameter >= max(, drain_served.diameter / 2,", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.906.1", "rule_name": "stack_vent_minimum_size"}
{"type": "bcl_completion", "input": "rule stack_vent_minimum_size:\n    where:\n        vent.type IN [\"stack_vent\", \"vent_stack\"]\n    # Complete this rule", "output": "rule stack_vent_minimum_size:\n    where:\n        vent.type IN [\"stack_vent\", \"vent_stack\"]\n        must:\n        diameter >= max(\n        drain_served.diameter / 2,\n        1.25.inches\n        )\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.1\"\n    must:\n        diameter >= max(\n        drain_served.diameter / 2,\n        1.25.inches\n        )\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.906.1\"", "rule_name": "stack_vent_minimum_size"}
{"type": "safety_factor_reasoning", "input": "For stack_vent_minimum_size rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.906.1.", "rule_name": "stack_vent_minimum_size", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for individual vent size: When vent.type IN [\"individual\", \"branch\", \"circuit\", \"relief\"] and must:, it is required that diameter >= drain_served.required_diameter / 2 and diameter >= 1.25.inches", "output": "rule individual_vent_size:\n    where:\n        vent.type IN [\"individual\", \"branch\", \"circuit\", \"relief\"]\n        must:\n        diameter >= drain_served.required_diameter / 2\n        diameter >= 1.25.inches\n        if developed_length > 40.feet:\n        size_increase == \"one_nominal_size\"\n        increase_for == \"entire_length\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.2\"\n    must:\n        diameter >= drain_served.required_diameter / 2\n        diameter >= 1.25.inches\n        if developed_length > 40.feet:\n        size_increase == \"one_nominal_size\"\n        increase_for == \"entire_length\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.906.2\"", "rule_name": "individual_vent_size"}
{"type": "bcl_to_physics", "input": "rule individual_vent_size with constraints: diameter, developed_length", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.906.2", "rule_name": "individual_vent_size"}
{"type": "bcl_completion", "input": "rule individual_vent_size:\n    where:\n        vent.type IN [\"individual\", \"branch\", \"circuit\", \"relief\"]\n    # Complete this rule", "output": "rule individual_vent_size:\n    where:\n        vent.type IN [\"individual\", \"branch\", \"circuit\", \"relief\"]\n        must:\n        diameter >= drain_served.required_diameter / 2\n        diameter >= 1.25.inches\n        if developed_length > 40.feet:\n        size_increase == \"one_nominal_size\"\n        increase_for == \"entire_length\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.2\"\n    must:\n        diameter >= drain_served.required_diameter / 2\n        diameter >= 1.25.inches\n        if developed_length > 40.feet:\n        size_increase == \"one_nominal_size\"\n        increase_for == \"entire_length\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.906.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.906.2\"", "rule_name": "individual_vent_size"}
{"type": "safety_factor_reasoning", "input": "For individual_vent_size rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.906.2.", "rule_name": "individual_vent_size", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sump vent sizing: When vent.serves == \"sump\" and sump.has_pump == true, it is required that if pump.type != \"pneumatic\": and venting == \"same_as_gravity_system\"", "output": "rule sump_vent_sizing:\n    where:\n        vent.serves == \"sump\"\n        sump.has_pump == true\n        must:\n        if pump.type != \"pneumatic\":\n        venting == \"same_as_gravity_system\"\n        size_per == \"Table_906.5.1\"\n        elif pump.type == \"pneumatic_sewage_ejector\":\n        relief_pipe.to == \"independent_vent_stack\"\n        relief_pipe.relieves_to == \"atmospheric_pressure\"\n        relief_pipe.diameter >= 1.25.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.906.5\"\n    must:\n        if pump.type != \"pneumatic\":\n        venting == \"same_as_gravity_system\"\n        size_per == \"Table_906.5.1\"\n        elif pump.type == \"pneumatic_sewage_ejector\":\n        relief_pipe.to == \"independent_vent_stack\"\n        relief_pipe.relieves_to == \"atmospheric_pressure\"\n        relief_pipe.diameter >= 1.25.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.906.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.906.5\"", "rule_name": "sump_vent_sizing"}
{"type": "bcl_to_physics", "input": "rule sump_vent_sizing with constraints: diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.9.906.5", "rule_name": "sump_vent_sizing"}
{"type": "bcl_completion", "input": "rule sump_vent_sizing:\n    where:\n        vent.serves == \"sump\"\n    # Complete this rule", "output": "rule sump_vent_sizing:\n    where:\n        vent.serves == \"sump\"\n        sump.has_pump == true\n        must:\n        if pump.type != \"pneumatic\":\n        venting == \"same_as_gravity_system\"\n        size_per == \"Table_906.5.1\"\n        elif pump.type == \"pneumatic_sewage_ejector\":\n        relief_pipe.to == \"independent_vent_stack\"\n        relief_pipe.relieves_to == \"atmospheric_pressure\"\n        relief_pipe.diameter >= 1.25.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.906.5\"\n    must:\n        if pump.type != \"pneumatic\":\n        venting == \"same_as_gravity_system\"\n        size_per == \"Table_906.5.1\"\n        elif pump.type == \"pneumatic_sewage_ejector\":\n        relief_pipe.to == \"independent_vent_stack\"\n        relief_pipe.relieves_to == \"atmospheric_pressure\"\n        relief_pipe.diameter >= 1.25.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.906.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.906.5\"", "rule_name": "sump_vent_sizing"}
{"type": "safety_factor_reasoning", "input": "For sump_vent_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.906.5.", "rule_name": "sump_vent_sizing", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for trap to vent distance: When fixture.has_trap == true and must:, it is required that if trap.size == 1.25.inches AND slope == 0.25.inches_per_foot: and distance <= 5.feet", "output": "rule trap_to_vent_distance:\n    where:\n        fixture.has_trap == true\n        must:\n        if trap.size == 1.25.inches AND slope == 0.25.inches_per_foot:\n        distance <= 5.feet\n        elif trap.size == 1.5.inches AND slope == 0.25.inches_per_foot:\n        distance <= 6.feet\n        elif trap.size == 2.inches AND slope == 0.25.inches_per_foot:\n        distance <= 8.feet\n        elif trap.size == 3.inches AND slope == 0.125.inches_per_foot:\n        distance <= 12.feet\n        elif trap.size == 4.inches AND slope == 0.125.inches_per_foot:\n        distance <= 16.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.1\"\n    must:\n        if trap.size == 1.25.inches AND slope == 0.25.inches_per_foot:\n        distance <= 5.feet\n        elif trap.size == 1.5.inches AND slope == 0.25.inches_per_foot:\n        distance <= 6.feet\n        elif trap.size == 2.inches AND slope == 0.25.inches_per_foot:\n        distance <= 8.feet\n        elif trap.size == 3.inches AND slope == 0.125.inches_per_foot:\n        distance <= 12.feet\n        elif trap.size == 4.inches AND slope == 0.125.inches_per_foot:\n        distance <= 16.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.909.1\"", "rule_name": "trap_to_vent_distance"}
{"type": "bcl_to_physics", "input": "rule trap_to_vent_distance with constraints: distance, distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.909.1", "rule_name": "trap_to_vent_distance"}
{"type": "bcl_completion", "input": "rule trap_to_vent_distance:\n    where:\n        fixture.has_trap == true\n    # Complete this rule", "output": "rule trap_to_vent_distance:\n    where:\n        fixture.has_trap == true\n        must:\n        if trap.size == 1.25.inches AND slope == 0.25.inches_per_foot:\n        distance <= 5.feet\n        elif trap.size == 1.5.inches AND slope == 0.25.inches_per_foot:\n        distance <= 6.feet\n        elif trap.size == 2.inches AND slope == 0.25.inches_per_foot:\n        distance <= 8.feet\n        elif trap.size == 3.inches AND slope == 0.125.inches_per_foot:\n        distance <= 12.feet\n        elif trap.size == 4.inches AND slope == 0.125.inches_per_foot:\n        distance <= 16.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.1\"\n    must:\n        if trap.size == 1.25.inches AND slope == 0.25.inches_per_foot:\n        distance <= 5.feet\n        elif trap.size == 1.5.inches AND slope == 0.25.inches_per_foot:\n        distance <= 6.feet\n        elif trap.size == 2.inches AND slope == 0.25.inches_per_foot:\n        distance <= 8.feet\n        elif trap.size == 3.inches AND slope == 0.125.inches_per_foot:\n        distance <= 12.feet\n        elif trap.size == 4.inches AND slope == 0.125.inches_per_foot:\n        distance <= 16.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.909.1\"", "rule_name": "trap_to_vent_distance"}
{"type": "safety_factor_reasoning", "input": "For trap_to_vent_distance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.909.1.", "rule_name": "trap_to_vent_distance", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for fixture drain fall limit: When fixture.has_drain == true and fixture.type != \"water_closet\", it is required that total_fall_due_to_slope <= fixture_drain.diameter and vent_connection_not_below_trap_weir == true", "output": "rule fixture_drain_fall_limit:\n    where:\n        fixture.has_drain == true\n        fixture.type != \"water_closet\"\n        must:\n        total_fall_due_to_slope <= fixture_drain.diameter\n        vent_connection_not_below_trap_weir == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.2\"\n    must:\n        total_fall_due_to_slope <= fixture_drain.diameter\n        vent_connection_not_below_trap_weir == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.909.2\"", "rule_name": "fixture_drain_fall_limit"}
{"type": "bcl_to_physics", "input": "rule fixture_drain_fall_limit with conditions: total_fall_due_to_slope <= fixture_drain.diameter, vent_connection_not_below_trap_weir == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.909.2", "rule_name": "fixture_drain_fall_limit"}
{"type": "bcl_completion", "input": "rule fixture_drain_fall_limit:\n    where:\n        fixture.has_drain == true\n    # Complete this rule", "output": "rule fixture_drain_fall_limit:\n    where:\n        fixture.has_drain == true\n        fixture.type != \"water_closet\"\n        must:\n        total_fall_due_to_slope <= fixture_drain.diameter\n        vent_connection_not_below_trap_weir == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.2\"\n    must:\n        total_fall_due_to_slope <= fixture_drain.diameter\n        vent_connection_not_below_trap_weir == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.909.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.909.2\"", "rule_name": "fixture_drain_fall_limit"}
{"type": "safety_factor_reasoning", "input": "For fixture_drain_fall_limit rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.909.2.", "rule_name": "fixture_drain_fall_limit", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for crown vent prohibition: When trap.has_vent == true and must:, it is required that vent_distance_from_trap_weir >= 2 * pipe.diameter and safety_factor: 1.3", "output": "rule crown_vent_prohibition:\n    where:\n        trap.has_vent == true\n        must:\n        vent_distance_from_trap_weir >= 2 * pipe.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.909.3\"\n    must:\n        vent_distance_from_trap_weir >= 2 * pipe.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.909.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.909.3\"", "rule_name": "crown_vent_prohibition"}
{"type": "bcl_to_physics", "input": "rule crown_vent_prohibition with conditions: vent_distance_from_trap_weir >= 2 * pipe.diameter, safety_factor: 1.3", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.9.909.3", "rule_name": "crown_vent_prohibition"}
{"type": "bcl_completion", "input": "rule crown_vent_prohibition:\n    where:\n        trap.has_vent == true\n    # Complete this rule", "output": "rule crown_vent_prohibition:\n    where:\n        trap.has_vent == true\n        must:\n        vent_distance_from_trap_weir >= 2 * pipe.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.909.3\"\n    must:\n        vent_distance_from_trap_weir >= 2 * pipe.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.909.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.909.3\"", "rule_name": "crown_vent_prohibition"}
{"type": "safety_factor_reasoning", "input": "For crown_vent_prohibition rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.909.3.", "rule_name": "crown_vent_prohibition", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for common vent same level: When vent.type == \"common\" and fixtures.count == 2, it is required that vent_connection.at IN [ and \"drain_interconnection\",", "output": "rule common_vent_same_level:\n    where:\n        vent.type == \"common\"\n        fixtures.count == 2\n        fixture_drains.connect_at == \"same_level\"\n        must:\n        vent_connection.at IN [\n        \"drain_interconnection\",\n        \"downstream_of_interconnection\"\n        ]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.911.2\"\n    must:\n        vent_connection.at IN [\n        \"drain_interconnection\",\n        \"downstream_of_interconnection\"\n        ]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.911.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.9.911.2\"", "rule_name": "common_vent_same_level"}
{"type": "bcl_to_physics", "input": "rule common_vent_same_level with conditions: vent_connection.at IN [, \"drain_interconnection\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.9.911.2", "rule_name": "common_vent_same_level"}
{"type": "bcl_completion", "input": "rule common_vent_same_level:\n    where:\n        vent.type == \"common\"\n    # Complete this rule", "output": "rule common_vent_same_level:\n    where:\n        vent.type == \"common\"\n        fixtures.count == 2\n        fixture_drains.connect_at == \"same_level\"\n        must:\n        vent_connection.at IN [\n        \"drain_interconnection\",\n        \"downstream_of_interconnection\"\n        ]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.911.2\"\n    must:\n        vent_connection.at IN [\n        \"drain_interconnection\",\n        \"downstream_of_interconnection\"\n        ]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.911.2\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.9.911.2\"", "rule_name": "common_vent_same_level"}
{"type": "safety_factor_reasoning", "input": "For common_vent_same_level rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.911.2.", "rule_name": "common_vent_same_level", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for common vent different levels: When vent.type == \"common\" and fixtures.count == 2, it is required that vent.connects_as == \"vertical_drain_extension\" and vertical_drain.sized_per == \"Table_911.3\"", "output": "rule common_vent_different_levels:\n    where:\n        vent.type == \"common\"\n        fixtures.count == 2\n        fixture_drains.connect_at == \"different_levels\"\n        must:\n        vent.connects_as == \"vertical_drain_extension\"\n        vertical_drain.sized_per == \"Table_911.3\"\n        upper_fixture.type != \"water_closet\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.911.3\"\n    must:\n        vent.connects_as == \"vertical_drain_extension\"\n        vertical_drain.sized_per == \"Table_911.3\"\n        upper_fixture.type != \"water_closet\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.911.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.911.3\"", "rule_name": "common_vent_different_levels"}
{"type": "bcl_to_physics", "input": "rule common_vent_different_levels with conditions: vent.connects_as == \"vertical_drain_extension\", vertical_drain.sized_per == \"Table_911.3\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.911.3", "rule_name": "common_vent_different_levels"}
{"type": "bcl_completion", "input": "rule common_vent_different_levels:\n    where:\n        vent.type == \"common\"\n    # Complete this rule", "output": "rule common_vent_different_levels:\n    where:\n        vent.type == \"common\"\n        fixtures.count == 2\n        fixture_drains.connect_at == \"different_levels\"\n        must:\n        vent.connects_as == \"vertical_drain_extension\"\n        vertical_drain.sized_per == \"Table_911.3\"\n        upper_fixture.type != \"water_closet\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.911.3\"\n    must:\n        vent.connects_as == \"vertical_drain_extension\"\n        vertical_drain.sized_per == \"Table_911.3\"\n        upper_fixture.type != \"water_closet\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.911.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.911.3\"", "rule_name": "common_vent_different_levels"}
{"type": "safety_factor_reasoning", "input": "For common_vent_different_levels rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.911.3.", "rule_name": "common_vent_different_levels", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for horizontal wet vent: When vent.type == \"horizontal_wet\" and bathroom_groups <= 2, it is required that wet_vent.from == \"dry_vent_connection\" and wet_vent.to == \"most_downstream_fixture\"", "output": "rule horizontal_wet_vent:\n    where:\n        vent.type == \"horizontal_wet\"\n        bathroom_groups <= 2\n        bathroom_groups.same_floor == true\n        must:\n        wet_vent.from == \"dry_vent_connection\"\n        wet_vent.to == \"most_downstream_fixture\"\n        fixture_drains.connect_independently == true\n        additional_fixtures.discharge_downstream == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.1\"\n    must:\n        wet_vent.from == \"dry_vent_connection\"\n        wet_vent.to == \"most_downstream_fixture\"\n        fixture_drains.connect_independently == true\n        additional_fixtures.discharge_downstream == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.912.1\"", "rule_name": "horizontal_wet_vent"}
{"type": "bcl_to_physics", "input": "rule horizontal_wet_vent with conditions: wet_vent.from == \"dry_vent_connection\", wet_vent.to == \"most_downstream_fixture\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.912.1", "rule_name": "horizontal_wet_vent"}
{"type": "bcl_completion", "input": "rule horizontal_wet_vent:\n    where:\n        vent.type == \"horizontal_wet\"\n    # Complete this rule", "output": "rule horizontal_wet_vent:\n    where:\n        vent.type == \"horizontal_wet\"\n        bathroom_groups <= 2\n        bathroom_groups.same_floor == true\n        must:\n        wet_vent.from == \"dry_vent_connection\"\n        wet_vent.to == \"most_downstream_fixture\"\n        fixture_drains.connect_independently == true\n        additional_fixtures.discharge_downstream == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.1\"\n    must:\n        wet_vent.from == \"dry_vent_connection\"\n        wet_vent.to == \"most_downstream_fixture\"\n        fixture_drains.connect_independently == true\n        additional_fixtures.discharge_downstream == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.912.1\"", "rule_name": "horizontal_wet_vent"}
{"type": "safety_factor_reasoning", "input": "For horizontal_wet_vent rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.912.1.", "rule_name": "horizontal_wet_vent", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for wet vent sizing: When vent.type == \"wet\" and must:, it is required that dry_vent.size_based_on == \"largest_wet_vent_pipe\" and if fixture_units == 1:", "output": "rule wet_vent_sizing:\n    where:\n        vent.type == \"wet\"\n        must:\n        dry_vent.size_based_on == \"largest_wet_vent_pipe\"\n        if fixture_units == 1:\n        wet_vent.size >= 1.5.inches\n        elif fixture_units <= 4:\n        wet_vent.size >= 2.inches\n        elif fixture_units <= 6:\n        wet_vent.size >= 2.5.inches\n        elif fixture_units <= 12:\n        wet_vent.size >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.3\"\n    must:\n        dry_vent.size_based_on == \"largest_wet_vent_pipe\"\n        if fixture_units == 1:\n        wet_vent.size >= 1.5.inches\n        elif fixture_units <= 4:\n        wet_vent.size >= 2.inches\n        elif fixture_units <= 6:\n        wet_vent.size >= 2.5.inches\n        elif fixture_units <= 12:\n        wet_vent.size >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.912.3\"", "rule_name": "wet_vent_sizing"}
{"type": "bcl_to_physics", "input": "rule wet_vent_sizing with constraints: size, size", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.912.3", "rule_name": "wet_vent_sizing"}
{"type": "bcl_completion", "input": "rule wet_vent_sizing:\n    where:\n        vent.type == \"wet\"\n    # Complete this rule", "output": "rule wet_vent_sizing:\n    where:\n        vent.type == \"wet\"\n        must:\n        dry_vent.size_based_on == \"largest_wet_vent_pipe\"\n        if fixture_units == 1:\n        wet_vent.size >= 1.5.inches\n        elif fixture_units <= 4:\n        wet_vent.size >= 2.inches\n        elif fixture_units <= 6:\n        wet_vent.size >= 2.5.inches\n        elif fixture_units <= 12:\n        wet_vent.size >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.3\"\n    must:\n        dry_vent.size_based_on == \"largest_wet_vent_pipe\"\n        if fixture_units == 1:\n        wet_vent.size >= 1.5.inches\n        elif fixture_units <= 4:\n        wet_vent.size >= 2.inches\n        elif fixture_units <= 6:\n        wet_vent.size >= 2.5.inches\n        elif fixture_units <= 12:\n        wet_vent.size >= 3.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.912.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.912.3\"", "rule_name": "wet_vent_sizing"}
{"type": "safety_factor_reasoning", "input": "For wet_vent_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.912.3.", "rule_name": "wet_vent_sizing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for waste stack vent requirements: When stack.type == \"waste_stack_vent\" and must:, it is required that stack.vertical == true and offsets.prohibited == true", "output": "rule waste_stack_vent_requirements:\n    where:\n        stack.type == \"waste_stack_vent\"\n        must:\n        stack.vertical == true\n        offsets.prohibited == true\n        receives_water_closets == false\n        receives_urinals == false\n        fixture_drains.connect_separately == true\n        stack_vent.size >= waste_stack.size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.913.1-913.3\"\n    must:\n        stack.vertical == true\n        offsets.prohibited == true\n        receives_water_closets == false\n        receives_urinals == false\n        fixture_drains.connect_separately == true\n        stack_vent.size >= waste_stack.size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.913.1-913.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.913.1-913.3\"", "rule_name": "waste_stack_vent_requirements"}
{"type": "bcl_to_physics", "input": "rule waste_stack_vent_requirements with conditions: stack.vertical == true, offsets.prohibited == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.913.1-913.3", "rule_name": "waste_stack_vent_requirements"}
{"type": "bcl_completion", "input": "rule waste_stack_vent_requirements:\n    where:\n        stack.type == \"waste_stack_vent\"\n    # Complete this rule", "output": "rule waste_stack_vent_requirements:\n    where:\n        stack.type == \"waste_stack_vent\"\n        must:\n        stack.vertical == true\n        offsets.prohibited == true\n        receives_water_closets == false\n        receives_urinals == false\n        fixture_drains.connect_separately == true\n        stack_vent.size >= waste_stack.size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.913.1-913.3\"\n    must:\n        stack.vertical == true\n        offsets.prohibited == true\n        receives_water_closets == false\n        receives_urinals == false\n        fixture_drains.connect_separately == true\n        stack_vent.size >= waste_stack.size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.913.1-913.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.913.1-913.3\"", "rule_name": "waste_stack_vent_requirements"}
{"type": "safety_factor_reasoning", "input": "For waste_stack_vent_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.913.1-913.3.", "rule_name": "waste_stack_vent_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for circuit vent limits: When vent.type == \"circuit\" and must:, it is required that fixtures_per_branch <= 8 and fixture_drains.connect_horizontally == true", "output": "rule circuit_vent_limits:\n    where:\n        vent.type == \"circuit\"\n        must:\n        fixtures_per_branch <= 8\n        fixture_drains.connect_horizontally == true\n        vent_connection.between == \"two_most_upstream_fixtures\"\n        vent_section.slope <= 1/12  # 8.3% slope\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.914.1-914.3\"\n    must:\n        fixtures_per_branch <= 8\n        fixture_drains.connect_horizontally == true\n        vent_connection.between == \"two_most_upstream_fixtures\"\n        vent_section.slope <= 1/12  # 8.3% slope\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.914.1-914.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.914.1-914.3\"", "rule_name": "circuit_vent_limits"}
{"type": "bcl_to_physics", "input": "rule circuit_vent_limits with conditions: fixtures_per_branch <= 8, fixture_drains.connect_horizontally == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.914.1-914.3", "rule_name": "circuit_vent_limits"}
{"type": "bcl_completion", "input": "rule circuit_vent_limits:\n    where:\n        vent.type == \"circuit\"\n    # Complete this rule", "output": "rule circuit_vent_limits:\n    where:\n        vent.type == \"circuit\"\n        must:\n        fixtures_per_branch <= 8\n        fixture_drains.connect_horizontally == true\n        vent_connection.between == \"two_most_upstream_fixtures\"\n        vent_section.slope <= 1/12  # 8.3% slope\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.914.1-914.3\"\n    must:\n        fixtures_per_branch <= 8\n        fixture_drains.connect_horizontally == true\n        vent_connection.between == \"two_most_upstream_fixtures\"\n        vent_section.slope <= 1/12  # 8.3% slope\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.914.1-914.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.914.1-914.3\"", "rule_name": "circuit_vent_limits"}
{"type": "safety_factor_reasoning", "input": "For circuit_vent_limits rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.914.1-914.3.", "rule_name": "circuit_vent_limits", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for circuit vent relief: When vent.type == \"circuit\" and water_closets >= 4, it is required that relief_vent.required == true and relief_vent.connects_between == [\"stack\", \"most_downstream_fixture\"]", "output": "rule circuit_vent_relief:\n    where:\n        vent.type == \"circuit\"\n        water_closets >= 4\n        stack.receives_from_upper_branches == true\n        must:\n        relief_vent.required == true\n        relief_vent.connects_between == [\"stack\", \"most_downstream_fixture\"]\n        relief_vent.max_discharge <= 4.fixture_units\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.914.4\"\n    must:\n        relief_vent.required == true\n        relief_vent.connects_between == [\"stack\", \"most_downstream_fixture\"]\n        relief_vent.max_discharge <= 4.fixture_units\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.914.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.914.4\"", "rule_name": "circuit_vent_relief"}
{"type": "bcl_to_physics", "input": "rule circuit_vent_relief with constraints: max_discharge", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.9.914.4", "rule_name": "circuit_vent_relief"}
{"type": "bcl_completion", "input": "rule circuit_vent_relief:\n    where:\n        vent.type == \"circuit\"\n    # Complete this rule", "output": "rule circuit_vent_relief:\n    where:\n        vent.type == \"circuit\"\n        water_closets >= 4\n        stack.receives_from_upper_branches == true\n        must:\n        relief_vent.required == true\n        relief_vent.connects_between == [\"stack\", \"most_downstream_fixture\"]\n        relief_vent.max_discharge <= 4.fixture_units\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.914.4\"\n    must:\n        relief_vent.required == true\n        relief_vent.connects_between == [\"stack\", \"most_downstream_fixture\"]\n        relief_vent.max_discharge <= 4.fixture_units\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.914.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.914.4\"", "rule_name": "circuit_vent_relief"}
{"type": "safety_factor_reasoning", "input": "For circuit_vent_relief rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.914.4.", "rule_name": "circuit_vent_relief", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for combination waste vent fixtures: When system.type == \"combination_waste_and_vent\" and must:, it is required that fixtures.type IN [\"floor_drain\", \"sink\", \"lavatory\", \"drinking_fountain\"] and fixtures.type != \"clinical_sink\"", "output": "rule combination_waste_vent_fixtures:\n    where:\n        system.type == \"combination_waste_and_vent\"\n        must:\n        fixtures.type IN [\"floor_drain\", \"sink\", \"lavatory\", \"drinking_fountain\"]\n        fixtures.type != \"clinical_sink\"\n        vertical_distance <= 8.feet\n        slope <= 0.5.inches_per_foot  # 4% max\n        slope >= per_Table_704_1\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.915.1-915.2.1\"\n    must:\n        fixtures.type IN [\"floor_drain\", \"sink\", \"lavatory\", \"drinking_fountain\"]\n        fixtures.type != \"clinical_sink\"\n        vertical_distance <= 8.feet\n        slope <= 0.5.inches_per_foot  # 4% max\n        slope >= per_Table_704_1\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.915.1-915.2.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.915.1-915.2.1\"", "rule_name": "combination_waste_vent_fixtures"}
{"type": "bcl_to_physics", "input": "rule combination_waste_vent_fixtures with constraints: vertical_distance, slope", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.915.1-915.2.1", "rule_name": "combination_waste_vent_fixtures"}
{"type": "bcl_completion", "input": "rule combination_waste_vent_fixtures:\n    where:\n        system.type == \"combination_waste_and_vent\"\n    # Complete this rule", "output": "rule combination_waste_vent_fixtures:\n    where:\n        system.type == \"combination_waste_and_vent\"\n        must:\n        fixtures.type IN [\"floor_drain\", \"sink\", \"lavatory\", \"drinking_fountain\"]\n        fixtures.type != \"clinical_sink\"\n        vertical_distance <= 8.feet\n        slope <= 0.5.inches_per_foot  # 4% max\n        slope >= per_Table_704_1\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.915.1-915.2.1\"\n    must:\n        fixtures.type IN [\"floor_drain\", \"sink\", \"lavatory\", \"drinking_fountain\"]\n        fixtures.type != \"clinical_sink\"\n        vertical_distance <= 8.feet\n        slope <= 0.5.inches_per_foot  # 4% max\n        slope >= per_Table_704_1\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.915.1-915.2.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.915.1-915.2.1\"", "rule_name": "combination_waste_vent_fixtures"}
{"type": "safety_factor_reasoning", "input": "For combination_waste_vent_fixtures rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.915.1-915.2.1.", "rule_name": "combination_waste_vent_fixtures", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for island fixture vent allowed: When fixture.location == \"island\" and vent.type == \"island\", it is required that fixture.type IN [\"sink\", \"lavatory\"] and if fixture.type == \"kitchen_sink\":", "output": "rule island_fixture_vent_allowed:\n    where:\n        fixture.location == \"island\"\n        vent.type == \"island\"\n        must:\n        fixture.type IN [\"sink\", \"lavatory\"]\n        if fixture.type == \"kitchen_sink\":\n        accessories IN [\"dishwasher\", \"disposer\", \"both\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.916.1\"\n    must:\n        fixture.type IN [\"sink\", \"lavatory\"]\n        if fixture.type == \"kitchen_sink\":\n        accessories IN [\"dishwasher\", \"disposer\", \"both\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.916.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.9.916.1\"", "rule_name": "island_fixture_vent_allowed"}
{"type": "bcl_to_physics", "input": "rule island_fixture_vent_allowed with conditions: fixture.type IN [\"sink\", \"lavatory\"], if fixture.type == \"kitchen_sink\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.9.916.1", "rule_name": "island_fixture_vent_allowed"}
{"type": "bcl_completion", "input": "rule island_fixture_vent_allowed:\n    where:\n        fixture.location == \"island\"\n    # Complete this rule", "output": "rule island_fixture_vent_allowed:\n    where:\n        fixture.location == \"island\"\n        vent.type == \"island\"\n        must:\n        fixture.type IN [\"sink\", \"lavatory\"]\n        if fixture.type == \"kitchen_sink\":\n        accessories IN [\"dishwasher\", \"disposer\", \"both\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.916.1\"\n    must:\n        fixture.type IN [\"sink\", \"lavatory\"]\n        if fixture.type == \"kitchen_sink\":\n        accessories IN [\"dishwasher\", \"disposer\", \"both\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.9.916.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.9.916.1\"", "rule_name": "island_fixture_vent_allowed"}
{"type": "safety_factor_reasoning", "input": "For island_fixture_vent_allowed rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.916.1.", "rule_name": "island_fixture_vent_allowed", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for island vent below flood rim: When vent.type == \"island\" and vent.below_flood_level_rim == true, it is required that installation_per == \"Chapter_7\" and connection.full_size == true", "output": "rule island_vent_below_flood_rim:\n    where:\n        vent.type == \"island\"\n        vent.below_flood_level_rim == true\n        must:\n        installation_per == \"Chapter_7\"\n        connection.full_size == true\n        connection.to IN [\"vertical_drain\", \"top_half_horizontal_drain\"]\n        cleanouts.provided == true\n        cleanouts.permit_bidirectional_rodding == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.916.3\"\n    must:\n        installation_per == \"Chapter_7\"\n        connection.full_size == true\n        connection.to IN [\"vertical_drain\", \"top_half_horizontal_drain\"]\n        cleanouts.provided == true\n        cleanouts.permit_bidirectional_rodding == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.916.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.916.3\"", "rule_name": "island_vent_below_flood_rim"}
{"type": "bcl_to_physics", "input": "rule island_vent_below_flood_rim with conditions: installation_per == \"Chapter_7\", connection.full_size == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.9.916.3", "rule_name": "island_vent_below_flood_rim"}
{"type": "bcl_completion", "input": "rule island_vent_below_flood_rim:\n    where:\n        vent.type == \"island\"\n    # Complete this rule", "output": "rule island_vent_below_flood_rim:\n    where:\n        vent.type == \"island\"\n        vent.below_flood_level_rim == true\n        must:\n        installation_per == \"Chapter_7\"\n        connection.full_size == true\n        connection.to IN [\"vertical_drain\", \"top_half_horizontal_drain\"]\n        cleanouts.provided == true\n        cleanouts.permit_bidirectional_rodding == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.916.3\"\n    must:\n        installation_per == \"Chapter_7\"\n        connection.full_size == true\n        connection.to IN [\"vertical_drain\", \"top_half_horizontal_drain\"]\n        cleanouts.provided == true\n        cleanouts.permit_bidirectional_rodding == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.916.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.916.3\"", "rule_name": "island_vent_below_flood_rim"}
{"type": "safety_factor_reasoning", "input": "For island_vent_below_flood_rim rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.916.3.", "rule_name": "island_vent_below_flood_rim", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for single stack vent size: When system.type == \"single_stack_vent\" and must:, it is required that stack.uniformly_sized == true and stack_vent.size == drainage_stack.size", "output": "rule single_stack_vent_size:\n    where:\n        system.type == \"single_stack_vent\"\n        must:\n        stack.uniformly_sized == true\n        stack_vent.size == drainage_stack.size\n        if stack.size == 3.inches:\n        water_closets <= 2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.2\"\n    must:\n        stack.uniformly_sized == true\n        stack_vent.size == drainage_stack.size\n        if stack.size == 3.inches:\n        water_closets <= 2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.917.2\"", "rule_name": "single_stack_vent_size"}
{"type": "bcl_to_physics", "input": "rule single_stack_vent_size with conditions: stack.uniformly_sized == true, stack_vent.size == drainage_stack.size", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.917.2", "rule_name": "single_stack_vent_size"}
{"type": "bcl_completion", "input": "rule single_stack_vent_size:\n    where:\n        system.type == \"single_stack_vent\"\n    # Complete this rule", "output": "rule single_stack_vent_size:\n    where:\n        system.type == \"single_stack_vent\"\n        must:\n        stack.uniformly_sized == true\n        stack_vent.size == drainage_stack.size\n        if stack.size == 3.inches:\n        water_closets <= 2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.2\"\n    must:\n        stack.uniformly_sized == true\n        stack_vent.size == drainage_stack.size\n        if stack.size == 3.inches:\n        water_closets <= 2\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.917.2\"", "rule_name": "single_stack_vent_size"}
{"type": "safety_factor_reasoning", "input": "For single_stack_vent_size rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.917.2.", "rule_name": "single_stack_vent_size", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for single stack branch limits: When system.type == \"single_stack_vent\" and must:, it is required that if fixture.type == \"water_closet\": and horizontal_distance <= 4.feet", "output": "rule single_stack_branch_limits:\n    where:\n        system.type == \"single_stack_vent\"\n        must:\n        if fixture.type == \"water_closet\":\n        horizontal_distance <= 4.feet\n        if connection.type == \"sanitary_tee\":\n        horizontal_distance <= 8.feet\n        else:\n        horizontal_distance <= 12.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.4\"\n    must:\n        if fixture.type == \"water_closet\":\n        horizontal_distance <= 4.feet\n        if connection.type == \"sanitary_tee\":\n        horizontal_distance <= 8.feet\n        else:\n        horizontal_distance <= 12.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.917.4\"", "rule_name": "single_stack_branch_limits"}
{"type": "bcl_to_physics", "input": "rule single_stack_branch_limits with constraints: horizontal_distance, horizontal_distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.917.4", "rule_name": "single_stack_branch_limits"}
{"type": "bcl_completion", "input": "rule single_stack_branch_limits:\n    where:\n        system.type == \"single_stack_vent\"\n    # Complete this rule", "output": "rule single_stack_branch_limits:\n    where:\n        system.type == \"single_stack_vent\"\n        must:\n        if fixture.type == \"water_closet\":\n        horizontal_distance <= 4.feet\n        if connection.type == \"sanitary_tee\":\n        horizontal_distance <= 8.feet\n        else:\n        horizontal_distance <= 12.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.4\"\n    must:\n        if fixture.type == \"water_closet\":\n        horizontal_distance <= 4.feet\n        if connection.type == \"sanitary_tee\":\n        horizontal_distance <= 8.feet\n        else:\n        horizontal_distance <= 12.feet\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.917.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.917.4\"", "rule_name": "single_stack_branch_limits"}
{"type": "safety_factor_reasoning", "input": "For single_stack_branch_limits rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.917.4.", "rule_name": "single_stack_branch_limits", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for air admittance valve standards: When valve.type == \"air_admittance\" and must:, it is required that if valve.use == \"stack\": and valve.conforms_to == \"ASSE_1050\"", "output": "rule air_admittance_valve_standards:\n    where:\n        valve.type == \"air_admittance\"\n        must:\n        if valve.use == \"stack\":\n        valve.conforms_to == \"ASSE_1050\"\n        elif valve.use IN [\"individual\", \"branch\"]:\n        valve.conforms_to == \"ASSE_1051\"\n        installation.after == \"DWV_testing\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.1-918.2\"\n    must:\n        if valve.use == \"stack\":\n        valve.conforms_to == \"ASSE_1050\"\n        elif valve.use IN [\"individual\", \"branch\"]:\n        valve.conforms_to == \"ASSE_1051\"\n        installation.after == \"DWV_testing\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.1-918.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.918.1-918.2\"", "rule_name": "air_admittance_valve_standards"}
{"type": "bcl_to_physics", "input": "rule air_admittance_valve_standards with conditions: if valve.use == \"stack\":, valve.conforms_to == \"ASSE_1050\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.918.1-918.2", "rule_name": "air_admittance_valve_standards"}
{"type": "bcl_completion", "input": "rule air_admittance_valve_standards:\n    where:\n        valve.type == \"air_admittance\"\n    # Complete this rule", "output": "rule air_admittance_valve_standards:\n    where:\n        valve.type == \"air_admittance\"\n        must:\n        if valve.use == \"stack\":\n        valve.conforms_to == \"ASSE_1050\"\n        elif valve.use IN [\"individual\", \"branch\"]:\n        valve.conforms_to == \"ASSE_1051\"\n        installation.after == \"DWV_testing\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.1-918.2\"\n    must:\n        if valve.use == \"stack\":\n        valve.conforms_to == \"ASSE_1050\"\n        elif valve.use IN [\"individual\", \"branch\"]:\n        valve.conforms_to == \"ASSE_1051\"\n        installation.after == \"DWV_testing\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.1-918.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.918.1-918.2\"", "rule_name": "air_admittance_valve_standards"}
{"type": "safety_factor_reasoning", "input": "For air_admittance_valve_standards rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.918.1-918.2.", "rule_name": "air_admittance_valve_standards", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for air admittance valve location: When valve.type == \"air_admittance\" and must:, it is required that if valve.use IN [\"individual\", \"branch\"]: and height >= 4.inches  # Above branch drain", "output": "rule air_admittance_valve_location:\n    where:\n        valve.type == \"air_admittance\"\n        must:\n        if valve.use IN [\"individual\", \"branch\"]:\n        height >= 4.inches  # Above branch drain\n        elif valve.use == \"stack\":\n        height >= 6.inches  # Above highest fixture flood rim\n        height_above_insulation >= 6.inches\n        access.provided == true\n        air_entry.allowed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.4-918.5\"\n    must:\n        if valve.use IN [\"individual\", \"branch\"]:\n        height >= 4.inches  # Above branch drain\n        elif valve.use == \"stack\":\n        height >= 6.inches  # Above highest fixture flood rim\n        height_above_insulation >= 6.inches\n        access.provided == true\n        air_entry.allowed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.4-918.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.918.4-918.5\"", "rule_name": "air_admittance_valve_location"}
{"type": "bcl_to_physics", "input": "rule air_admittance_valve_location with constraints: height, height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.9.918.4-918.5", "rule_name": "air_admittance_valve_location"}
{"type": "bcl_completion", "input": "rule air_admittance_valve_location:\n    where:\n        valve.type == \"air_admittance\"\n    # Complete this rule", "output": "rule air_admittance_valve_location:\n    where:\n        valve.type == \"air_admittance\"\n        must:\n        if valve.use IN [\"individual\", \"branch\"]:\n        height >= 4.inches  # Above branch drain\n        elif valve.use == \"stack\":\n        height >= 6.inches  # Above highest fixture flood rim\n        height_above_insulation >= 6.inches\n        access.provided == true\n        air_entry.allowed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.4-918.5\"\n    must:\n        if valve.use IN [\"individual\", \"branch\"]:\n        height >= 4.inches  # Above branch drain\n        elif valve.use == \"stack\":\n        height >= 6.inches  # Above highest fixture flood rim\n        height_above_insulation >= 6.inches\n        access.provided == true\n        air_entry.allowed == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.9.918.4-918.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.9.918.4-918.5\"", "rule_name": "air_admittance_valve_location"}
{"type": "safety_factor_reasoning", "input": "For air_admittance_valve_location rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.9.918.4-918.5.", "rule_name": "air_admittance_valve_location", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for air admittance valve limitations: When valve.type == \"air_admittance\" and must:, it is required that if system.type == \"special_waste\": and valve.conforms_to == \"ASSE_1049\"", "output": "rule air_admittance_valve_limitations:\n    where:\n        valve.type == \"air_admittance\"\n        must:\n        if system.type == \"special_waste\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_per == \"Section_702.5\"\n        valve.tested_per == \"ASTM_F1412\"\n        location != \"air_plenum\"\n        use != \"outdoor_clearance_reduction\"\n        system.has_outdoor_vent >= 1\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.918.7-918.8\"\n        constraint trap_seal_siphonage:\n        where:\n        trap.has_seal == true\n        must:\n        pressure_difference = abs(atmospheric_pressure - system_pressure)\n        pressure_difference <= 1.inch_water_column\n        negative_pressure < trap_seal.depth * water.density * gravity\n        safety_factor: 1.5\n        constraint vent_airflow_requirement:\n        where:\n        vent.serves_drainage == true\n        must:\n        air_flow_rate >= drainage_flow_rate\n        pressure_drop = flow.friction_loss(vent_length, vent_diameter, air_velocity)\n        pressure_drop < allowable_pressure_change\n        safety_factor: 1.3\n        constraint stack_effect_flow:\n        where:\n        vent.extends_vertically == true\n        must:\n        stack_pressure = air.density_difference * gravity * height\n        stack_pressure > flow.friction_loss(height, diameter, velocity)\n        safety_factor: 1.2\n        constraint frost_closure_diameter:\n        where:\n        climate.freezing == true\n        vent.exposed_to_cold == true\n        must:\n        ice_formation_rate = moisture_flux * freeze_time\n        remaining_area = pipe.area - ice_buildup_area\n        remaining_area > required_vent_area\n        safety_factor: 2.0\n        constraint wet_vent_flow_separation:\n        where:\n        vent.type == \"wet\"\n        must:\n        water_depth = flow.manning_depth(flow_rate, diameter, slope)\n        air_space = pipe.diameter - water_depth\n        air_space >= pipe.diameter * 0.5  # 50% minimum\n        safety_factor: 1.5\n        constraint circuit_vent_pressure_relief:\n        where:\n        vent.type == \"circuit\"\n        fixtures.connected >= 4\n        must:\n        max_pressure_variation = flow.pressure_gradient * branch_length\n        if max_pressure_variation > 0.5.inch_water_column:\n        relief_vent.required == true\n    must:\n        if system.type == \"special_waste\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_per == \"Section_702.5\"\n        valve.tested_per == \"ASTM_F1412\"\n        location != \"air_plenum\"\n        use != \"outdoor_clearance_reduction\"\n        system.has_outdoor_vent >= 1\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.918.7-918.8\"\n        constraint trap_seal_siphonage:\n        where:\n        trap.has_seal == true\n        must:\n        pressure_difference = abs(atmospheric_pressure - system_pressure)\n        pressure_difference <= 1.inch_water_column\n        negative_pressure < trap_seal.depth * water.density * gravity\n        safety_factor: 1.5\n        constraint vent_airflow_requirement:\n        where:\n        vent.serves_drainage == true\n        must:\n        air_flow_rate >= drainage_flow_rate\n        pressure_drop = flow.friction_loss(vent_length, vent_diameter, air_velocity)\n        pressure_drop < allowable_pressure_change\n        safety_factor: 1.3\n        constraint stack_effect_flow:\n        where:\n        vent.extends_vertically == true\n        must:\n        stack_pressure = air.density_difference * gravity * height\n        stack_pressure > flow.friction_loss(height, diameter, velocity)\n        safety_factor: 1.2\n        constraint frost_closure_diameter:\n        where:\n        climate.freezing == true\n        vent.exposed_to_cold == true\n        must:\n        ice_formation_rate = moisture_flux * freeze_time\n        remaining_area = pipe.area - ice_buildup_area\n        remaining_area > required_vent_area\n        safety_factor: 2.0\n        constraint wet_vent_flow_separation:\n        where:\n        vent.type == \"wet\"\n        must:\n        water_depth = flow.manning_depth(flow_rate, diameter, slope)\n        air_space = pipe.diameter - water_depth\n        air_space >= pipe.diameter * 0.5  # 50% minimum\n        safety_factor: 1.5\n        constraint circuit_vent_pressure_relief:\n        where:\n        vent.type == \"circuit\"\n        fixtures.connected >= 4\n        must:\n        max_pressure_variation = flow.pressure_gradient * branch_length\n        if max_pressure_variation > 0.5.inch_water_column:\n        relief_vent.required == true\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.918.7-918.8\"", "rule_name": "air_admittance_valve_limitations"}
{"type": "bcl_to_physics", "input": "rule air_admittance_valve_limitations with constraints: pressure_difference, max_pressure_variation", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.9.918.7-918.8", "rule_name": "air_admittance_valve_limitations"}
{"type": "bcl_completion", "input": "rule air_admittance_valve_limitations:\n    where:\n        valve.type == \"air_admittance\"\n    # Complete this rule", "output": "rule air_admittance_valve_limitations:\n    where:\n        valve.type == \"air_admittance\"\n        must:\n        if system.type == \"special_waste\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_per == \"Section_702.5\"\n        valve.tested_per == \"ASTM_F1412\"\n        location != \"air_plenum\"\n        use != \"outdoor_clearance_reduction\"\n        system.has_outdoor_vent >= 1\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.918.7-918.8\"\n        constraint trap_seal_siphonage:\n        where:\n        trap.has_seal == true\n        must:\n        pressure_difference = abs(atmospheric_pressure - system_pressure)\n        pressure_difference <= 1.inch_water_column\n        negative_pressure < trap_seal.depth * water.density * gravity\n        safety_factor: 1.5\n        constraint vent_airflow_requirement:\n        where:\n        vent.serves_drainage == true\n        must:\n        air_flow_rate >= drainage_flow_rate\n        pressure_drop = flow.friction_loss(vent_length, vent_diameter, air_velocity)\n        pressure_drop < allowable_pressure_change\n        safety_factor: 1.3\n        constraint stack_effect_flow:\n        where:\n        vent.extends_vertically == true\n        must:\n        stack_pressure = air.density_difference * gravity * height\n        stack_pressure > flow.friction_loss(height, diameter, velocity)\n        safety_factor: 1.2\n        constraint frost_closure_diameter:\n        where:\n        climate.freezing == true\n        vent.exposed_to_cold == true\n        must:\n        ice_formation_rate = moisture_flux * freeze_time\n        remaining_area = pipe.area - ice_buildup_area\n        remaining_area > required_vent_area\n        safety_factor: 2.0\n        constraint wet_vent_flow_separation:\n        where:\n        vent.type == \"wet\"\n        must:\n        water_depth = flow.manning_depth(flow_rate, diameter, slope)\n        air_space = pipe.diameter - water_depth\n        air_space >= pipe.diameter * 0.5  # 50% minimum\n        safety_factor: 1.5\n        constraint circuit_vent_pressure_relief:\n        where:\n        vent.type == \"circuit\"\n        fixtures.connected >= 4\n        must:\n        max_pressure_variation = flow.pressure_gradient * branch_length\n        if max_pressure_variation > 0.5.inch_water_column:\n        relief_vent.required == true\n    must:\n        if system.type == \"special_waste\":\n        valve.conforms_to == \"ASSE_1049\"\n        valve.material_per == \"Section_702.5\"\n        valve.tested_per == \"ASTM_F1412\"\n        location != \"air_plenum\"\n        use != \"outdoor_clearance_reduction\"\n        system.has_outdoor_vent >= 1\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.9.918.7-918.8\"\n        constraint trap_seal_siphonage:\n        where:\n        trap.has_seal == true\n        must:\n        pressure_difference = abs(atmospheric_pressure - system_pressure)\n        pressure_difference <= 1.inch_water_column\n        negative_pressure < trap_seal.depth * water.density * gravity\n        safety_factor: 1.5\n        constraint vent_airflow_requirement:\n        where:\n        vent.serves_drainage == true\n        must:\n        air_flow_rate >= drainage_flow_rate\n        pressure_drop = flow.friction_loss(vent_length, vent_diameter, air_velocity)\n        pressure_drop < allowable_pressure_change\n        safety_factor: 1.3\n        constraint stack_effect_flow:\n        where:\n        vent.extends_vertically == true\n        must:\n        stack_pressure = air.density_difference * gravity * height\n        stack_pressure > flow.friction_loss(height, diameter, velocity)\n        safety_factor: 1.2\n        constraint frost_closure_diameter:\n        where:\n        climate.freezing == true\n        vent.exposed_to_cold == true\n        must:\n        ice_formation_rate = moisture_flux * freeze_time\n        remaining_area = pipe.area - ice_buildup_area\n        remaining_area > required_vent_area\n        safety_factor: 2.0\n        constraint wet_vent_flow_separation:\n        where:\n        vent.type == \"wet\"\n        must:\n        water_depth = flow.manning_depth(flow_rate, diameter, slope)\n        air_space = pipe.diameter - water_depth\n        air_space >= pipe.diameter * 0.5  # 50% minimum\n        safety_factor: 1.5\n        constraint circuit_vent_pressure_relief:\n        where:\n        vent.type == \"circuit\"\n        fixtures.connected >= 4\n        must:\n        max_pressure_variation = flow.pressure_gradient * branch_length\n        if max_pressure_variation > 0.5.inch_water_column:\n        relief_vent.required == true\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.9.918.7-918.8\"", "rule_name": "air_admittance_valve_limitations"}
{"type": "safety_factor_reasoning", "input": "For air_admittance_valve_limitations rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.9.918.7-918.8.", "rule_name": "air_admittance_valve_limitations", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for fixture trap requirements: When fixture.type == \"plumbing_fixture\" and fixture.integral_trap != true, it is required that trap.type == \"liquid_seal\" and trap.individual == true", "output": "rule fixture_trap_requirements:\n    where:\n        fixture.type == \"plumbing_fixture\"\n        fixture.integral_trap != true\n        must:\n        trap.type == \"liquid_seal\"\n        trap.individual == true\n        vertical_distance(fixture.outlet, trap.weir) <= 24.inches\n        horizontal_distance(fixture.outlet.centerline, trap.inlet.centerline) <= 30.inches\n        fixture.double_trapped == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    must:\n        trap.type == \"liquid_seal\"\n        trap.individual == true\n        vertical_distance(fixture.outlet, trap.weir) <= 24.inches\n        horizontal_distance(fixture.outlet.centerline, trap.inlet.centerline) <= 30.inches\n        fixture.double_trapped == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.1\"", "rule_name": "fixture_trap_requirements"}
{"type": "bcl_to_physics", "input": "rule fixture_trap_requirements with conditions: trap.type == \"liquid_seal\", trap.individual == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.1", "rule_name": "fixture_trap_requirements"}
{"type": "bcl_completion", "input": "rule fixture_trap_requirements:\n    where:\n        fixture.type == \"plumbing_fixture\"\n    # Complete this rule", "output": "rule fixture_trap_requirements:\n    where:\n        fixture.type == \"plumbing_fixture\"\n        fixture.integral_trap != true\n        must:\n        trap.type == \"liquid_seal\"\n        trap.individual == true\n        vertical_distance(fixture.outlet, trap.weir) <= 24.inches\n        horizontal_distance(fixture.outlet.centerline, trap.inlet.centerline) <= 30.inches\n        fixture.double_trapped == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    must:\n        trap.type == \"liquid_seal\"\n        trap.individual == true\n        vertical_distance(fixture.outlet, trap.weir) <= 24.inches\n        horizontal_distance(fixture.outlet.centerline, trap.inlet.centerline) <= 30.inches\n        fixture.double_trapped == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.1\"", "rule_name": "fixture_trap_requirements"}
{"type": "safety_factor_reasoning", "input": "For fixture_trap_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1002.1.", "rule_name": "fixture_trap_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for combination fixture trap: When fixture.type == \"combination_plumbing_fixture\" and fixture.compartments == 2, it is required that depth_difference(compartment[0], compartment[1]) <= 6.inches and distance_between(compartment[0].outlet, compartment[1].outlet) <= 30.inches", "output": "rule combination_fixture_trap:\n    where:\n        fixture.type == \"combination_plumbing_fixture\"\n        fixture.compartments == 2\n        must:\n        depth_difference(compartment[0], compartment[1]) <= 6.inches\n        distance_between(compartment[0].outlet, compartment[1].outlet) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    must:\n        depth_difference(compartment[0], compartment[1]) <= 6.inches\n        distance_between(compartment[0].outlet, compartment[1].outlet) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.1\"", "rule_name": "combination_fixture_trap"}
{"type": "bcl_to_physics", "input": "rule combination_fixture_trap with conditions: depth_difference(compartment[0], compartment[1]) <= 6.inches, distance_between(compartment[0].outlet, compartment[1].outlet) <= 30.inches", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.1", "rule_name": "combination_fixture_trap"}
{"type": "bcl_completion", "input": "rule combination_fixture_trap:\n    where:\n        fixture.type == \"combination_plumbing_fixture\"\n    # Complete this rule", "output": "rule combination_fixture_trap:\n    where:\n        fixture.type == \"combination_plumbing_fixture\"\n        fixture.compartments == 2\n        must:\n        depth_difference(compartment[0], compartment[1]) <= 6.inches\n        distance_between(compartment[0].outlet, compartment[1].outlet) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    must:\n        depth_difference(compartment[0], compartment[1]) <= 6.inches\n        distance_between(compartment[0].outlet, compartment[1].outlet) <= 30.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.1\"", "rule_name": "combination_fixture_trap"}
{"type": "safety_factor_reasoning", "input": "For combination_fixture_trap rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1002.1.", "rule_name": "combination_fixture_trap", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for parking structure floor drains: When floor_drain.location == \"multilevel_parking_structure\" and should:, ", "output": "rule parking_structure_floor_drains:\n    where:\n        floor_drain.location == \"multilevel_parking_structure\"\n        should:\n        if discharge_to == \"building_storm_sewer\":\n        floor_drain.individually_trapped == false\n        if discharge_to == \"combined_sewer\" AND main_trap.installed == true:\n        floor_drain.individually_trapped == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1002.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.10.1002.1\"", "rule_name": "parking_structure_floor_drains"}
{"type": "bcl_to_physics", "input": "rule parking_structure_floor_drains with conditions: floor_drain.location == \"multilevel_parking_structure\", should:", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.1", "rule_name": "parking_structure_floor_drains"}
{"type": "bcl_completion", "input": "rule parking_structure_floor_drains:\n    where:\n        floor_drain.location == \"multilevel_parking_structure\"\n    # Complete this rule", "output": "rule parking_structure_floor_drains:\n    where:\n        floor_drain.location == \"multilevel_parking_structure\"\n        should:\n        if discharge_to == \"building_storm_sewer\":\n        floor_drain.individually_trapped == false\n        if discharge_to == \"combined_sewer\" AND main_trap.installed == true:\n        floor_drain.individually_trapped == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1002.1\"\n    should:\n        if discharge_to == \"building_storm_sewer\":\n        floor_drain.individually_trapped == false\n        if discharge_to == \"combined_sewer\" AND main_trap.installed == true:\n        floor_drain.individually_trapped == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1002.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.10.1002.1\"", "rule_name": "parking_structure_floor_drains"}
{"type": "safety_factor_reasoning", "input": "For parking_structure_floor_drains rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1002.1.", "rule_name": "parking_structure_floor_drains", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for trap design specifications: When fixture.trap.installed == true and must:, it is required that trap.self_scouring == true and if trap.has_interior_partitions == true:", "output": "rule trap_design_specifications:\n    where:\n        fixture.trap.installed == true\n        must:\n        trap.self_scouring == true\n        if trap.has_interior_partitions == true:\n        trap.integral_with_fixture == true OR trap.material.corrosion_resistant == true\n        slip_joints.location IN [\"trap_inlet\", \"trap_outlet\", \"within_trap_seal\"]\n        slip_joints.gasket.type == \"elastomeric\"\n        slip_joints.gasket.approved == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.2\"\n    must:\n        trap.self_scouring == true\n        if trap.has_interior_partitions == true:\n        trap.integral_with_fixture == true OR trap.material.corrosion_resistant == true\n        slip_joints.location IN [\"trap_inlet\", \"trap_outlet\", \"within_trap_seal\"]\n        slip_joints.gasket.type == \"elastomeric\"\n        slip_joints.gasket.approved == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.2\"", "rule_name": "trap_design_specifications"}
{"type": "bcl_to_physics", "input": "rule trap_design_specifications with conditions: trap.self_scouring == true, if trap.has_interior_partitions == true:", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.2", "rule_name": "trap_design_specifications"}
{"type": "bcl_completion", "input": "rule trap_design_specifications:\n    where:\n        fixture.trap.installed == true\n    # Complete this rule", "output": "rule trap_design_specifications:\n    where:\n        fixture.trap.installed == true\n        must:\n        trap.self_scouring == true\n        if trap.has_interior_partitions == true:\n        trap.integral_with_fixture == true OR trap.material.corrosion_resistant == true\n        slip_joints.location IN [\"trap_inlet\", \"trap_outlet\", \"within_trap_seal\"]\n        slip_joints.gasket.type == \"elastomeric\"\n        slip_joints.gasket.approved == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.2\"\n    must:\n        trap.self_scouring == true\n        if trap.has_interior_partitions == true:\n        trap.integral_with_fixture == true OR trap.material.corrosion_resistant == true\n        slip_joints.location IN [\"trap_inlet\", \"trap_outlet\", \"within_trap_seal\"]\n        slip_joints.gasket.type == \"elastomeric\"\n        slip_joints.gasket.approved == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.2\"", "rule_name": "trap_design_specifications"}
{"type": "safety_factor_reasoning", "input": "For trap_design_specifications rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1002.2.", "rule_name": "trap_design_specifications", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for prohibited trap types: When trap.installed == true and must:, it is required that trap.type NOT IN [\"moving_parts\", \"bell\", \"crown_vented\", \"S_trap\"] and if trap.type == \"drum\":", "output": "rule prohibited_trap_types:\n    where:\n        trap.installed == true\n        must:\n        trap.type NOT IN [\"moving_parts\", \"bell\", \"crown_vented\", \"S_trap\"]\n        if trap.type == \"drum\":\n        trap.use IN [\"solids_interceptor\", \"chemical_waste_system\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.10.1002.3\"\n    must:\n        trap.type NOT IN [\"moving_parts\", \"bell\", \"crown_vented\", \"S_trap\"]\n        if trap.type == \"drum\":\n        trap.use IN [\"solids_interceptor\", \"chemical_waste_system\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.10.1002.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.10.1002.3\"", "rule_name": "prohibited_trap_types"}
{"type": "bcl_to_physics", "input": "rule prohibited_trap_types with conditions: trap.type NOT IN [\"moving_parts\", \"bell\", \"crown_vented\", \"S_trap\"], if trap.type == \"drum\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.3", "rule_name": "prohibited_trap_types"}
{"type": "bcl_completion", "input": "rule prohibited_trap_types:\n    where:\n        trap.installed == true\n    # Complete this rule", "output": "rule prohibited_trap_types:\n    where:\n        trap.installed == true\n        must:\n        trap.type NOT IN [\"moving_parts\", \"bell\", \"crown_vented\", \"S_trap\"]\n        if trap.type == \"drum\":\n        trap.use IN [\"solids_interceptor\", \"chemical_waste_system\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.10.1002.3\"\n    must:\n        trap.type NOT IN [\"moving_parts\", \"bell\", \"crown_vented\", \"S_trap\"]\n        if trap.type == \"drum\":\n        trap.use IN [\"solids_interceptor\", \"chemical_waste_system\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.10.1002.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.10.1002.3\"", "rule_name": "prohibited_trap_types"}
{"type": "safety_factor_reasoning", "input": "For prohibited_trap_types rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.10.1002.3.", "rule_name": "prohibited_trap_types", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for trap seal dimensions: When fixture.trap.installed == true and must:, it is required that trap.liquid_seal.depth >= 2.inches and trap.liquid_seal.depth <= 4.inches", "output": "rule trap_seal_dimensions:\n    where:\n        fixture.trap.installed == true\n        must:\n        trap.liquid_seal.depth >= 2.inches\n        trap.liquid_seal.depth <= 4.inches\n        if fixture.accessible_design == true:\n        trap.liquid_seal.depth <= trap.special_design_depth\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.4\"\n    must:\n        trap.liquid_seal.depth >= 2.inches\n        trap.liquid_seal.depth <= 4.inches\n        if fixture.accessible_design == true:\n        trap.liquid_seal.depth <= trap.special_design_depth\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.4\"", "rule_name": "trap_seal_dimensions"}
{"type": "bcl_to_physics", "input": "rule trap_seal_dimensions with constraints: depth, depth", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.4", "rule_name": "trap_seal_dimensions"}
{"type": "bcl_completion", "input": "rule trap_seal_dimensions:\n    where:\n        fixture.trap.installed == true\n    # Complete this rule", "output": "rule trap_seal_dimensions:\n    where:\n        fixture.trap.installed == true\n        must:\n        trap.liquid_seal.depth >= 2.inches\n        trap.liquid_seal.depth <= 4.inches\n        if fixture.accessible_design == true:\n        trap.liquid_seal.depth <= trap.special_design_depth\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.4\"\n    must:\n        trap.liquid_seal.depth >= 2.inches\n        trap.liquid_seal.depth <= 4.inches\n        if fixture.accessible_design == true:\n        trap.liquid_seal.depth <= trap.special_design_depth\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.4\"", "rule_name": "trap_seal_dimensions"}
{"type": "safety_factor_reasoning", "input": "For trap_seal_dimensions rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1002.4.", "rule_name": "trap_seal_dimensions", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for trap seal protection: When trap.type IN [\"emergency_floor_drain\", \"subject_to_evaporation\"] and must:, it is required that protection.type IN [ and \"potable_water_primer_valve\",", "output": "rule trap_seal_protection:\n    where:\n        trap.type IN [\"emergency_floor_drain\", \"subject_to_evaporation\"]\n        must:\n        protection.type IN [\n        \"potable_water_primer_valve\",\n        \"reclaimed_water_primer_valve\",\n        \"waste_water_primer_device\",\n        \"barrier_type_device\",\n        \"fixture_drain_connection\"\n        ]\n        if protection.type CONTAINS \"primer_valve\":\n        primer_valve.conforms_to == \"ASSE_1018\"\n        discharge_pipe.connection_point == \"above_trap_seal\"\n        discharge_pipe.location == \"inlet_side\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1002.4.1\"\n    must:\n        protection.type IN [\n        \"potable_water_primer_valve\",\n        \"reclaimed_water_primer_valve\",\n        \"waste_water_primer_device\",\n        \"barrier_type_device\",\n        \"fixture_drain_connection\"\n        ]\n        if protection.type CONTAINS \"primer_valve\":\n        primer_valve.conforms_to == \"ASSE_1018\"\n        discharge_pipe.connection_point == \"above_trap_seal\"\n        discharge_pipe.location == \"inlet_side\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1002.4.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1002.4.1\"", "rule_name": "trap_seal_protection"}
{"type": "bcl_to_physics", "input": "rule trap_seal_protection with conditions: protection.type IN [, \"potable_water_primer_valve\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.4.1", "rule_name": "trap_seal_protection"}
{"type": "bcl_completion", "input": "rule trap_seal_protection:\n    where:\n        trap.type IN [\"emergency_floor_drain\", \"subject_to_evaporation\"]\n    # Complete this rule", "output": "rule trap_seal_protection:\n    where:\n        trap.type IN [\"emergency_floor_drain\", \"subject_to_evaporation\"]\n        must:\n        protection.type IN [\n        \"potable_water_primer_valve\",\n        \"reclaimed_water_primer_valve\",\n        \"waste_water_primer_device\",\n        \"barrier_type_device\",\n        \"fixture_drain_connection\"\n        ]\n        if protection.type CONTAINS \"primer_valve\":\n        primer_valve.conforms_to == \"ASSE_1018\"\n        discharge_pipe.connection_point == \"above_trap_seal\"\n        discharge_pipe.location == \"inlet_side\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1002.4.1\"\n    must:\n        protection.type IN [\n        \"potable_water_primer_valve\",\n        \"reclaimed_water_primer_valve\",\n        \"waste_water_primer_device\",\n        \"barrier_type_device\",\n        \"fixture_drain_connection\"\n        ]\n        if protection.type CONTAINS \"primer_valve\":\n        primer_valve.conforms_to == \"ASSE_1018\"\n        discharge_pipe.connection_point == \"above_trap_seal\"\n        discharge_pipe.location == \"inlet_side\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1002.4.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1002.4.1\"", "rule_name": "trap_seal_protection"}
{"type": "safety_factor_reasoning", "input": "For trap_seal_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.10.1002.4.1.", "rule_name": "trap_seal_protection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for trap setting requirements: When trap.installed == true and must:, it is required that trap.level_with_respect_to_seal == true and if location.subject_to_freezing == true:", "output": "rule trap_setting_requirements:\n    where:\n        trap.installed == true\n        must:\n        trap.level_with_respect_to_seal == true\n        if location.subject_to_freezing == true:\n        trap.freeze_protected == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.7\"\n    must:\n        trap.level_with_respect_to_seal == true\n        if location.subject_to_freezing == true:\n        trap.freeze_protected == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.7\"", "rule_name": "trap_setting_requirements"}
{"type": "bcl_to_physics", "input": "rule trap_setting_requirements with conditions: trap.level_with_respect_to_seal == true, if location.subject_to_freezing == true:", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1002.7", "rule_name": "trap_setting_requirements"}
{"type": "bcl_completion", "input": "rule trap_setting_requirements:\n    where:\n        trap.installed == true\n    # Complete this rule", "output": "rule trap_setting_requirements:\n    where:\n        trap.installed == true\n        must:\n        trap.level_with_respect_to_seal == true\n        if location.subject_to_freezing == true:\n        trap.freeze_protected == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.7\"\n    must:\n        trap.level_with_respect_to_seal == true\n        if location.subject_to_freezing == true:\n        trap.freeze_protected == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1002.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1002.7\"", "rule_name": "trap_setting_requirements"}
{"type": "safety_factor_reasoning", "input": "For trap_setting_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1002.7.", "rule_name": "trap_setting_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for grease interceptor requirements: When location.type IN [\"restaurant\", \"hotel_kitchen\", \"hospital\", \"school_kitchen\", \"bar\", \"factory_cafeteria\", \"club\"] and fixtures.grease_producing == true, it is required that interceptor.type IN [\"grease_interceptor\", \"automatic_grease_removal_device\"] and interceptor.receives_from IN [", "output": "rule grease_interceptor_requirements:\n    where:\n        location.type IN [\"restaurant\", \"hotel_kitchen\", \"hospital\", \"school_kitchen\", \"bar\", \"factory_cafeteria\", \"club\"]\n        fixtures.grease_producing == true\n        must:\n        interceptor.type IN [\"grease_interceptor\", \"automatic_grease_removal_device\"]\n        interceptor.receives_from IN [\n        \"pot_sink\", \"prerinse_sink\", \"soup_kettle\", \"wok_station\",\n        \"floor_drain_receiving_kettles\", \"automatic_hood_wash\", \"dishwasher_without_prerinse\"\n        ]\n        food_waste_disposer.discharges_to_interceptor == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.1\"\n    must:\n        interceptor.type IN [\"grease_interceptor\", \"automatic_grease_removal_device\"]\n        interceptor.receives_from IN [\n        \"pot_sink\", \"prerinse_sink\", \"soup_kettle\", \"wok_station\",\n        \"floor_drain_receiving_kettles\", \"automatic_hood_wash\", \"dishwasher_without_prerinse\"\n        ]\n        food_waste_disposer.discharges_to_interceptor == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1003.3.1\"", "rule_name": "grease_interceptor_requirements"}
{"type": "bcl_to_physics", "input": "rule grease_interceptor_requirements with conditions: interceptor.type IN [\"grease_interceptor\", \"automatic_grease_removal_device\"], interceptor.receives_from IN [", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.10.1003.3.1", "rule_name": "grease_interceptor_requirements"}
{"type": "bcl_completion", "input": "rule grease_interceptor_requirements:\n    where:\n        location.type IN [\"restaurant\", \"hotel_kitchen\", \"hospital\", \"school_kitchen\", \"bar\", \"factory_cafeteria\", \"club\"]\n    # Complete this rule", "output": "rule grease_interceptor_requirements:\n    where:\n        location.type IN [\"restaurant\", \"hotel_kitchen\", \"hospital\", \"school_kitchen\", \"bar\", \"factory_cafeteria\", \"club\"]\n        fixtures.grease_producing == true\n        must:\n        interceptor.type IN [\"grease_interceptor\", \"automatic_grease_removal_device\"]\n        interceptor.receives_from IN [\n        \"pot_sink\", \"prerinse_sink\", \"soup_kettle\", \"wok_station\",\n        \"floor_drain_receiving_kettles\", \"automatic_hood_wash\", \"dishwasher_without_prerinse\"\n        ]\n        food_waste_disposer.discharges_to_interceptor == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.1\"\n    must:\n        interceptor.type IN [\"grease_interceptor\", \"automatic_grease_removal_device\"]\n        interceptor.receives_from IN [\n        \"pot_sink\", \"prerinse_sink\", \"soup_kettle\", \"wok_station\",\n        \"floor_drain_receiving_kettles\", \"automatic_hood_wash\", \"dishwasher_without_prerinse\"\n        ]\n        food_waste_disposer.discharges_to_interceptor == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1003.3.1\"", "rule_name": "grease_interceptor_requirements"}
{"type": "safety_factor_reasoning", "input": "For grease_interceptor_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.10.1003.3.1.", "rule_name": "grease_interceptor_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for hydromechanical grease interceptor sizing: When interceptor.type == \"hydromechanical_grease\" and must:, it is required that interceptor.sized_per IN [\"ASME_A112.14.3\", \"ASME_A112.14.4\", \"PDI_G101\"] and flow_control.installed == true", "output": "rule hydromechanical_grease_interceptor_sizing:\n    where:\n        interceptor.type == \"hydromechanical_grease\"\n        must:\n        interceptor.sized_per IN [\"ASME_A112.14.3\", \"ASME_A112.14.4\", \"PDI_G101\"]\n        flow_control.installed == true\n        flow_control.prevents_exceeding_rated_flow == true\n        flow_control.vented == true\n        flow_control.termination_height >= 6.inches_above_flood_rim\n        if flow_rate <= 100.gpm:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        else:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.3.5\"\n    must:\n        interceptor.sized_per IN [\"ASME_A112.14.3\", \"ASME_A112.14.4\", \"PDI_G101\"]\n        flow_control.installed == true\n        flow_control.prevents_exceeding_rated_flow == true\n        flow_control.vented == true\n        flow_control.termination_height >= 6.inches_above_flood_rim\n        if flow_rate <= 100.gpm:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        else:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.3.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1003.3.5\"", "rule_name": "hydromechanical_grease_interceptor_sizing"}
{"type": "bcl_to_physics", "input": "rule hydromechanical_grease_interceptor_sizing with constraints: termination_height, flow_rate", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.10.1003.3.5", "rule_name": "hydromechanical_grease_interceptor_sizing"}
{"type": "bcl_completion", "input": "rule hydromechanical_grease_interceptor_sizing:\n    where:\n        interceptor.type == \"hydromechanical_grease\"\n    # Complete this rule", "output": "rule hydromechanical_grease_interceptor_sizing:\n    where:\n        interceptor.type == \"hydromechanical_grease\"\n        must:\n        interceptor.sized_per IN [\"ASME_A112.14.3\", \"ASME_A112.14.4\", \"PDI_G101\"]\n        flow_control.installed == true\n        flow_control.prevents_exceeding_rated_flow == true\n        flow_control.vented == true\n        flow_control.termination_height >= 6.inches_above_flood_rim\n        if flow_rate <= 100.gpm:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        else:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.3.5\"\n    must:\n        interceptor.sized_per IN [\"ASME_A112.14.3\", \"ASME_A112.14.4\", \"PDI_G101\"]\n        flow_control.installed == true\n        flow_control.prevents_exceeding_rated_flow == true\n        flow_control.vented == true\n        flow_control.termination_height >= 6.inches_above_flood_rim\n        if flow_rate <= 100.gpm:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        else:\n        retention_capacity >= flow_rate * 2.pounds_per_gpm\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.3.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1003.3.5\"", "rule_name": "hydromechanical_grease_interceptor_sizing"}
{"type": "safety_factor_reasoning", "input": "For hydromechanical_grease_interceptor_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1003.3.5.", "rule_name": "hydromechanical_grease_interceptor_sizing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for gravity grease interceptor sizing: When interceptor.type == \"gravity_grease\" and must:, it is required that required_capacity = peak_flow_rate.gpm * retention_time and retention_time >= 30.minutes", "output": "rule gravity_grease_interceptor_sizing:\n    where:\n        interceptor.type == \"gravity_grease\"\n        must:\n        required_capacity = peak_flow_rate.gpm * retention_time\n        retention_time >= 30.minutes\n        interceptor.capacity >= required_capacity\n        interceptor.designed_per IN [\"IAPMO/ANSI_Z1001\", \"ASME_A112.14.6\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.7\"\n    must:\n        required_capacity = peak_flow_rate.gpm * retention_time\n        retention_time >= 30.minutes\n        interceptor.capacity >= required_capacity\n        interceptor.designed_per IN [\"IAPMO/ANSI_Z1001\", \"ASME_A112.14.6\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.7\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1003.3.7\"", "rule_name": "gravity_grease_interceptor_sizing"}
{"type": "bcl_to_physics", "input": "rule gravity_grease_interceptor_sizing with constraints: retention_time", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.10.1003.3.7", "rule_name": "gravity_grease_interceptor_sizing"}
{"type": "bcl_completion", "input": "rule gravity_grease_interceptor_sizing:\n    where:\n        interceptor.type == \"gravity_grease\"\n    # Complete this rule", "output": "rule gravity_grease_interceptor_sizing:\n    where:\n        interceptor.type == \"gravity_grease\"\n        must:\n        required_capacity = peak_flow_rate.gpm * retention_time\n        retention_time >= 30.minutes\n        interceptor.capacity >= required_capacity\n        interceptor.designed_per IN [\"IAPMO/ANSI_Z1001\", \"ASME_A112.14.6\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.7\"\n    must:\n        required_capacity = peak_flow_rate.gpm * retention_time\n        retention_time >= 30.minutes\n        interceptor.capacity >= required_capacity\n        interceptor.designed_per IN [\"IAPMO/ANSI_Z1001\", \"ASME_A112.14.6\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.3.7\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1003.3.7\"", "rule_name": "gravity_grease_interceptor_sizing"}
{"type": "safety_factor_reasoning", "input": "For gravity_grease_interceptor_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.10.1003.3.7.", "rule_name": "gravity_grease_interceptor_sizing", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for oil separator requirements: When location.type IN [\"repair_garage\", \"car_wash\", \"factory_with_oil_waste\", \"hydraulic_elevator_pit\"] and floor_drains.present == true, it is required that oil_separator.installed == true and oil_separator.receives_all_oil_bearing_waste == true", "output": "rule oil_separator_requirements:\n    where:\n        location.type IN [\"repair_garage\", \"car_wash\", \"factory_with_oil_waste\", \"hydraulic_elevator_pit\"]\n        floor_drains.present == true\n        must:\n        oil_separator.installed == true\n        oil_separator.receives_all_oil_bearing_waste == true\n        if location.type == \"hydraulic_elevator_pit\" AND alarm_system.approved == true:\n        oil_separator.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.4\"\n    must:\n        oil_separator.installed == true\n        oil_separator.receives_all_oil_bearing_waste == true\n        if location.type == \"hydraulic_elevator_pit\" AND alarm_system.approved == true:\n        oil_separator.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1003.4\"", "rule_name": "oil_separator_requirements"}
{"type": "bcl_to_physics", "input": "rule oil_separator_requirements with conditions: oil_separator.installed == true, oil_separator.receives_all_oil_bearing_waste == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.10.1003.4", "rule_name": "oil_separator_requirements"}
{"type": "bcl_completion", "input": "rule oil_separator_requirements:\n    where:\n        location.type IN [\"repair_garage\", \"car_wash\", \"factory_with_oil_waste\", \"hydraulic_elevator_pit\"]\n    # Complete this rule", "output": "rule oil_separator_requirements:\n    where:\n        location.type IN [\"repair_garage\", \"car_wash\", \"factory_with_oil_waste\", \"hydraulic_elevator_pit\"]\n        floor_drains.present == true\n        must:\n        oil_separator.installed == true\n        oil_separator.receives_all_oil_bearing_waste == true\n        if location.type == \"hydraulic_elevator_pit\" AND alarm_system.approved == true:\n        oil_separator.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.4\"\n    must:\n        oil_separator.installed == true\n        oil_separator.receives_all_oil_bearing_waste == true\n        if location.type == \"hydraulic_elevator_pit\" AND alarm_system.approved == true:\n        oil_separator.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.10.1003.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.10.1003.4\"", "rule_name": "oil_separator_requirements"}
{"type": "safety_factor_reasoning", "input": "For oil_separator_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.10.1003.4.", "rule_name": "oil_separator_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for oil separator design: When separator.type == \"oil\" and must:, it is required that separator.depth >= 2.feet_below_discharge_invert and separator.outlet.water_seal >= 18.inches", "output": "rule oil_separator_design:\n    where:\n        separator.type == \"oil\"\n        must:\n        separator.depth >= 2.feet_below_discharge_invert\n        separator.outlet.water_seal >= 18.inches\n        if location.type IN [\"garage\", \"service_station\"]:\n        base_capacity = 6.cubic_feet  # for first 100 sq ft\n        additional_capacity = floor_area_excess / 100.sqft * 1.cubic_foot\n        separator.capacity >= base_capacity + additional_capacity\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.4.2\"\n    must:\n        separator.depth >= 2.feet_below_discharge_invert\n        separator.outlet.water_seal >= 18.inches\n        if location.type IN [\"garage\", \"service_station\"]:\n        base_capacity = 6.cubic_feet  # for first 100 sq ft\n        additional_capacity = floor_area_excess / 100.sqft * 1.cubic_foot\n        separator.capacity >= base_capacity + additional_capacity\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.4.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1003.4.2\"", "rule_name": "oil_separator_design"}
{"type": "bcl_to_physics", "input": "rule oil_separator_design with constraints: depth, water_seal", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1003.4.2", "rule_name": "oil_separator_design"}
{"type": "bcl_completion", "input": "rule oil_separator_design:\n    where:\n        separator.type == \"oil\"\n    # Complete this rule", "output": "rule oil_separator_design:\n    where:\n        separator.type == \"oil\"\n        must:\n        separator.depth >= 2.feet_below_discharge_invert\n        separator.outlet.water_seal >= 18.inches\n        if location.type IN [\"garage\", \"service_station\"]:\n        base_capacity = 6.cubic_feet  # for first 100 sq ft\n        additional_capacity = floor_area_excess / 100.sqft * 1.cubic_foot\n        separator.capacity >= base_capacity + additional_capacity\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.4.2\"\n    must:\n        separator.depth >= 2.feet_below_discharge_invert\n        separator.outlet.water_seal >= 18.inches\n        if location.type IN [\"garage\", \"service_station\"]:\n        base_capacity = 6.cubic_feet  # for first 100 sq ft\n        additional_capacity = floor_area_excess / 100.sqft * 1.cubic_foot\n        separator.capacity >= base_capacity + additional_capacity\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.4.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1003.4.2\"", "rule_name": "oil_separator_design"}
{"type": "safety_factor_reasoning", "input": "For oil_separator_design rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1003.4.2.", "rule_name": "oil_separator_design", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sand interceptor requirements: When establishment.type == \"commercial\" and solids.type == \"heavy\", it is required that interceptor.type == \"sand\" and interceptor.water_seal >= 6.inches", "output": "rule sand_interceptor_requirements:\n    where:\n        establishment.type == \"commercial\"\n        solids.type == \"heavy\"\n        must:\n        interceptor.type == \"sand\"\n        interceptor.water_seal >= 6.inches\n        access.ready == true\n        access.for_cleaning == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.5\"\n    must:\n        interceptor.type == \"sand\"\n        interceptor.water_seal >= 6.inches\n        access.ready == true\n        access.for_cleaning == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1003.5\"", "rule_name": "sand_interceptor_requirements"}
{"type": "bcl_to_physics", "input": "rule sand_interceptor_requirements with constraints: water_seal", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.10.1003.5", "rule_name": "sand_interceptor_requirements"}
{"type": "bcl_completion", "input": "rule sand_interceptor_requirements:\n    where:\n        establishment.type == \"commercial\"\n    # Complete this rule", "output": "rule sand_interceptor_requirements:\n    where:\n        establishment.type == \"commercial\"\n        solids.type == \"heavy\"\n        must:\n        interceptor.type == \"sand\"\n        interceptor.water_seal >= 6.inches\n        access.ready == true\n        access.for_cleaning == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.5\"\n    must:\n        interceptor.type == \"sand\"\n        interceptor.water_seal >= 6.inches\n        access.ready == true\n        access.for_cleaning == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.10.1003.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.10.1003.5\"", "rule_name": "sand_interceptor_requirements"}
{"type": "safety_factor_reasoning", "input": "For sand_interceptor_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1003.5.", "rule_name": "sand_interceptor_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for commercial laundry interceptor: When equipment.type == \"clothes_washer\" and location.type != \"individual_dwelling_unit\", it is required that interceptor.installed == true and interceptor.basket.removable == true", "output": "rule commercial_laundry_interceptor:\n    where:\n        equipment.type == \"clothes_washer\"\n        location.type != \"individual_dwelling_unit\"\n        quantity > 1\n        must:\n        interceptor.installed == true\n        interceptor.basket.removable == true\n        interceptor.prevents_passage_of_solids >= 0.5.inches\n        interceptor.prevents IN [\"string\", \"rags\", \"buttons\", \"detrimental_materials\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1003.6\"\n        constraint trap_seal_siphonage_prevention:\n        where:\n        trap.installed == true\n        must:\n        trap.seal_depth > maximum_siphon_break_depth(\n        pipe_diameter,\n        flow_velocity,\n        atmospheric_pressure\n        )\n        trap.seal_volume > evaporation_rate * days_between_use\n        safety_factor: 1.5\n        constraint grease_separation_efficiency:\n        where:\n        interceptor.type CONTAINS \"grease\"\n        must:\n        retention_time >= particle_rise_time(\n        grease_droplet_size,\n        density_difference(grease, water),\n        water_viscosity,\n        interceptor_depth\n        )\n        operating_temperature < grease_solidification_point + 10.fahrenheit\n        safety_factor: 1.3\n        constraint interceptor_flow_patterns:\n        where:\n        interceptor.installed == true\n        must:\n        reynolds_number(flow_rate, hydraulic_diameter, kinematic_viscosity) < 2000\n        baffle_configuration.prevents_direct_flow == true\n        inlet_velocity < resuspension_velocity(settled_particles)\n        safety_factor: 1.2\n        constraint oil_water_separation:\n        where:\n        separator.type == \"oil\"\n        must:\n        rise_velocity = stokes_velocity(oil_droplet_diameter, density_difference)\n        retention_time >= separator_depth / rise_velocity\n        if coalescing_plates.installed == true:\n        plate_spacing <= 0.75.inches\n        flow_angle >= 45.degrees\n    must:\n        interceptor.installed == true\n        interceptor.basket.removable == true\n        interceptor.prevents_passage_of_solids >= 0.5.inches\n        interceptor.prevents IN [\"string\", \"rags\", \"buttons\", \"detrimental_materials\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1003.6\"\n        constraint trap_seal_siphonage_prevention:\n        where:\n        trap.installed == true\n        must:\n        trap.seal_depth > maximum_siphon_break_depth(\n        pipe_diameter,\n        flow_velocity,\n        atmospheric_pressure\n        )\n        trap.seal_volume > evaporation_rate * days_between_use\n        safety_factor: 1.5\n        constraint grease_separation_efficiency:\n        where:\n        interceptor.type CONTAINS \"grease\"\n        must:\n        retention_time >= particle_rise_time(\n        grease_droplet_size,\n        density_difference(grease, water),\n        water_viscosity,\n        interceptor_depth\n        )\n        operating_temperature < grease_solidification_point + 10.fahrenheit\n        safety_factor: 1.3\n        constraint interceptor_flow_patterns:\n        where:\n        interceptor.installed == true\n        must:\n        reynolds_number(flow_rate, hydraulic_diameter, kinematic_viscosity) < 2000\n        baffle_configuration.prevents_direct_flow == true\n        inlet_velocity < resuspension_velocity(settled_particles)\n        safety_factor: 1.2\n        constraint oil_water_separation:\n        where:\n        separator.type == \"oil\"\n        must:\n        rise_velocity = stokes_velocity(oil_droplet_diameter, density_difference)\n        retention_time >= separator_depth / rise_velocity\n        if coalescing_plates.installed == true:\n        plate_spacing <= 0.75.inches\n        flow_angle >= 45.degrees\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.10.1003.6\"", "rule_name": "commercial_laundry_interceptor"}
{"type": "bcl_to_physics", "input": "rule commercial_laundry_interceptor with constraints: prevents_passage_of_solids, plate_spacing", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.10.1003.6", "rule_name": "commercial_laundry_interceptor"}
{"type": "bcl_completion", "input": "rule commercial_laundry_interceptor:\n    where:\n        equipment.type == \"clothes_washer\"\n    # Complete this rule", "output": "rule commercial_laundry_interceptor:\n    where:\n        equipment.type == \"clothes_washer\"\n        location.type != \"individual_dwelling_unit\"\n        quantity > 1\n        must:\n        interceptor.installed == true\n        interceptor.basket.removable == true\n        interceptor.prevents_passage_of_solids >= 0.5.inches\n        interceptor.prevents IN [\"string\", \"rags\", \"buttons\", \"detrimental_materials\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1003.6\"\n        constraint trap_seal_siphonage_prevention:\n        where:\n        trap.installed == true\n        must:\n        trap.seal_depth > maximum_siphon_break_depth(\n        pipe_diameter,\n        flow_velocity,\n        atmospheric_pressure\n        )\n        trap.seal_volume > evaporation_rate * days_between_use\n        safety_factor: 1.5\n        constraint grease_separation_efficiency:\n        where:\n        interceptor.type CONTAINS \"grease\"\n        must:\n        retention_time >= particle_rise_time(\n        grease_droplet_size,\n        density_difference(grease, water),\n        water_viscosity,\n        interceptor_depth\n        )\n        operating_temperature < grease_solidification_point + 10.fahrenheit\n        safety_factor: 1.3\n        constraint interceptor_flow_patterns:\n        where:\n        interceptor.installed == true\n        must:\n        reynolds_number(flow_rate, hydraulic_diameter, kinematic_viscosity) < 2000\n        baffle_configuration.prevents_direct_flow == true\n        inlet_velocity < resuspension_velocity(settled_particles)\n        safety_factor: 1.2\n        constraint oil_water_separation:\n        where:\n        separator.type == \"oil\"\n        must:\n        rise_velocity = stokes_velocity(oil_droplet_diameter, density_difference)\n        retention_time >= separator_depth / rise_velocity\n        if coalescing_plates.installed == true:\n        plate_spacing <= 0.75.inches\n        flow_angle >= 45.degrees\n    must:\n        interceptor.installed == true\n        interceptor.basket.removable == true\n        interceptor.prevents_passage_of_solids >= 0.5.inches\n        interceptor.prevents IN [\"string\", \"rags\", \"buttons\", \"detrimental_materials\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.10.1003.6\"\n        constraint trap_seal_siphonage_prevention:\n        where:\n        trap.installed == true\n        must:\n        trap.seal_depth > maximum_siphon_break_depth(\n        pipe_diameter,\n        flow_velocity,\n        atmospheric_pressure\n        )\n        trap.seal_volume > evaporation_rate * days_between_use\n        safety_factor: 1.5\n        constraint grease_separation_efficiency:\n        where:\n        interceptor.type CONTAINS \"grease\"\n        must:\n        retention_time >= particle_rise_time(\n        grease_droplet_size,\n        density_difference(grease, water),\n        water_viscosity,\n        interceptor_depth\n        )\n        operating_temperature < grease_solidification_point + 10.fahrenheit\n        safety_factor: 1.3\n        constraint interceptor_flow_patterns:\n        where:\n        interceptor.installed == true\n        must:\n        reynolds_number(flow_rate, hydraulic_diameter, kinematic_viscosity) < 2000\n        baffle_configuration.prevents_direct_flow == true\n        inlet_velocity < resuspension_velocity(settled_particles)\n        safety_factor: 1.2\n        constraint oil_water_separation:\n        where:\n        separator.type == \"oil\"\n        must:\n        rise_velocity = stokes_velocity(oil_droplet_diameter, density_difference)\n        retention_time >= separator_depth / rise_velocity\n        if coalescing_plates.installed == true:\n        plate_spacing <= 0.75.inches\n        flow_angle >= 45.degrees\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.10.1003.6\"", "rule_name": "commercial_laundry_interceptor"}
{"type": "safety_factor_reasoning", "input": "For commercial_laundry_interceptor rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.10.1003.6.", "rule_name": "commercial_laundry_interceptor", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for storm drain materials: When pipe.type == \"storm_drain\" and pipe.location IN [\"inside_above_ground\", \"underground\", \"building_sewer\"], it is required that material IN [ and \"ABS_plastic\",", "output": "rule storm_drain_materials:\n    where:\n        pipe.type == \"storm_drain\"\n        pipe.location IN [\"inside_above_ground\", \"underground\", \"building_sewer\"]\n        must:\n        material IN [\n        \"ABS_plastic\",\n        \"cast_iron\",\n        \"concrete\",\n        \"copper\",\n        \"polyethylene\",\n        \"polypropylene\",\n        \"PVC\",\n        \"vitrified_clay\",\n        \"stainless_steel_316L\"\n        ]\n        material.conforms_to_standards == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1102.2-1102.4\"\n    must:\n        material IN [\n        \"ABS_plastic\",\n        \"cast_iron\",\n        \"concrete\",\n        \"copper\",\n        \"polyethylene\",\n        \"polypropylene\",\n        \"PVC\",\n        \"vitrified_clay\",\n        \"stainless_steel_316L\"\n        ]\n        material.conforms_to_standards == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1102.2-1102.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1102.2-1102.4\"", "rule_name": "storm_drain_materials"}
{"type": "bcl_to_physics", "input": "rule storm_drain_materials with conditions: material IN [, \"ABS_plastic\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.11.1102.2-1102.4", "rule_name": "storm_drain_materials"}
{"type": "bcl_completion", "input": "rule storm_drain_materials:\n    where:\n        pipe.type == \"storm_drain\"\n    # Complete this rule", "output": "rule storm_drain_materials:\n    where:\n        pipe.type == \"storm_drain\"\n        pipe.location IN [\"inside_above_ground\", \"underground\", \"building_sewer\"]\n        must:\n        material IN [\n        \"ABS_plastic\",\n        \"cast_iron\",\n        \"concrete\",\n        \"copper\",\n        \"polyethylene\",\n        \"polypropylene\",\n        \"PVC\",\n        \"vitrified_clay\",\n        \"stainless_steel_316L\"\n        ]\n        material.conforms_to_standards == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1102.2-1102.4\"\n    must:\n        material IN [\n        \"ABS_plastic\",\n        \"cast_iron\",\n        \"concrete\",\n        \"copper\",\n        \"polyethylene\",\n        \"polypropylene\",\n        \"PVC\",\n        \"vitrified_clay\",\n        \"stainless_steel_316L\"\n        ]\n        material.conforms_to_standards == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1102.2-1102.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1102.2-1102.4\"", "rule_name": "storm_drain_materials"}
{"type": "safety_factor_reasoning", "input": "For storm_drain_materials rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1102.2-1102.4.", "rule_name": "storm_drain_materials", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for subsoil drain pipe: When drain.type == \"subsoil\" and must:, it is required that pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"] and pipe.conforms_to == \"Table_1102.5\"", "output": "rule subsoil_drain_pipe:\n    where:\n        drain.type == \"subsoil\"\n        must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.conforms_to == \"Table_1102.5\"\n        pipe.diameter >= 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.5\"\n    must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.conforms_to == \"Table_1102.5\"\n        pipe.diameter >= 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1102.5\"", "rule_name": "subsoil_drain_pipe"}
{"type": "bcl_to_physics", "input": "rule subsoil_drain_pipe with constraints: diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.11.1102.5", "rule_name": "subsoil_drain_pipe"}
{"type": "bcl_completion", "input": "rule subsoil_drain_pipe:\n    where:\n        drain.type == \"subsoil\"\n    # Complete this rule", "output": "rule subsoil_drain_pipe:\n    where:\n        drain.type == \"subsoil\"\n        must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.conforms_to == \"Table_1102.5\"\n        pipe.diameter >= 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.5\"\n    must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.conforms_to == \"Table_1102.5\"\n        pipe.diameter >= 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1102.5\"", "rule_name": "subsoil_drain_pipe"}
{"type": "safety_factor_reasoning", "input": "For subsoil_drain_pipe rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1102.5.", "rule_name": "subsoil_drain_pipe", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for roof drain standards: When drain.type == \"roof\" and must:, it is required that drain.conforms_to IN [\"ASME_A112.6.4\", \"ASME_A112.3.1\"] and if drain.type != \"siphonic\":", "output": "rule roof_drain_standards:\n    where:\n        drain.type == \"roof\"\n        must:\n        drain.conforms_to IN [\"ASME_A112.6.4\", \"ASME_A112.3.1\"]\n        if drain.type != \"siphonic\":\n        testing_per IN [\"ASME_A112.6.4\", \"ASPE_IAPMO_Z1034\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.6\"\n    must:\n        drain.conforms_to IN [\"ASME_A112.6.4\", \"ASME_A112.3.1\"]\n        if drain.type != \"siphonic\":\n        testing_per IN [\"ASME_A112.6.4\", \"ASPE_IAPMO_Z1034\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1102.6\"", "rule_name": "roof_drain_standards"}
{"type": "bcl_to_physics", "input": "rule roof_drain_standards with conditions: drain.conforms_to IN [\"ASME_A112.6.4\", \"ASME_A112.3.1\"], if drain.type != \"siphonic\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.11.1102.6", "rule_name": "roof_drain_standards"}
{"type": "bcl_completion", "input": "rule roof_drain_standards:\n    where:\n        drain.type == \"roof\"\n    # Complete this rule", "output": "rule roof_drain_standards:\n    where:\n        drain.type == \"roof\"\n        must:\n        drain.conforms_to IN [\"ASME_A112.6.4\", \"ASME_A112.3.1\"]\n        if drain.type != \"siphonic\":\n        testing_per IN [\"ASME_A112.6.4\", \"ASPE_IAPMO_Z1034\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.6\"\n    must:\n        drain.conforms_to IN [\"ASME_A112.6.4\", \"ASME_A112.3.1\"]\n        if drain.type != \"siphonic\":\n        testing_per IN [\"ASME_A112.6.4\", \"ASPE_IAPMO_Z1034\"]\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1102.6\"", "rule_name": "roof_drain_standards"}
{"type": "safety_factor_reasoning", "input": "For roof_drain_standards rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1102.6.", "rule_name": "roof_drain_standards", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for storm drain fittings: When fitting.system == \"storm_drainage\" and must:, it is required that fitting.approved_for_piping_material == true and fitting.conforms_to == \"Table_1102.7\"", "output": "rule storm_drain_fittings:\n    where:\n        fitting.system == \"storm_drainage\"\n        must:\n        fitting.approved_for_piping_material == true\n        fitting.conforms_to == \"Table_1102.7\"\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_flow_reducing_features == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.7\"\n    must:\n        fitting.approved_for_piping_material == true\n        fitting.conforms_to == \"Table_1102.7\"\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_flow_reducing_features == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1102.7\"", "rule_name": "storm_drain_fittings"}
{"type": "bcl_to_physics", "input": "rule storm_drain_fittings with conditions: fitting.approved_for_piping_material == true, fitting.conforms_to == \"Table_1102.7\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1102.7", "rule_name": "storm_drain_fittings"}
{"type": "bcl_completion", "input": "rule storm_drain_fittings:\n    where:\n        fitting.system == \"storm_drainage\"\n    # Complete this rule", "output": "rule storm_drain_fittings:\n    where:\n        fitting.system == \"storm_drainage\"\n        must:\n        fitting.approved_for_piping_material == true\n        fitting.conforms_to == \"Table_1102.7\"\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_flow_reducing_features == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.7\"\n    must:\n        fitting.approved_for_piping_material == true\n        fitting.conforms_to == \"Table_1102.7\"\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_flow_reducing_features == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1102.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1102.7\"", "rule_name": "storm_drain_fittings"}
{"type": "safety_factor_reasoning", "input": "For storm_drain_fittings rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1102.7.", "rule_name": "storm_drain_fittings", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for storm drain trap requirement: When storm_drain.connects_to == \"combined_sewer\" and must:, it is required that trap.required == true and trap.location IN [", "output": "rule storm_drain_trap_requirement:\n    where:\n        storm_drain.connects_to == \"combined_sewer\"\n        must:\n        trap.required == true\n        trap.location IN [\n        \"individual_on_each_conductor\",\n        \"single_main_trap_before_sewer\"\n        ]\n        if connection.to == \"building_storm_sewer\":\n        trap.required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.1\"\n    must:\n        trap.required == true\n        trap.location IN [\n        \"individual_on_each_conductor\",\n        \"single_main_trap_before_sewer\"\n        ]\n        if connection.to == \"building_storm_sewer\":\n        trap.required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1103.1\"", "rule_name": "storm_drain_trap_requirement"}
{"type": "bcl_to_physics", "input": "rule storm_drain_trap_requirement with conditions: trap.required == true, trap.location IN [", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.11.1103.1", "rule_name": "storm_drain_trap_requirement"}
{"type": "bcl_completion", "input": "rule storm_drain_trap_requirement:\n    where:\n        storm_drain.connects_to == \"combined_sewer\"\n    # Complete this rule", "output": "rule storm_drain_trap_requirement:\n    where:\n        storm_drain.connects_to == \"combined_sewer\"\n        must:\n        trap.required == true\n        trap.location IN [\n        \"individual_on_each_conductor\",\n        \"single_main_trap_before_sewer\"\n        ]\n        if connection.to == \"building_storm_sewer\":\n        trap.required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.1\"\n    must:\n        trap.required == true\n        trap.location IN [\n        \"individual_on_each_conductor\",\n        \"single_main_trap_before_sewer\"\n        ]\n        if connection.to == \"building_storm_sewer\":\n        trap.required == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1103.1\"", "rule_name": "storm_drain_trap_requirement"}
{"type": "safety_factor_reasoning", "input": "For storm_drain_trap_requirement rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1103.1.", "rule_name": "storm_drain_trap_requirement", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for storm trap sizing: When trap.type == \"storm_water\" and must:, it is required that trap.material == pipe_system.material and if trap.serves == \"individual_conductor\":", "output": "rule storm_trap_sizing:\n    where:\n        trap.type == \"storm_water\"\n        must:\n        trap.material == pipe_system.material\n        if trap.serves == \"individual_conductor\":\n        trap.size == horizontal_drain.size\n        cleanout.installed == true\n        cleanout.location == \"building_side_of_trap\"\n        cleanout.has_access == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.2-1103.4\"\n    must:\n        trap.material == pipe_system.material\n        if trap.serves == \"individual_conductor\":\n        trap.size == horizontal_drain.size\n        cleanout.installed == true\n        cleanout.location == \"building_side_of_trap\"\n        cleanout.has_access == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.2-1103.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1103.2-1103.4\"", "rule_name": "storm_trap_sizing"}
{"type": "bcl_to_physics", "input": "rule storm_trap_sizing with conditions: trap.material == pipe_system.material, if trap.serves == \"individual_conductor\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.11.1103.2-1103.4", "rule_name": "storm_trap_sizing"}
{"type": "bcl_completion", "input": "rule storm_trap_sizing:\n    where:\n        trap.type == \"storm_water\"\n    # Complete this rule", "output": "rule storm_trap_sizing:\n    where:\n        trap.type == \"storm_water\"\n        must:\n        trap.material == pipe_system.material\n        if trap.serves == \"individual_conductor\":\n        trap.size == horizontal_drain.size\n        cleanout.installed == true\n        cleanout.location == \"building_side_of_trap\"\n        cleanout.has_access == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.2-1103.4\"\n    must:\n        trap.material == pipe_system.material\n        if trap.serves == \"individual_conductor\":\n        trap.size == horizontal_drain.size\n        cleanout.installed == true\n        cleanout.location == \"building_side_of_trap\"\n        cleanout.has_access == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1103.2-1103.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1103.2-1103.4\"", "rule_name": "storm_trap_sizing"}
{"type": "safety_factor_reasoning", "input": "For storm_trap_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1103.2-1103.4.", "rule_name": "storm_trap_sizing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for conductor use prohibition: When pipe.type == \"conductor\" and must:, it is required that pipe.not_used_as IN [\"soil_pipe\", \"waste_pipe\", \"vent_pipe\"] and if pipe.type IN [\"soil\", \"waste\", \"vent\"]:", "output": "rule conductor_use_prohibition:\n    where:\n        pipe.type == \"conductor\"\n        must:\n        pipe.not_used_as IN [\"soil_pipe\", \"waste_pipe\", \"vent_pipe\"]\n        if pipe.type IN [\"soil\", \"waste\", \"vent\"]:\n        pipe.not_used_as == \"conductor\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1104.1\"\n    must:\n        pipe.not_used_as IN [\"soil_pipe\", \"waste_pipe\", \"vent_pipe\"]\n        if pipe.type IN [\"soil\", \"waste\", \"vent\"]:\n        pipe.not_used_as == \"conductor\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1104.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1104.1\"", "rule_name": "conductor_use_prohibition"}
{"type": "bcl_to_physics", "input": "rule conductor_use_prohibition with conditions: pipe.not_used_as IN [\"soil_pipe\", \"waste_pipe\", \"vent_pipe\"], if pipe.type IN [\"soil\", \"waste\", \"vent\"]:", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.11.1104.1", "rule_name": "conductor_use_prohibition"}
{"type": "bcl_completion", "input": "rule conductor_use_prohibition:\n    where:\n        pipe.type == \"conductor\"\n    # Complete this rule", "output": "rule conductor_use_prohibition:\n    where:\n        pipe.type == \"conductor\"\n        must:\n        pipe.not_used_as IN [\"soil_pipe\", \"waste_pipe\", \"vent_pipe\"]\n        if pipe.type IN [\"soil\", \"waste\", \"vent\"]:\n        pipe.not_used_as == \"conductor\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1104.1\"\n    must:\n        pipe.not_used_as IN [\"soil_pipe\", \"waste_pipe\", \"vent_pipe\"]\n        if pipe.type IN [\"soil\", \"waste\", \"vent\"]:\n        pipe.not_used_as == \"conductor\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1104.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1104.1\"", "rule_name": "conductor_use_prohibition"}
{"type": "safety_factor_reasoning", "input": "For conductor_use_prohibition rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.11.1104.1.", "rule_name": "conductor_use_prohibition", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for floor drain separation: When drain.type == \"floor\" and must:, it is required that connection.to_storm_drain == false and safety_factor: 2.0", "output": "rule floor_drain_separation:\n    where:\n        drain.type == \"floor\"\n        must:\n        connection.to_storm_drain == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.11.1104.2\"\n    must:\n        connection.to_storm_drain == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.11.1104.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.11.1104.2\"", "rule_name": "floor_drain_separation"}
{"type": "bcl_to_physics", "input": "rule floor_drain_separation with conditions: connection.to_storm_drain == false, safety_factor: 2.0", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.11.1104.2", "rule_name": "floor_drain_separation"}
{"type": "bcl_completion", "input": "rule floor_drain_separation:\n    where:\n        drain.type == \"floor\"\n    # Complete this rule", "output": "rule floor_drain_separation:\n    where:\n        drain.type == \"floor\"\n        must:\n        connection.to_storm_drain == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.11.1104.2\"\n    must:\n        connection.to_storm_drain == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.11.1104.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.11.1104.2\"", "rule_name": "floor_drain_separation"}
{"type": "safety_factor_reasoning", "input": "For floor_drain_separation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.11.1104.2.", "rule_name": "floor_drain_separation", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for roof drain installation: When drain.type == \"roof\" and must:, it is required that installation.per == \"manufacturer_instructions\" and inside_opening.not_obstructed_by == \"roofing_membrane\"", "output": "rule roof_drain_installation:\n    where:\n        drain.type == \"roof\"\n        must:\n        installation.per == \"manufacturer_instructions\"\n        inside_opening.not_obstructed_by == \"roofing_membrane\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1105.1\"\n    must:\n        installation.per == \"manufacturer_instructions\"\n        inside_opening.not_obstructed_by == \"roofing_membrane\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1105.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1105.1\"", "rule_name": "roof_drain_installation"}
{"type": "bcl_to_physics", "input": "rule roof_drain_installation with conditions: installation.per == \"manufacturer_instructions\", inside_opening.not_obstructed_by == \"roofing_membrane\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.11.1105.1", "rule_name": "roof_drain_installation"}
{"type": "bcl_completion", "input": "rule roof_drain_installation:\n    where:\n        drain.type == \"roof\"\n    # Complete this rule", "output": "rule roof_drain_installation:\n    where:\n        drain.type == \"roof\"\n        must:\n        installation.per == \"manufacturer_instructions\"\n        inside_opening.not_obstructed_by == \"roofing_membrane\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1105.1\"\n    must:\n        installation.per == \"manufacturer_instructions\"\n        inside_opening.not_obstructed_by == \"roofing_membrane\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1105.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1105.1\"", "rule_name": "roof_drain_installation"}
{"type": "safety_factor_reasoning", "input": "For roof_drain_installation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1105.1.", "rule_name": "roof_drain_installation", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for roof drain flow sizing: When drain.type == \"roof\" and system.type == \"storm_drainage\", it is required that flow_rate.based_on == \"head_of_water_above_drain\" and sizing.per == \"Section_1106\"", "output": "rule roof_drain_flow_sizing:\n    where:\n        drain.type == \"roof\"\n        system.type == \"storm_drainage\"\n        must:\n        flow_rate.based_on == \"head_of_water_above_drain\"\n        sizing.per == \"Section_1106\"\n        flow_rate.accounts_for == \"maximum_anticipated_ponding\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1105.2\"\n    must:\n        flow_rate.based_on == \"head_of_water_above_drain\"\n        sizing.per == \"Section_1106\"\n        flow_rate.accounts_for == \"maximum_anticipated_ponding\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1105.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1105.2\"", "rule_name": "roof_drain_flow_sizing"}
{"type": "bcl_to_physics", "input": "rule roof_drain_flow_sizing with conditions: flow_rate.based_on == \"head_of_water_above_drain\", sizing.per == \"Section_1106\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1105.2", "rule_name": "roof_drain_flow_sizing"}
{"type": "bcl_completion", "input": "rule roof_drain_flow_sizing:\n    where:\n        drain.type == \"roof\"\n    # Complete this rule", "output": "rule roof_drain_flow_sizing:\n    where:\n        drain.type == \"roof\"\n        system.type == \"storm_drainage\"\n        must:\n        flow_rate.based_on == \"head_of_water_above_drain\"\n        sizing.per == \"Section_1106\"\n        flow_rate.accounts_for == \"maximum_anticipated_ponding\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1105.2\"\n    must:\n        flow_rate.based_on == \"head_of_water_above_drain\"\n        sizing.per == \"Section_1106\"\n        flow_rate.accounts_for == \"maximum_anticipated_ponding\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1105.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1105.2\"", "rule_name": "roof_drain_flow_sizing"}
{"type": "safety_factor_reasoning", "input": "For roof_drain_flow_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1105.2.", "rule_name": "roof_drain_flow_sizing", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for storm drain sizing basis: When pipe.type IN [\"vertical_conductor\", \"leader\", \"building_storm_drain\", \"building_storm_sewer\"] and must:, it is required that sizing.based_on == \"100_year_hourly_rainfall\" and rainfall_rate.from IN [\"Figure_1106.1\", \"approved_local_weather_data\"]", "output": "rule storm_drain_sizing_basis:\n    where:\n        pipe.type IN [\"vertical_conductor\", \"leader\", \"building_storm_drain\", \"building_storm_sewer\"]\n        must:\n        sizing.based_on == \"100_year_hourly_rainfall\"\n        rainfall_rate.from IN [\"Figure_1106.1\", \"approved_local_weather_data\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1106.1\"\n    must:\n        sizing.based_on == \"100_year_hourly_rainfall\"\n        rainfall_rate.from IN [\"Figure_1106.1\", \"approved_local_weather_data\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1106.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1106.1\"", "rule_name": "storm_drain_sizing_basis"}
{"type": "bcl_to_physics", "input": "rule storm_drain_sizing_basis with conditions: sizing.based_on == \"100_year_hourly_rainfall\", rainfall_rate.from IN [\"Figure_1106.1\", \"approved_local_weather_data\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.11.1106.1", "rule_name": "storm_drain_sizing_basis"}
{"type": "bcl_completion", "input": "rule storm_drain_sizing_basis:\n    where:\n        pipe.type IN [\"vertical_conductor\", \"leader\", \"building_storm_drain\", \"building_storm_sewer\"]\n    # Complete this rule", "output": "rule storm_drain_sizing_basis:\n    where:\n        pipe.type IN [\"vertical_conductor\", \"leader\", \"building_storm_drain\", \"building_storm_sewer\"]\n        must:\n        sizing.based_on == \"100_year_hourly_rainfall\"\n        rainfall_rate.from IN [\"Figure_1106.1\", \"approved_local_weather_data\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1106.1\"\n    must:\n        sizing.based_on == \"100_year_hourly_rainfall\"\n        rainfall_rate.from IN [\"Figure_1106.1\", \"approved_local_weather_data\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1106.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1106.1\"", "rule_name": "storm_drain_sizing_basis"}
{"type": "safety_factor_reasoning", "input": "For storm_drain_sizing_basis rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.11.1106.1.", "rule_name": "storm_drain_sizing_basis", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for rainfall flow conversion: When drainage.from == \"roof\" and must:, it is required that flow_rate_gpm = rainfall_rate * roof_area * 0.0104 and pipe_capacity >= flow_rate_gpm", "output": "rule rainfall_flow_conversion:\n    where:\n        drainage.from == \"roof\"\n        must:\n        flow_rate_gpm = rainfall_rate * roof_area * 0.0104\n        pipe_capacity >= flow_rate_gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.2.1\"\n    must:\n        flow_rate_gpm = rainfall_rate * roof_area * 0.0104\n        pipe_capacity >= flow_rate_gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.2.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1106.2.1\"", "rule_name": "rainfall_flow_conversion"}
{"type": "bcl_to_physics", "input": "rule rainfall_flow_conversion with conditions: flow_rate_gpm = rainfall_rate * roof_area * 0.0104, pipe_capacity >= flow_rate_gpm", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1106.2.1", "rule_name": "rainfall_flow_conversion"}
{"type": "bcl_completion", "input": "rule rainfall_flow_conversion:\n    where:\n        drainage.from == \"roof\"\n    # Complete this rule", "output": "rule rainfall_flow_conversion:\n    where:\n        drainage.from == \"roof\"\n        must:\n        flow_rate_gpm = rainfall_rate * roof_area * 0.0104\n        pipe_capacity >= flow_rate_gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.2.1\"\n    must:\n        flow_rate_gpm = rainfall_rate * roof_area * 0.0104\n        pipe_capacity >= flow_rate_gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.2.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1106.2.1\"", "rule_name": "rainfall_flow_conversion"}
{"type": "safety_factor_reasoning", "input": "For rainfall_flow_conversion rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1106.2.1.", "rule_name": "rainfall_flow_conversion", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for vertical wall drainage: When wall.type == \"vertical\" and wall.diverts_water_to == \"roof\", it is required that additional_area = wall.area * 0.5 and total_area = roof.projected_area + additional_area", "output": "rule vertical_wall_drainage:\n    where:\n        wall.type == \"vertical\"\n        wall.diverts_water_to == \"roof\"\n        must:\n        additional_area = wall.area * 0.5\n        total_area = roof.projected_area + additional_area\n        sizing.based_on == total_area\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.4\"\n    must:\n        additional_area = wall.area * 0.5\n        total_area = roof.projected_area + additional_area\n        sizing.based_on == total_area\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1106.4\"", "rule_name": "vertical_wall_drainage"}
{"type": "bcl_to_physics", "input": "rule vertical_wall_drainage with conditions: additional_area = wall.area * 0.5, total_area = roof.projected_area + additional_area", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.11.1106.4", "rule_name": "vertical_wall_drainage"}
{"type": "bcl_completion", "input": "rule vertical_wall_drainage:\n    where:\n        wall.type == \"vertical\"\n    # Complete this rule", "output": "rule vertical_wall_drainage:\n    where:\n        wall.type == \"vertical\"\n        wall.diverts_water_to == \"roof\"\n        must:\n        additional_area = wall.area * 0.5\n        total_area = roof.projected_area + additional_area\n        sizing.based_on == total_area\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.4\"\n    must:\n        additional_area = wall.area * 0.5\n        total_area = roof.projected_area + additional_area\n        sizing.based_on == total_area\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1106.4\"", "rule_name": "vertical_wall_drainage"}
{"type": "safety_factor_reasoning", "input": "For vertical_wall_drainage rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1106.4.", "rule_name": "vertical_wall_drainage", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for parapet scupper sizing: When scupper.type IN [\"primary_drainage\", \"secondary_drainage\"] and must:, it is required that ponding_depth <= roof.design_water_depth and scupper.height >= 4.inches", "output": "rule parapet_scupper_sizing:\n    where:\n        scupper.type IN [\"primary_drainage\", \"secondary_drainage\"]\n        must:\n        ponding_depth <= roof.design_water_depth\n        scupper.height >= 4.inches\n        scupper.width >= roof_drain.circumference_for_same_area\n        if scupper.type == \"secondary\":\n        primary_flow.not_considered == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.5\"\n    must:\n        ponding_depth <= roof.design_water_depth\n        scupper.height >= 4.inches\n        scupper.width >= roof_drain.circumference_for_same_area\n        if scupper.type == \"secondary\":\n        primary_flow.not_considered == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1106.5\"", "rule_name": "parapet_scupper_sizing"}
{"type": "bcl_to_physics", "input": "rule parapet_scupper_sizing with constraints: height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1106.5", "rule_name": "parapet_scupper_sizing"}
{"type": "bcl_completion", "input": "rule parapet_scupper_sizing:\n    where:\n        scupper.type IN [\"primary_drainage\", \"secondary_drainage\"]\n    # Complete this rule", "output": "rule parapet_scupper_sizing:\n    where:\n        scupper.type IN [\"primary_drainage\", \"secondary_drainage\"]\n        must:\n        ponding_depth <= roof.design_water_depth\n        scupper.height >= 4.inches\n        scupper.width >= roof_drain.circumference_for_same_area\n        if scupper.type == \"secondary\":\n        primary_flow.not_considered == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.5\"\n    must:\n        ponding_depth <= roof.design_water_depth\n        scupper.height >= 4.inches\n        scupper.width >= roof_drain.circumference_for_same_area\n        if scupper.type == \"secondary\":\n        primary_flow.not_considered == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1106.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1106.5\"", "rule_name": "parapet_scupper_sizing"}
{"type": "safety_factor_reasoning", "input": "For parapet_scupper_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1106.5.", "rule_name": "parapet_scupper_sizing", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for horizontal gutter sizing: When gutter.type == \"horizontal\" and must:, it is required that flow_rate <= capacity_per_Table_1106_6 and safety_factor: 1.2", "output": "rule horizontal_gutter_sizing:\n    where:\n        gutter.type == \"horizontal\"\n        must:\n        flow_rate <= capacity_per_Table_1106_6\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.6\"\n    must:\n        flow_rate <= capacity_per_Table_1106_6\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1106.6\"", "rule_name": "horizontal_gutter_sizing"}
{"type": "bcl_to_physics", "input": "rule horizontal_gutter_sizing with conditions: flow_rate <= capacity_per_Table_1106_6, safety_factor: 1.2", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1106.6", "rule_name": "horizontal_gutter_sizing"}
{"type": "bcl_completion", "input": "rule horizontal_gutter_sizing:\n    where:\n        gutter.type == \"horizontal\"\n    # Complete this rule", "output": "rule horizontal_gutter_sizing:\n    where:\n        gutter.type == \"horizontal\"\n        must:\n        flow_rate <= capacity_per_Table_1106_6\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.6\"\n    must:\n        flow_rate <= capacity_per_Table_1106_6\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1106.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1106.6\"", "rule_name": "horizontal_gutter_sizing"}
{"type": "safety_factor_reasoning", "input": "For horizontal_gutter_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1106.6.", "rule_name": "horizontal_gutter_sizing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for siphonic system design: When drainage.type == \"siphonic_roof\" and must:, it is required that design.per == \"ASME_A112.6.9\" and design.per == \"ASPE_45\"", "output": "rule siphonic_system_design:\n    where:\n        drainage.type == \"siphonic_roof\"\n        must:\n        design.per == \"ASME_A112.6.9\"\n        design.per == \"ASPE_45\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1107.1\"\n    must:\n        design.per == \"ASME_A112.6.9\"\n        design.per == \"ASPE_45\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1107.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1107.1\"", "rule_name": "siphonic_system_design"}
{"type": "bcl_to_physics", "input": "rule siphonic_system_design with conditions: design.per == \"ASME_A112.6.9\", design.per == \"ASPE_45\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.11.1107.1", "rule_name": "siphonic_system_design"}
{"type": "bcl_completion", "input": "rule siphonic_system_design:\n    where:\n        drainage.type == \"siphonic_roof\"\n    # Complete this rule", "output": "rule siphonic_system_design:\n    where:\n        drainage.type == \"siphonic_roof\"\n        must:\n        design.per == \"ASME_A112.6.9\"\n        design.per == \"ASPE_45\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1107.1\"\n    must:\n        design.per == \"ASME_A112.6.9\"\n        design.per == \"ASPE_45\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1107.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1107.1\"", "rule_name": "siphonic_system_design"}
{"type": "safety_factor_reasoning", "input": "For siphonic_system_design rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.11.1107.1.", "rule_name": "siphonic_system_design", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for secondary drain requirement: When roof.has_drains == true and roof.perimeter_construction == \"extends_above_roof\", it is required that secondary_drains.required == true and if drain.type == \"single_assembly\":", "output": "rule secondary_drain_requirement:\n    where:\n        roof.has_drains == true\n        roof.perimeter_construction == \"extends_above_roof\"\n        water.could_be_entrapped == true\n        must:\n        secondary_drains.required == true\n        if drain.type == \"single_assembly\":\n        primary_inlet.independent == true\n        secondary_inlet.independent == true\n        primary_outlet.independent == true\n        secondary_outlet.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1108.1\"\n    must:\n        secondary_drains.required == true\n        if drain.type == \"single_assembly\":\n        primary_inlet.independent == true\n        secondary_inlet.independent == true\n        primary_outlet.independent == true\n        secondary_outlet.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1108.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1108.1\"", "rule_name": "secondary_drain_requirement"}
{"type": "bcl_to_physics", "input": "rule secondary_drain_requirement with conditions: secondary_drains.required == true, if drain.type == \"single_assembly\":", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.11.1108.1", "rule_name": "secondary_drain_requirement"}
{"type": "bcl_completion", "input": "rule secondary_drain_requirement:\n    where:\n        roof.has_drains == true\n    # Complete this rule", "output": "rule secondary_drain_requirement:\n    where:\n        roof.has_drains == true\n        roof.perimeter_construction == \"extends_above_roof\"\n        water.could_be_entrapped == true\n        must:\n        secondary_drains.required == true\n        if drain.type == \"single_assembly\":\n        primary_inlet.independent == true\n        secondary_inlet.independent == true\n        primary_outlet.independent == true\n        secondary_outlet.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1108.1\"\n    must:\n        secondary_drains.required == true\n        if drain.type == \"single_assembly\":\n        primary_inlet.independent == true\n        secondary_inlet.independent == true\n        primary_outlet.independent == true\n        secondary_outlet.independent == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1108.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1108.1\"", "rule_name": "secondary_drain_requirement"}
{"type": "safety_factor_reasoning", "input": "For secondary_drain_requirement rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.11.1108.1.", "rule_name": "secondary_drain_requirement", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for secondary system separation: When system.type == \"secondary_roof_drain\" and must:, it is required that discharge.separate_from_primary == true and discharge.location == \"above_grade\"", "output": "rule secondary_system_separation:\n    where:\n        system.type == \"secondary_roof_drain\"\n        must:\n        discharge.separate_from_primary == true\n        discharge.location == \"above_grade\"\n        discharge.observable_by IN [\"occupants\", \"maintenance_personnel\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.2\"\n    must:\n        discharge.separate_from_primary == true\n        discharge.location == \"above_grade\"\n        discharge.observable_by IN [\"occupants\", \"maintenance_personnel\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1108.2\"", "rule_name": "secondary_system_separation"}
{"type": "bcl_to_physics", "input": "rule secondary_system_separation with conditions: discharge.separate_from_primary == true, discharge.location == \"above_grade\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.11.1108.2", "rule_name": "secondary_system_separation"}
{"type": "bcl_completion", "input": "rule secondary_system_separation:\n    where:\n        system.type == \"secondary_roof_drain\"\n    # Complete this rule", "output": "rule secondary_system_separation:\n    where:\n        system.type == \"secondary_roof_drain\"\n        must:\n        discharge.separate_from_primary == true\n        discharge.location == \"above_grade\"\n        discharge.observable_by IN [\"occupants\", \"maintenance_personnel\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.2\"\n    must:\n        discharge.separate_from_primary == true\n        discharge.location == \"above_grade\"\n        discharge.observable_by IN [\"occupants\", \"maintenance_personnel\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1108.2\"", "rule_name": "secondary_system_separation"}
{"type": "safety_factor_reasoning", "input": "For secondary_system_separation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1108.2.", "rule_name": "secondary_system_separation", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for secondary drain sizing: When drain.type == \"secondary\" and must:, it is required that sizing.rainfall_rate == primary_system.rainfall_rate and sizing.per == \"Section_1106\"", "output": "rule secondary_drain_sizing:\n    where:\n        drain.type == \"secondary\"\n        must:\n        sizing.rainfall_rate == primary_system.rainfall_rate\n        sizing.per == \"Section_1106\"\n        if drain.type == \"scupper\":\n        ponding_depth <= roof.design_depth\n        opening.height >= 4.inches\n        opening.width >= equivalent_drain.circumference\n        primary_flow.considered == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.3\"\n    must:\n        sizing.rainfall_rate == primary_system.rainfall_rate\n        sizing.per == \"Section_1106\"\n        if drain.type == \"scupper\":\n        ponding_depth <= roof.design_depth\n        opening.height >= 4.inches\n        opening.width >= equivalent_drain.circumference\n        primary_flow.considered == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1108.3\"", "rule_name": "secondary_drain_sizing"}
{"type": "bcl_to_physics", "input": "rule secondary_drain_sizing with constraints: height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1108.3", "rule_name": "secondary_drain_sizing"}
{"type": "bcl_completion", "input": "rule secondary_drain_sizing:\n    where:\n        drain.type == \"secondary\"\n    # Complete this rule", "output": "rule secondary_drain_sizing:\n    where:\n        drain.type == \"secondary\"\n        must:\n        sizing.rainfall_rate == primary_system.rainfall_rate\n        sizing.per == \"Section_1106\"\n        if drain.type == \"scupper\":\n        ponding_depth <= roof.design_depth\n        opening.height >= 4.inches\n        opening.width >= equivalent_drain.circumference\n        primary_flow.considered == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.3\"\n    must:\n        sizing.rainfall_rate == primary_system.rainfall_rate\n        sizing.per == \"Section_1106\"\n        if drain.type == \"scupper\":\n        ponding_depth <= roof.design_depth\n        opening.height >= 4.inches\n        opening.width >= equivalent_drain.circumference\n        primary_flow.considered == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1108.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1108.3\"", "rule_name": "secondary_drain_sizing"}
{"type": "safety_factor_reasoning", "input": "For secondary_drain_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1108.3.", "rule_name": "secondary_drain_sizing", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for controlled flow design: When system.type == \"controlled_flow_roof_drain\" and must:, it is required that roof.designed_for_water_storage == true and system.engineered == true", "output": "rule controlled_flow_design:\n    where:\n        system.type == \"controlled_flow_roof_drain\"\n        must:\n        roof.designed_for_water_storage == true\n        system.engineered == true\n        design.per == \"Section_316.1\"\n        rainfall_rate.per == \"Section_1106.1\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1110.1\"\n    must:\n        roof.designed_for_water_storage == true\n        system.engineered == true\n        design.per == \"Section_316.1\"\n        rainfall_rate.per == \"Section_1106.1\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1110.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1110.1\"", "rule_name": "controlled_flow_design"}
{"type": "bcl_to_physics", "input": "rule controlled_flow_design with conditions: roof.designed_for_water_storage == true, system.engineered == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1110.1", "rule_name": "controlled_flow_design"}
{"type": "bcl_completion", "input": "rule controlled_flow_design:\n    where:\n        system.type == \"controlled_flow_roof_drain\"\n    # Complete this rule", "output": "rule controlled_flow_design:\n    where:\n        system.type == \"controlled_flow_roof_drain\"\n        must:\n        roof.designed_for_water_storage == true\n        system.engineered == true\n        design.per == \"Section_316.1\"\n        rainfall_rate.per == \"Section_1106.1\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1110.1\"\n    must:\n        roof.designed_for_water_storage == true\n        system.engineered == true\n        design.per == \"Section_316.1\"\n        rainfall_rate.per == \"Section_1106.1\"\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.11.1110.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.11.1110.1\"", "rule_name": "controlled_flow_design"}
{"type": "safety_factor_reasoning", "input": "For controlled_flow_design rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.11.1110.1.", "rule_name": "controlled_flow_design", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for controlled flow requirements: When system.type == \"controlled_flow\" and must:, it is required that control_devices.installed == true and discharge_rate <= continuous_flow_values", "output": "rule controlled_flow_requirements:\n    where:\n        system.type == \"controlled_flow\"\n        must:\n        control_devices.installed == true\n        discharge_rate <= continuous_flow_values\n        control_devices.protected_by == \"strainers\"\n        if roof_area <= 10000.sqft:\n        roof_drains >= 2\n        else:\n        roof_drains >= 4\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1110.2-1110.4\"\n    must:\n        control_devices.installed == true\n        discharge_rate <= continuous_flow_values\n        control_devices.protected_by == \"strainers\"\n        if roof_area <= 10000.sqft:\n        roof_drains >= 2\n        else:\n        roof_drains >= 4\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1110.2-1110.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1110.2-1110.4\"", "rule_name": "controlled_flow_requirements"}
{"type": "bcl_to_physics", "input": "rule controlled_flow_requirements with constraints: roof_area", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1110.2-1110.4", "rule_name": "controlled_flow_requirements"}
{"type": "bcl_completion", "input": "rule controlled_flow_requirements:\n    where:\n        system.type == \"controlled_flow\"\n    # Complete this rule", "output": "rule controlled_flow_requirements:\n    where:\n        system.type == \"controlled_flow\"\n        must:\n        control_devices.installed == true\n        discharge_rate <= continuous_flow_values\n        control_devices.protected_by == \"strainers\"\n        if roof_area <= 10000.sqft:\n        roof_drains >= 2\n        else:\n        roof_drains >= 4\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1110.2-1110.4\"\n    must:\n        control_devices.installed == true\n        discharge_rate <= continuous_flow_values\n        control_devices.protected_by == \"strainers\"\n        if roof_area <= 10000.sqft:\n        roof_drains >= 2\n        else:\n        roof_drains >= 4\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1110.2-1110.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1110.2-1110.4\"", "rule_name": "controlled_flow_requirements"}
{"type": "safety_factor_reasoning", "input": "For controlled_flow_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1110.2-1110.4.", "rule_name": "controlled_flow_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for subsoil drain requirements: When drain.type == \"subsoil\" and must:, it is required that pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"] and pipe.diameter >= 4.inches", "output": "rule subsoil_drain_requirements:\n    where:\n        drain.type == \"subsoil\"\n        must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.diameter >= 4.inches\n        if building.subject_to_backwater == true:\n        backwater_valve.installed == true\n        backwater_valve.accessible == true\n        discharge.to IN [\"trapped_area_drain\", \"sump\", \"dry_well\", \"approved_above_ground\"]\n        if discharge.to == \"sump\":\n        sump.gas_tight_cover.required == false\n        sump.vent.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1111.1\"\n    must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.diameter >= 4.inches\n        if building.subject_to_backwater == true:\n        backwater_valve.installed == true\n        backwater_valve.accessible == true\n        discharge.to IN [\"trapped_area_drain\", \"sump\", \"dry_well\", \"approved_above_ground\"]\n        if discharge.to == \"sump\":\n        sump.gas_tight_cover.required == false\n        sump.vent.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1111.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1111.1\"", "rule_name": "subsoil_drain_requirements"}
{"type": "bcl_to_physics", "input": "rule subsoil_drain_requirements with constraints: diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.11.1111.1", "rule_name": "subsoil_drain_requirements"}
{"type": "bcl_completion", "input": "rule subsoil_drain_requirements:\n    where:\n        drain.type == \"subsoil\"\n    # Complete this rule", "output": "rule subsoil_drain_requirements:\n    where:\n        drain.type == \"subsoil\"\n        must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.diameter >= 4.inches\n        if building.subject_to_backwater == true:\n        backwater_valve.installed == true\n        backwater_valve.accessible == true\n        discharge.to IN [\"trapped_area_drain\", \"sump\", \"dry_well\", \"approved_above_ground\"]\n        if discharge.to == \"sump\":\n        sump.gas_tight_cover.required == false\n        sump.vent.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1111.1\"\n    must:\n        pipe.type IN [\"open_jointed\", \"horizontally_split\", \"perforated\"]\n        pipe.diameter >= 4.inches\n        if building.subject_to_backwater == true:\n        backwater_valve.installed == true\n        backwater_valve.accessible == true\n        discharge.to IN [\"trapped_area_drain\", \"sump\", \"dry_well\", \"approved_above_ground\"]\n        if discharge.to == \"sump\":\n        sump.gas_tight_cover.required == false\n        sump.vent.required == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1111.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1111.1\"", "rule_name": "subsoil_drain_requirements"}
{"type": "safety_factor_reasoning", "input": "For subsoil_drain_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1111.1.", "rule_name": "subsoil_drain_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for building subdrain pumping: When subdrain.location == \"below_public_sewer\" and must:, it is required that discharge.to IN [\"sump\", \"receiving_tank\"] and contents.automatically_lifted == true", "output": "rule building_subdrain_pumping:\n    where:\n        subdrain.location == \"below_public_sewer\"\n        must:\n        discharge.to IN [\"sump\", \"receiving_tank\"]\n        contents.automatically_lifted == true\n        discharge.to == \"drainage_system\"\n        pumping.per == \"Section_1113.1\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1112.1\"\n    must:\n        discharge.to IN [\"sump\", \"receiving_tank\"]\n        contents.automatically_lifted == true\n        discharge.to == \"drainage_system\"\n        pumping.per == \"Section_1113.1\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1112.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1112.1\"", "rule_name": "building_subdrain_pumping"}
{"type": "bcl_to_physics", "input": "rule building_subdrain_pumping with conditions: discharge.to IN [\"sump\", \"receiving_tank\"], contents.automatically_lifted == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.11.1112.1", "rule_name": "building_subdrain_pumping"}
{"type": "bcl_completion", "input": "rule building_subdrain_pumping:\n    where:\n        subdrain.location == \"below_public_sewer\"\n    # Complete this rule", "output": "rule building_subdrain_pumping:\n    where:\n        subdrain.location == \"below_public_sewer\"\n        must:\n        discharge.to IN [\"sump\", \"receiving_tank\"]\n        contents.automatically_lifted == true\n        discharge.to == \"drainage_system\"\n        pumping.per == \"Section_1113.1\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1112.1\"\n    must:\n        discharge.to IN [\"sump\", \"receiving_tank\"]\n        contents.automatically_lifted == true\n        discharge.to == \"drainage_system\"\n        pumping.per == \"Section_1113.1\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1112.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1112.1\"", "rule_name": "building_subdrain_pumping"}
{"type": "safety_factor_reasoning", "input": "For building_subdrain_pumping rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1112.1.", "rule_name": "building_subdrain_pumping", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for sump pump requirements: When sump.has_pump == true and must:, it is required that pump.capacity >= anticipated_use and pump.head >= required_head", "output": "rule sump_pump_requirements:\n    where:\n        sump.has_pump == true\n        must:\n        pump.capacity >= anticipated_use\n        pump.head >= required_head\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.material IN [\"tile\", \"steel\", \"plastic\", \"cast_iron\", \"concrete\", \"approved\"]\n        pit.cover.removable == true\n        pit.cover.supports_anticipated_loads == true\n        pit.floor.solid == true\n        pit.floor.supports_pump == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1113.1.1-1113.1.2\"\n    must:\n        pump.capacity >= anticipated_use\n        pump.head >= required_head\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.material IN [\"tile\", \"steel\", \"plastic\", \"cast_iron\", \"concrete\", \"approved\"]\n        pit.cover.removable == true\n        pit.cover.supports_anticipated_loads == true\n        pit.floor.solid == true\n        pit.floor.supports_pump == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1113.1.1-1113.1.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1113.1.1-1113.1.2\"", "rule_name": "sump_pump_requirements"}
{"type": "bcl_to_physics", "input": "rule sump_pump_requirements with constraints: diameter, depth", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.11.1113.1.1-1113.1.2", "rule_name": "sump_pump_requirements"}
{"type": "bcl_completion", "input": "rule sump_pump_requirements:\n    where:\n        sump.has_pump == true\n    # Complete this rule", "output": "rule sump_pump_requirements:\n    where:\n        sump.has_pump == true\n        must:\n        pump.capacity >= anticipated_use\n        pump.head >= required_head\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.material IN [\"tile\", \"steel\", \"plastic\", \"cast_iron\", \"concrete\", \"approved\"]\n        pit.cover.removable == true\n        pit.cover.supports_anticipated_loads == true\n        pit.floor.solid == true\n        pit.floor.supports_pump == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1113.1.1-1113.1.2\"\n    must:\n        pump.capacity >= anticipated_use\n        pump.head >= required_head\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.material IN [\"tile\", \"steel\", \"plastic\", \"cast_iron\", \"concrete\", \"approved\"]\n        pit.cover.removable == true\n        pit.cover.supports_anticipated_loads == true\n        pit.floor.solid == true\n        pit.floor.supports_pump == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.11.1113.1.1-1113.1.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.11.1113.1.1-1113.1.2\"", "rule_name": "sump_pump_requirements"}
{"type": "safety_factor_reasoning", "input": "For sump_pump_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.11.1113.1.1-1113.1.2.", "rule_name": "sump_pump_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for sump discharge piping: When pump.type == \"sump\" and must:, it is required that piping.meets_requirements IN [\"Section_1102.2\", \"Section_1102.3\", \"Section_1102.4\"] and gate_valve.installed == true", "output": "rule sump_discharge_piping:\n    where:\n        pump.type == \"sump\"\n        must:\n        piping.meets_requirements IN [\"Section_1102.2\", \"Section_1102.3\", \"Section_1102.4\"]\n        gate_valve.installed == true\n        check_valve.full_flow == true\n        pipe.size >= pump_discharge.size\n        if occupancy IN [\"one_family\", \"two_family\"]:\n        only_check_valve.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1113.1.4\"\n        constraint roof_drainage_capacity:\n        where:\n        drain.type == \"roof\"\n        must:\n        flow_capacity = flow.manning_flow(\n        hydraulic_radius,\n        slope,\n        roughness_coefficient\n        )\n        flow_capacity >= rainfall_intensity * roof_area * runoff_coefficient\n        safety_factor: 1.5\n        constraint vertical_conductor_capacity:\n        where:\n        conductor.orientation == \"vertical\"\n        must:\n        terminal_velocity = sqrt(2 * gravity * water_depth)\n        flow_rate = velocity * pipe.area * fill_ratio\n        fill_ratio <= 0.33\n        safety_factor: 1.3\n        constraint horizontal_drain_flow:\n        where:\n        drain.orientation == \"horizontal\"\n        must:\n        velocity = flow.manning_velocity(hydraulic_radius, slope)\n        velocity >= 2.feet_per_second  # Self-cleaning velocity\n        velocity <= 10.feet_per_second\n        safety_factor: 1.2\n        constraint sump_pump_performance:\n        where:\n        pump.type == \"sump\"\n        must:\n        flow_rate = pump.flow_at_head(total_dynamic_head)\n        total_head = static_lift + friction_losses + velocity_head\n        pump_capacity > max_inflow_rate * 1.25\n        safety_factor: 1.5\n        constraint scupper_weir_flow:\n        where:\n        drain.type == \"scupper\"\n        must:\n        flow_rate = 3.33 * width * head^1.5  # Rectangular weir\n        head_at_design_flow <= allowable_ponding_depth\n        safety_factor: 1.3\n        constraint gutter_flow_capacity:\n        where:\n        gutter.type == \"horizontal\"\n        must:\n        wetted_perimeter = flow.wetted_perimeter(water_depth, gutter_shape)\n        hydraulic_radius = flow_area / wetted_perimeter\n        capacity = flow.manning_flow(hydraulic_radius, slope, roughness)\n        water_depth < gutter.depth\n        safety_factor: 1.2\n        constraint subsoil_drain_permeability:\n        where:\n        drain.type == \"subsoil\"\n        must:\n        seepage_rate = permeability * hydraulic_gradient * area\n        perforation_capacity > seepage_rate\n        filter_velocity < soil_piping_velocity\n    must:\n        piping.meets_requirements IN [\"Section_1102.2\", \"Section_1102.3\", \"Section_1102.4\"]\n        gate_valve.installed == true\n        check_valve.full_flow == true\n        pipe.size >= pump_discharge.size\n        if occupancy IN [\"one_family\", \"two_family\"]:\n        only_check_valve.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1113.1.4\"\n        constraint roof_drainage_capacity:\n        where:\n        drain.type == \"roof\"\n        must:\n        flow_capacity = flow.manning_flow(\n        hydraulic_radius,\n        slope,\n        roughness_coefficient\n        )\n        flow_capacity >= rainfall_intensity * roof_area * runoff_coefficient\n        safety_factor: 1.5\n        constraint vertical_conductor_capacity:\n        where:\n        conductor.orientation == \"vertical\"\n        must:\n        terminal_velocity = sqrt(2 * gravity * water_depth)\n        flow_rate = velocity * pipe.area * fill_ratio\n        fill_ratio <= 0.33\n        safety_factor: 1.3\n        constraint horizontal_drain_flow:\n        where:\n        drain.orientation == \"horizontal\"\n        must:\n        velocity = flow.manning_velocity(hydraulic_radius, slope)\n        velocity >= 2.feet_per_second  # Self-cleaning velocity\n        velocity <= 10.feet_per_second\n        safety_factor: 1.2\n        constraint sump_pump_performance:\n        where:\n        pump.type == \"sump\"\n        must:\n        flow_rate = pump.flow_at_head(total_dynamic_head)\n        total_head = static_lift + friction_losses + velocity_head\n        pump_capacity > max_inflow_rate * 1.25\n        safety_factor: 1.5\n        constraint scupper_weir_flow:\n        where:\n        drain.type == \"scupper\"\n        must:\n        flow_rate = 3.33 * width * head^1.5  # Rectangular weir\n        head_at_design_flow <= allowable_ponding_depth\n        safety_factor: 1.3\n        constraint gutter_flow_capacity:\n        where:\n        gutter.type == \"horizontal\"\n        must:\n        wetted_perimeter = flow.wetted_perimeter(water_depth, gutter_shape)\n        hydraulic_radius = flow_area / wetted_perimeter\n        capacity = flow.manning_flow(hydraulic_radius, slope, roughness)\n        water_depth < gutter.depth\n        safety_factor: 1.2\n        constraint subsoil_drain_permeability:\n        where:\n        drain.type == \"subsoil\"\n        must:\n        seepage_rate = permeability * hydraulic_gradient * area\n        perforation_capacity > seepage_rate\n        filter_velocity < soil_piping_velocity\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1113.1.4\"", "rule_name": "sump_discharge_piping"}
{"type": "bcl_to_physics", "input": "rule sump_discharge_piping with constraints: fill_ratio, velocity", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.11.1113.1.4", "rule_name": "sump_discharge_piping"}
{"type": "bcl_completion", "input": "rule sump_discharge_piping:\n    where:\n        pump.type == \"sump\"\n    # Complete this rule", "output": "rule sump_discharge_piping:\n    where:\n        pump.type == \"sump\"\n        must:\n        piping.meets_requirements IN [\"Section_1102.2\", \"Section_1102.3\", \"Section_1102.4\"]\n        gate_valve.installed == true\n        check_valve.full_flow == true\n        pipe.size >= pump_discharge.size\n        if occupancy IN [\"one_family\", \"two_family\"]:\n        only_check_valve.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1113.1.4\"\n        constraint roof_drainage_capacity:\n        where:\n        drain.type == \"roof\"\n        must:\n        flow_capacity = flow.manning_flow(\n        hydraulic_radius,\n        slope,\n        roughness_coefficient\n        )\n        flow_capacity >= rainfall_intensity * roof_area * runoff_coefficient\n        safety_factor: 1.5\n        constraint vertical_conductor_capacity:\n        where:\n        conductor.orientation == \"vertical\"\n        must:\n        terminal_velocity = sqrt(2 * gravity * water_depth)\n        flow_rate = velocity * pipe.area * fill_ratio\n        fill_ratio <= 0.33\n        safety_factor: 1.3\n        constraint horizontal_drain_flow:\n        where:\n        drain.orientation == \"horizontal\"\n        must:\n        velocity = flow.manning_velocity(hydraulic_radius, slope)\n        velocity >= 2.feet_per_second  # Self-cleaning velocity\n        velocity <= 10.feet_per_second\n        safety_factor: 1.2\n        constraint sump_pump_performance:\n        where:\n        pump.type == \"sump\"\n        must:\n        flow_rate = pump.flow_at_head(total_dynamic_head)\n        total_head = static_lift + friction_losses + velocity_head\n        pump_capacity > max_inflow_rate * 1.25\n        safety_factor: 1.5\n        constraint scupper_weir_flow:\n        where:\n        drain.type == \"scupper\"\n        must:\n        flow_rate = 3.33 * width * head^1.5  # Rectangular weir\n        head_at_design_flow <= allowable_ponding_depth\n        safety_factor: 1.3\n        constraint gutter_flow_capacity:\n        where:\n        gutter.type == \"horizontal\"\n        must:\n        wetted_perimeter = flow.wetted_perimeter(water_depth, gutter_shape)\n        hydraulic_radius = flow_area / wetted_perimeter\n        capacity = flow.manning_flow(hydraulic_radius, slope, roughness)\n        water_depth < gutter.depth\n        safety_factor: 1.2\n        constraint subsoil_drain_permeability:\n        where:\n        drain.type == \"subsoil\"\n        must:\n        seepage_rate = permeability * hydraulic_gradient * area\n        perforation_capacity > seepage_rate\n        filter_velocity < soil_piping_velocity\n    must:\n        piping.meets_requirements IN [\"Section_1102.2\", \"Section_1102.3\", \"Section_1102.4\"]\n        gate_valve.installed == true\n        check_valve.full_flow == true\n        pipe.size >= pump_discharge.size\n        if occupancy IN [\"one_family\", \"two_family\"]:\n        only_check_valve.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.11.1113.1.4\"\n        constraint roof_drainage_capacity:\n        where:\n        drain.type == \"roof\"\n        must:\n        flow_capacity = flow.manning_flow(\n        hydraulic_radius,\n        slope,\n        roughness_coefficient\n        )\n        flow_capacity >= rainfall_intensity * roof_area * runoff_coefficient\n        safety_factor: 1.5\n        constraint vertical_conductor_capacity:\n        where:\n        conductor.orientation == \"vertical\"\n        must:\n        terminal_velocity = sqrt(2 * gravity * water_depth)\n        flow_rate = velocity * pipe.area * fill_ratio\n        fill_ratio <= 0.33\n        safety_factor: 1.3\n        constraint horizontal_drain_flow:\n        where:\n        drain.orientation == \"horizontal\"\n        must:\n        velocity = flow.manning_velocity(hydraulic_radius, slope)\n        velocity >= 2.feet_per_second  # Self-cleaning velocity\n        velocity <= 10.feet_per_second\n        safety_factor: 1.2\n        constraint sump_pump_performance:\n        where:\n        pump.type == \"sump\"\n        must:\n        flow_rate = pump.flow_at_head(total_dynamic_head)\n        total_head = static_lift + friction_losses + velocity_head\n        pump_capacity > max_inflow_rate * 1.25\n        safety_factor: 1.5\n        constraint scupper_weir_flow:\n        where:\n        drain.type == \"scupper\"\n        must:\n        flow_rate = 3.33 * width * head^1.5  # Rectangular weir\n        head_at_design_flow <= allowable_ponding_depth\n        safety_factor: 1.3\n        constraint gutter_flow_capacity:\n        where:\n        gutter.type == \"horizontal\"\n        must:\n        wetted_perimeter = flow.wetted_perimeter(water_depth, gutter_shape)\n        hydraulic_radius = flow_area / wetted_perimeter\n        capacity = flow.manning_flow(hydraulic_radius, slope, roughness)\n        water_depth < gutter.depth\n        safety_factor: 1.2\n        constraint subsoil_drain_permeability:\n        where:\n        drain.type == \"subsoil\"\n        must:\n        seepage_rate = permeability * hydraulic_gradient * area\n        perforation_capacity > seepage_rate\n        filter_velocity < soil_piping_velocity\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.11.1113.1.4\"", "rule_name": "sump_discharge_piping"}
{"type": "safety_factor_reasoning", "input": "For sump_discharge_piping rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.11.1113.1.4.", "rule_name": "sump_discharge_piping", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for special piping scope: When system.type IN [\"nonflammable_medical_gas\", \"nonmedical_oxygen\"] and must:, it is required that design.per_this_chapter == true and installation.per_this_chapter == true", "output": "rule special_piping_scope:\n    where:\n        system.type IN [\"nonflammable_medical_gas\", \"nonmedical_oxygen\"]\n        must:\n        design.per_this_chapter == true\n        installation.per_this_chapter == true\n        maintenance.per == \"Florida_Fire_Prevention_Code\"\n        operations.per == \"Florida_Fire_Prevention_Code\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1201.1\"\n    must:\n        design.per_this_chapter == true\n        installation.per_this_chapter == true\n        maintenance.per == \"Florida_Fire_Prevention_Code\"\n        operations.per == \"Florida_Fire_Prevention_Code\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1201.1\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.12.1201.1\"", "rule_name": "special_piping_scope"}
{"type": "bcl_to_physics", "input": "rule special_piping_scope with conditions: design.per_this_chapter == true, installation.per_this_chapter == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.12.1201.1", "rule_name": "special_piping_scope"}
{"type": "bcl_completion", "input": "rule special_piping_scope:\n    where:\n        system.type IN [\"nonflammable_medical_gas\", \"nonmedical_oxygen\"]\n    # Complete this rule", "output": "rule special_piping_scope:\n    where:\n        system.type IN [\"nonflammable_medical_gas\", \"nonmedical_oxygen\"]\n        must:\n        design.per_this_chapter == true\n        installation.per_this_chapter == true\n        maintenance.per == \"Florida_Fire_Prevention_Code\"\n        operations.per == \"Florida_Fire_Prevention_Code\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1201.1\"\n    must:\n        design.per_this_chapter == true\n        installation.per_this_chapter == true\n        maintenance.per == \"Florida_Fire_Prevention_Code\"\n        operations.per == \"Florida_Fire_Prevention_Code\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1201.1\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.12.1201.1\"", "rule_name": "special_piping_scope"}
{"type": "safety_factor_reasoning", "input": "For special_piping_scope rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.12.1201.1.", "rule_name": "special_piping_scope", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for nonflammable medical gas systems: When system.type IN [ and \"nonflammable_medical_gas\",, it is required that installation.per == \"NFPA_99\" and testing.per == \"NFPA_99\"", "output": "rule nonflammable_medical_gas_systems:\n    where:\n        system.type IN [\n        \"nonflammable_medical_gas\",\n        \"inhalation_anesthetic\",\n        \"vacuum_piping\"\n        ]\n        system.not IN [\"portable\", \"cylinder_storage\"]\n        must:\n        installation.per == \"NFPA_99\"\n        testing.per == \"NFPA_99\"\n        labeling.per == \"NFPA_99\"\n        if system.type == \"vacuum\" AND component == \"exhaust_termination\":\n        compliance.per == \"Florida_Building_Code_Mechanical\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1202.1\"\n    must:\n        installation.per == \"NFPA_99\"\n        testing.per == \"NFPA_99\"\n        labeling.per == \"NFPA_99\"\n        if system.type == \"vacuum\" AND component == \"exhaust_termination\":\n        compliance.per == \"Florida_Building_Code_Mechanical\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1202.1\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.12.1202.1\"", "rule_name": "nonflammable_medical_gas_systems"}
{"type": "bcl_to_physics", "input": "rule nonflammable_medical_gas_systems with conditions: installation.per == \"NFPA_99\", testing.per == \"NFPA_99\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.12.1202.1", "rule_name": "nonflammable_medical_gas_systems"}
{"type": "bcl_completion", "input": "rule nonflammable_medical_gas_systems:\n    where:\n        system.type IN [\n    # Complete this rule", "output": "rule nonflammable_medical_gas_systems:\n    where:\n        system.type IN [\n        \"nonflammable_medical_gas\",\n        \"inhalation_anesthetic\",\n        \"vacuum_piping\"\n        ]\n        system.not IN [\"portable\", \"cylinder_storage\"]\n        must:\n        installation.per == \"NFPA_99\"\n        testing.per == \"NFPA_99\"\n        labeling.per == \"NFPA_99\"\n        if system.type == \"vacuum\" AND component == \"exhaust_termination\":\n        compliance.per == \"Florida_Building_Code_Mechanical\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1202.1\"\n    must:\n        installation.per == \"NFPA_99\"\n        testing.per == \"NFPA_99\"\n        labeling.per == \"NFPA_99\"\n        if system.type == \"vacuum\" AND component == \"exhaust_termination\":\n        compliance.per == \"Florida_Building_Code_Mechanical\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1202.1\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.12.1202.1\"", "rule_name": "nonflammable_medical_gas_systems"}
{"type": "safety_factor_reasoning", "input": "For nonflammable_medical_gas_systems rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.12.1202.1.", "rule_name": "nonflammable_medical_gas_systems", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for nonmedical oxygen systems: When system.type == \"nonmedical_oxygen\" and must:, it is required that design.per == \"NFPA_55\" and installation.per == \"NFPA_55\"", "output": "rule nonmedical_oxygen_systems:\n    where:\n        system.type == \"nonmedical_oxygen\"\n        must:\n        design.per == \"NFPA_55\"\n        installation.per == \"NFPA_55\"\n        compliance.with == \"NFPA_51\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1203.1\"\n        constraint medical_gas_flow_capacity:\n        where:\n        system.type == \"medical_gas\"\n        must:\n        design_flow = peak_demand * diversity_factor\n        pressure_drop = flow.friction_loss(pipe_length, diameter, flow_rate)\n        pressure_at_outlet >= minimum_required_pressure + pressure_drop\n        gas_velocity = flow_rate / pipe.area\n        gas_velocity <= 20.meters_per_second\n        safety_factor: 2.0\n        constraint medical_vacuum_capacity:\n        where:\n        system.type == \"medical_vacuum\"\n        must:\n        vacuum_level >= 15.inches_mercury  # Typical medical requirement\n        system_capacity >= simultaneous_demand * 1.5\n        pressure_rise_time <= 10.seconds  # To operating vacuum\n        safety_factor: 1.5\n        constraint oxygen_system_velocity:\n        where:\n        system.contains == \"oxygen\"\n        oxygen.concentration > 23.5.percent\n        must:\n        if pipe.material == \"copper\":\n        velocity <= 8.meters_per_second\n        elif pipe.material == \"stainless_steel\":\n        velocity <= 30.meters_per_second\n        valve_opening_time >= 5.seconds  # Slow opening\n        safety_factor: 2.0\n    must:\n        design.per == \"NFPA_55\"\n        installation.per == \"NFPA_55\"\n        compliance.with == \"NFPA_51\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1203.1\"\n        constraint medical_gas_flow_capacity:\n        where:\n        system.type == \"medical_gas\"\n        must:\n        design_flow = peak_demand * diversity_factor\n        pressure_drop = flow.friction_loss(pipe_length, diameter, flow_rate)\n        pressure_at_outlet >= minimum_required_pressure + pressure_drop\n        gas_velocity = flow_rate / pipe.area\n        gas_velocity <= 20.meters_per_second\n        safety_factor: 2.0\n        constraint medical_vacuum_capacity:\n        where:\n        system.type == \"medical_vacuum\"\n        must:\n        vacuum_level >= 15.inches_mercury  # Typical medical requirement\n        system_capacity >= simultaneous_demand * 1.5\n        pressure_rise_time <= 10.seconds  # To operating vacuum\n        safety_factor: 1.5\n        constraint oxygen_system_velocity:\n        where:\n        system.contains == \"oxygen\"\n        oxygen.concentration > 23.5.percent\n        must:\n        if pipe.material == \"copper\":\n        velocity <= 8.meters_per_second\n        elif pipe.material == \"stainless_steel\":\n        velocity <= 30.meters_per_second\n        valve_opening_time >= 5.seconds  # Slow opening\n        safety_factor: 2.0\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.12.1203.1\"", "rule_name": "nonmedical_oxygen_systems"}
{"type": "bcl_to_physics", "input": "rule nonmedical_oxygen_systems with constraints: gas_velocity, vacuum_level", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.12.1203.1", "rule_name": "nonmedical_oxygen_systems"}
{"type": "bcl_completion", "input": "rule nonmedical_oxygen_systems:\n    where:\n        system.type == \"nonmedical_oxygen\"\n    # Complete this rule", "output": "rule nonmedical_oxygen_systems:\n    where:\n        system.type == \"nonmedical_oxygen\"\n        must:\n        design.per == \"NFPA_55\"\n        installation.per == \"NFPA_55\"\n        compliance.with == \"NFPA_51\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1203.1\"\n        constraint medical_gas_flow_capacity:\n        where:\n        system.type == \"medical_gas\"\n        must:\n        design_flow = peak_demand * diversity_factor\n        pressure_drop = flow.friction_loss(pipe_length, diameter, flow_rate)\n        pressure_at_outlet >= minimum_required_pressure + pressure_drop\n        gas_velocity = flow_rate / pipe.area\n        gas_velocity <= 20.meters_per_second\n        safety_factor: 2.0\n        constraint medical_vacuum_capacity:\n        where:\n        system.type == \"medical_vacuum\"\n        must:\n        vacuum_level >= 15.inches_mercury  # Typical medical requirement\n        system_capacity >= simultaneous_demand * 1.5\n        pressure_rise_time <= 10.seconds  # To operating vacuum\n        safety_factor: 1.5\n        constraint oxygen_system_velocity:\n        where:\n        system.contains == \"oxygen\"\n        oxygen.concentration > 23.5.percent\n        must:\n        if pipe.material == \"copper\":\n        velocity <= 8.meters_per_second\n        elif pipe.material == \"stainless_steel\":\n        velocity <= 30.meters_per_second\n        valve_opening_time >= 5.seconds  # Slow opening\n        safety_factor: 2.0\n    must:\n        design.per == \"NFPA_55\"\n        installation.per == \"NFPA_55\"\n        compliance.with == \"NFPA_51\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.12.1203.1\"\n        constraint medical_gas_flow_capacity:\n        where:\n        system.type == \"medical_gas\"\n        must:\n        design_flow = peak_demand * diversity_factor\n        pressure_drop = flow.friction_loss(pipe_length, diameter, flow_rate)\n        pressure_at_outlet >= minimum_required_pressure + pressure_drop\n        gas_velocity = flow_rate / pipe.area\n        gas_velocity <= 20.meters_per_second\n        safety_factor: 2.0\n        constraint medical_vacuum_capacity:\n        where:\n        system.type == \"medical_vacuum\"\n        must:\n        vacuum_level >= 15.inches_mercury  # Typical medical requirement\n        system_capacity >= simultaneous_demand * 1.5\n        pressure_rise_time <= 10.seconds  # To operating vacuum\n        safety_factor: 1.5\n        constraint oxygen_system_velocity:\n        where:\n        system.contains == \"oxygen\"\n        oxygen.concentration > 23.5.percent\n        must:\n        if pipe.material == \"copper\":\n        velocity <= 8.meters_per_second\n        elif pipe.material == \"stainless_steel\":\n        velocity <= 30.meters_per_second\n        valve_opening_time >= 5.seconds  # Slow opening\n        safety_factor: 2.0\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.12.1203.1\"", "rule_name": "nonmedical_oxygen_systems"}
{"type": "safety_factor_reasoning", "input": "For nonmedical_oxygen_systems rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.12.1203.1.", "rule_name": "nonmedical_oxygen_systems", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for water quality requirements: When system.type == \"nonpotable_water\" and must:, it is required that water_quality.meets_requirements(end_use_application) and if water_sources.count > 1:", "output": "rule water_quality_requirements:\n    where:\n        system.type == \"nonpotable_water\"\n        must:\n        water_quality.meets_requirements(end_use_application)\n        if water_sources.count > 1:\n        water_quality.meets_all(source.requirements for source in water_sources)\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2\"\n    must:\n        water_quality.meets_requirements(end_use_application)\n        if water_sources.count > 1:\n        water_quality.meets_all(source.requirements for source in water_sources)\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.2\"", "rule_name": "water_quality_requirements"}
{"type": "bcl_to_physics", "input": "rule water_quality_requirements with conditions: water_quality.meets_requirements(end_use_application), if water_sources.count > 1:", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.2", "rule_name": "water_quality_requirements"}
{"type": "bcl_completion", "input": "rule water_quality_requirements:\n    where:\n        system.type == \"nonpotable_water\"\n    # Complete this rule", "output": "rule water_quality_requirements:\n    where:\n        system.type == \"nonpotable_water\"\n        must:\n        water_quality.meets_requirements(end_use_application)\n        if water_sources.count > 1:\n        water_quality.meets_all(source.requirements for source in water_sources)\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2\"\n    must:\n        water_quality.meets_requirements(end_use_application)\n        if water_sources.count > 1:\n        water_quality.meets_all(source.requirements for source in water_sources)\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.2\"", "rule_name": "water_quality_requirements"}
{"type": "safety_factor_reasoning", "input": "For water_quality_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.2.", "rule_name": "water_quality_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for residual disinfectant limits: When system.type == \"nonpotable_water\" and disinfection.method IN [\"chlorine\", \"chloramine\", \"ozone\"], it is required that if disinfection.method IN [\"chlorine\", \"chloramine\"]: and concentration <= 4.ppm", "output": "rule residual_disinfectant_limits:\n    where:\n        system.type == \"nonpotable_water\"\n        disinfection.method IN [\"chlorine\", \"chloramine\", \"ozone\"]\n        source.type != \"reclaimed_water\"\n        must:\n        if disinfection.method IN [\"chlorine\", \"chloramine\"]:\n        concentration <= 4.ppm\n        test_method == \"ASTM_D1253\"\n        if disinfection.method == \"ozone\":\n        gas_bubbles_at_point_of_use == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.2.1\"\n    must:\n        if disinfection.method IN [\"chlorine\", \"chloramine\"]:\n        concentration <= 4.ppm\n        test_method == \"ASTM_D1253\"\n        if disinfection.method == \"ozone\":\n        gas_bubbles_at_point_of_use == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.2.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.13.1301.2.1\"", "rule_name": "residual_disinfectant_limits"}
{"type": "bcl_to_physics", "input": "rule residual_disinfectant_limits with constraints: concentration", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.2.1", "rule_name": "residual_disinfectant_limits"}
{"type": "bcl_completion", "input": "rule residual_disinfectant_limits:\n    where:\n        system.type == \"nonpotable_water\"\n    # Complete this rule", "output": "rule residual_disinfectant_limits:\n    where:\n        system.type == \"nonpotable_water\"\n        disinfection.method IN [\"chlorine\", \"chloramine\", \"ozone\"]\n        source.type != \"reclaimed_water\"\n        must:\n        if disinfection.method IN [\"chlorine\", \"chloramine\"]:\n        concentration <= 4.ppm\n        test_method == \"ASTM_D1253\"\n        if disinfection.method == \"ozone\":\n        gas_bubbles_at_point_of_use == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.2.1\"\n    must:\n        if disinfection.method IN [\"chlorine\", \"chloramine\"]:\n        concentration <= 4.ppm\n        test_method == \"ASTM_D1253\"\n        if disinfection.method == \"ozone\":\n        gas_bubbles_at_point_of_use == false\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.2.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.13.1301.2.1\"", "rule_name": "residual_disinfectant_limits"}
{"type": "safety_factor_reasoning", "input": "For residual_disinfectant_limits rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.13.1301.2.1.", "rule_name": "residual_disinfectant_limits", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for filtration requirements: When nonpotable_water.use IN [\"water_closet_flushing\", \"urinal_flushing\"] and source.type != \"reclaimed_water\", it is required that filter.installed == true and filter.rating <= 100.microns", "output": "rule filtration_requirements:\n    where:\n        nonpotable_water.use IN [\"water_closet_flushing\", \"urinal_flushing\"]\n        source.type != \"reclaimed_water\"\n        must:\n        filter.installed == true\n        filter.rating <= 100.microns\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2.2\"\n    must:\n        filter.installed == true\n        filter.rating <= 100.microns\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.2.2\"", "rule_name": "filtration_requirements"}
{"type": "bcl_to_physics", "input": "rule filtration_requirements with constraints: rating", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.2.2", "rule_name": "filtration_requirements"}
{"type": "bcl_completion", "input": "rule filtration_requirements:\n    where:\n        nonpotable_water.use IN [\"water_closet_flushing\", \"urinal_flushing\"]\n    # Complete this rule", "output": "rule filtration_requirements:\n    where:\n        nonpotable_water.use IN [\"water_closet_flushing\", \"urinal_flushing\"]\n        source.type != \"reclaimed_water\"\n        must:\n        filter.installed == true\n        filter.rating <= 100.microns\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2.2\"\n    must:\n        filter.installed == true\n        filter.rating <= 100.microns\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.2.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.2.2\"", "rule_name": "filtration_requirements"}
{"type": "safety_factor_reasoning", "input": "For filtration_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.2.2.", "rule_name": "filtration_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for nonpotable signage: When outlet.type IN [\"hose_connection\", \"open_pipe\", \"faucet\"] and outlet.water_type == \"nonpotable\", it is required that sign.installed == true and sign.text == \"Nonpotable water is utilized for [application]. CAUTION: NONPOTABLE WATER \u00e2\u20ac\u201c DO NOT DRINK\"", "output": "rule nonpotable_signage:\n    where:\n        outlet.type IN [\"hose_connection\", \"open_pipe\", \"faucet\"]\n        outlet.water_type == \"nonpotable\"\n        must:\n        sign.installed == true\n        sign.text == \"Nonpotable water is utilized for [application]. CAUTION: NONPOTABLE WATER \u00e2\u20ac\u201c DO NOT DRINK\"\n        sign.letter_height >= 0.5.inches\n        sign.contrast_with_background == true\n        sign.material.corrosion_resistant == true\n        sign.material.waterproof == true\n        sign.includes_pictograph == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.3\"\n    must:\n        sign.installed == true\n        sign.text == \"Nonpotable water is utilized for [application]. CAUTION: NONPOTABLE WATER \u00e2\u20ac\u201c DO NOT DRINK\"\n        sign.letter_height >= 0.5.inches\n        sign.contrast_with_background == true\n        sign.material.corrosion_resistant == true\n        sign.material.waterproof == true\n        sign.includes_pictograph == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.13.1301.3\"", "rule_name": "nonpotable_signage"}
{"type": "bcl_to_physics", "input": "rule nonpotable_signage with constraints: letter_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.3", "rule_name": "nonpotable_signage"}
{"type": "bcl_completion", "input": "rule nonpotable_signage:\n    where:\n        outlet.type IN [\"hose_connection\", \"open_pipe\", \"faucet\"]\n    # Complete this rule", "output": "rule nonpotable_signage:\n    where:\n        outlet.type IN [\"hose_connection\", \"open_pipe\", \"faucet\"]\n        outlet.water_type == \"nonpotable\"\n        must:\n        sign.installed == true\n        sign.text == \"Nonpotable water is utilized for [application]. CAUTION: NONPOTABLE WATER \u00e2\u20ac\u201c DO NOT DRINK\"\n        sign.letter_height >= 0.5.inches\n        sign.contrast_with_background == true\n        sign.material.corrosion_resistant == true\n        sign.material.waterproof == true\n        sign.includes_pictograph == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.3\"\n    must:\n        sign.installed == true\n        sign.text == \"Nonpotable water is utilized for [application]. CAUTION: NONPOTABLE WATER \u00e2\u20ac\u201c DO NOT DRINK\"\n        sign.letter_height >= 0.5.inches\n        sign.contrast_with_background == true\n        sign.material.corrosion_resistant == true\n        sign.material.waterproof == true\n        sign.includes_pictograph == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.3\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.13.1301.3\"", "rule_name": "nonpotable_signage"}
{"type": "safety_factor_reasoning", "input": "For nonpotable_signage rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.3.", "rule_name": "nonpotable_signage", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for backflow protection: When connection.from == \"potable_system\" and connection.to == \"nonpotable_system\", it is required that backflow_preventer.installed == true and backflow_preventer.complies_with_section_608 == true", "output": "rule backflow_protection:\n    where:\n        connection.from == \"potable_system\"\n        connection.to == \"nonpotable_system\"\n        must:\n        backflow_preventer.installed == true\n        backflow_preventer.complies_with_section_608 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.5\"\n    must:\n        backflow_preventer.installed == true\n        backflow_preventer.complies_with_section_608 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.13.1301.5\"", "rule_name": "backflow_protection"}
{"type": "bcl_to_physics", "input": "rule backflow_protection with conditions: backflow_preventer.installed == true, backflow_preventer.complies_with_section_608 == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.13.1301.5", "rule_name": "backflow_protection"}
{"type": "bcl_completion", "input": "rule backflow_protection:\n    where:\n        connection.from == \"potable_system\"\n    # Complete this rule", "output": "rule backflow_protection:\n    where:\n        connection.from == \"potable_system\"\n        connection.to == \"nonpotable_system\"\n        must:\n        backflow_preventer.installed == true\n        backflow_preventer.complies_with_section_608 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.5\"\n    must:\n        backflow_preventer.installed == true\n        backflow_preventer.complies_with_section_608 == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.13.1301.5\"", "rule_name": "backflow_protection"}
{"type": "safety_factor_reasoning", "input": "For backflow_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.13.1301.5.", "rule_name": "backflow_protection", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for insect vermin protection: When component.type IN [\"storage_tank\", \"piping_system\"] and component.part_of == \"nonpotable_system\", it is required that protection.prevents_insect_entry == true and protection.prevents_vermin_entry == true", "output": "rule insect_vermin_protection:\n    where:\n        component.type IN [\"storage_tank\", \"piping_system\"]\n        component.part_of == \"nonpotable_system\"\n        must:\n        protection.prevents_insect_entry == true\n        protection.prevents_vermin_entry == true\n        screen.material.compatible_with_system == true\n        screen.does_not_accelerate_corrosion == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.7\"\n    must:\n        protection.prevents_insect_entry == true\n        protection.prevents_vermin_entry == true\n        screen.material.compatible_with_system == true\n        screen.does_not_accelerate_corrosion == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.7\"", "rule_name": "insect_vermin_protection"}
{"type": "bcl_to_physics", "input": "rule insect_vermin_protection with conditions: protection.prevents_insect_entry == true, protection.prevents_vermin_entry == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.7", "rule_name": "insect_vermin_protection"}
{"type": "bcl_completion", "input": "rule insect_vermin_protection:\n    where:\n        component.type IN [\"storage_tank\", \"piping_system\"]\n    # Complete this rule", "output": "rule insect_vermin_protection:\n    where:\n        component.type IN [\"storage_tank\", \"piping_system\"]\n        component.part_of == \"nonpotable_system\"\n        must:\n        protection.prevents_insect_entry == true\n        protection.prevents_vermin_entry == true\n        screen.material.compatible_with_system == true\n        screen.does_not_accelerate_corrosion == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.7\"\n    must:\n        protection.prevents_insect_entry == true\n        protection.prevents_vermin_entry == true\n        screen.material.compatible_with_system == true\n        screen.does_not_accelerate_corrosion == false\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.7\"", "rule_name": "insect_vermin_protection"}
{"type": "safety_factor_reasoning", "input": "For insect_vermin_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.7.", "rule_name": "insect_vermin_protection", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for freeze protection: When location.sustained_freezing_temperatures == true and system.type == \"nonpotable_water\", it is required that storage_tanks.freeze_protected == true and piping.freeze_protected == true", "output": "rule freeze_protection:\n    where:\n        location.sustained_freezing_temperatures == true\n        system.type == \"nonpotable_water\"\n        must:\n        storage_tanks.freeze_protected == true\n        piping.freeze_protected == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.8\"\n    must:\n        storage_tanks.freeze_protected == true\n        piping.freeze_protected == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.8\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.13.1301.8\"", "rule_name": "freeze_protection"}
{"type": "bcl_to_physics", "input": "rule freeze_protection with conditions: storage_tanks.freeze_protected == true, piping.freeze_protected == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.13.1301.8", "rule_name": "freeze_protection"}
{"type": "bcl_completion", "input": "rule freeze_protection:\n    where:\n        location.sustained_freezing_temperatures == true\n    # Complete this rule", "output": "rule freeze_protection:\n    where:\n        location.sustained_freezing_temperatures == true\n        system.type == \"nonpotable_water\"\n        must:\n        storage_tanks.freeze_protected == true\n        piping.freeze_protected == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.8\"\n    must:\n        storage_tanks.freeze_protected == true\n        piping.freeze_protected == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.8\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.13.1301.8\"", "rule_name": "freeze_protection"}
{"type": "safety_factor_reasoning", "input": "For freeze_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.13.1301.8.", "rule_name": "freeze_protection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for tank sunlight protection: When tank.type == \"nonpotable_water_storage\" and tank.location == \"above_grade\", it is required that protection.method IN [ and \"opaque_uv_resistant_construction\",", "output": "rule tank_sunlight_protection:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        tank.location == \"above_grade\"\n        must:\n        protection.method IN [\n        \"opaque_uv_resistant_construction\",\n        \"sun_barrier\",\n        \"indoor_installation\"\n        ]\n        if protection.method == \"opaque_uv_resistant_construction\":\n        tank.material IN [\"tinted_plastic\", \"fiberglass\", \"lined_metal\", \"concrete\", \"wood\", \"painted_surface\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    must:\n        protection.method IN [\n        \"opaque_uv_resistant_construction\",\n        \"sun_barrier\",\n        \"indoor_installation\"\n        ]\n        if protection.method == \"opaque_uv_resistant_construction\":\n        tank.material IN [\"tinted_plastic\", \"fiberglass\", \"lined_metal\", \"concrete\", \"wood\", \"painted_surface\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.13.1301.9.1\"", "rule_name": "tank_sunlight_protection"}
{"type": "bcl_to_physics", "input": "rule tank_sunlight_protection with conditions: protection.method IN [, \"opaque_uv_resistant_construction\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.9.1", "rule_name": "tank_sunlight_protection"}
{"type": "bcl_completion", "input": "rule tank_sunlight_protection:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_sunlight_protection:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        tank.location == \"above_grade\"\n        must:\n        protection.method IN [\n        \"opaque_uv_resistant_construction\",\n        \"sun_barrier\",\n        \"indoor_installation\"\n        ]\n        if protection.method == \"opaque_uv_resistant_construction\":\n        tank.material IN [\"tinted_plastic\", \"fiberglass\", \"lined_metal\", \"concrete\", \"wood\", \"painted_surface\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    must:\n        protection.method IN [\n        \"opaque_uv_resistant_construction\",\n        \"sun_barrier\",\n        \"indoor_installation\"\n        ]\n        if protection.method == \"opaque_uv_resistant_construction\":\n        tank.material IN [\"tinted_plastic\", \"fiberglass\", \"lined_metal\", \"concrete\", \"wood\", \"painted_surface\"]\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.13.1301.9.1\"", "rule_name": "tank_sunlight_protection"}
{"type": "safety_factor_reasoning", "input": "For tank_sunlight_protection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.9.1.", "rule_name": "tank_sunlight_protection", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for tank contamination prevention: When tank.type == \"nonpotable_water_storage\" and must:, it is required that tank.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"] and manholes.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]", "output": "rule tank_contamination_prevention:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        tank.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        manholes.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    must:\n        tank.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        manholes.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.13.1301.9.1\"", "rule_name": "tank_contamination_prevention"}
{"type": "bcl_to_physics", "input": "rule tank_contamination_prevention with conditions: tank.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"], manholes.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.9.1", "rule_name": "tank_contamination_prevention"}
{"type": "bcl_completion", "input": "rule tank_contamination_prevention:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_contamination_prevention:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        tank.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        manholes.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    must:\n        tank.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        manholes.not_located_under IN [\"soil_piping\", \"waste_piping\", \"contamination_source\"]\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.13.1301.9.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.13.1301.9.1\"", "rule_name": "tank_contamination_prevention"}
{"type": "safety_factor_reasoning", "input": "For tank_contamination_prevention rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.13.1301.9.1.", "rule_name": "tank_contamination_prevention", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for tank material requirements: When tank.type == \"nonpotable_water_storage\" and water.collected_on_site == true, it is required that tank.material.durable == true and tank.material.nonabsorbent == true", "output": "rule tank_material_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        water.collected_on_site == true\n        must:\n        tank.material.durable == true\n        tank.material.nonabsorbent == true\n        tank.material.corrosion_resistant == true\n        tank.material.compatible_with_disinfection == true\n        if tank.material == \"wood\" AND makeup_water.provided == false:\n        tank.flexible_liner.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.2\"\n    must:\n        tank.material.durable == true\n        tank.material.nonabsorbent == true\n        tank.material.corrosion_resistant == true\n        tank.material.compatible_with_disinfection == true\n        if tank.material == \"wood\" AND makeup_water.provided == false:\n        tank.flexible_liner.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.2\"", "rule_name": "tank_material_requirements"}
{"type": "bcl_to_physics", "input": "rule tank_material_requirements with conditions: tank.material.durable == true, tank.material.nonabsorbent == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.9.2", "rule_name": "tank_material_requirements"}
{"type": "bcl_completion", "input": "rule tank_material_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_material_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        water.collected_on_site == true\n        must:\n        tank.material.durable == true\n        tank.material.nonabsorbent == true\n        tank.material.corrosion_resistant == true\n        tank.material.compatible_with_disinfection == true\n        if tank.material == \"wood\" AND makeup_water.provided == false:\n        tank.flexible_liner.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.2\"\n    must:\n        tank.material.durable == true\n        tank.material.nonabsorbent == true\n        tank.material.corrosion_resistant == true\n        tank.material.compatible_with_disinfection == true\n        if tank.material == \"wood\" AND makeup_water.provided == false:\n        tank.flexible_liner.required == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.2\"", "rule_name": "tank_material_requirements"}
{"type": "safety_factor_reasoning", "input": "For tank_material_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.9.2.", "rule_name": "tank_material_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for tank structural support: When tank.type == \"nonpotable_water_storage\" and must:, it is required that foundation.firm == true and foundation.capacity >= tank.weight_when_full", "output": "rule tank_structural_support:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        foundation.firm == true\n        foundation.capacity >= tank.weight_when_full\n        foundation.complies_with_building_code == true\n        if tank.location == \"underground\" AND soil.can_become_saturated == true:\n        ballast_weight + tank_weight >= buoyancy_force\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.9.3\"\n    must:\n        foundation.firm == true\n        foundation.capacity >= tank.weight_when_full\n        foundation.complies_with_building_code == true\n        if tank.location == \"underground\" AND soil.can_become_saturated == true:\n        ballast_weight + tank_weight >= buoyancy_force\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.9.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.13.1301.9.3\"", "rule_name": "tank_structural_support"}
{"type": "bcl_to_physics", "input": "rule tank_structural_support with conditions: foundation.firm == true, foundation.capacity >= tank.weight_when_full", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.9.3", "rule_name": "tank_structural_support"}
{"type": "bcl_completion", "input": "rule tank_structural_support:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_structural_support:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        foundation.firm == true\n        foundation.capacity >= tank.weight_when_full\n        foundation.complies_with_building_code == true\n        if tank.location == \"underground\" AND soil.can_become_saturated == true:\n        ballast_weight + tank_weight >= buoyancy_force\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.9.3\"\n    must:\n        foundation.firm == true\n        foundation.capacity >= tank.weight_when_full\n        foundation.complies_with_building_code == true\n        if tank.location == \"underground\" AND soil.can_become_saturated == true:\n        ballast_weight + tank_weight >= buoyancy_force\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.13.1301.9.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.13.1301.9.3\"", "rule_name": "tank_structural_support"}
{"type": "safety_factor_reasoning", "input": "For tank_structural_support rule involving structural integrity, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.13.1301.9.3.", "rule_name": "tank_structural_support", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for tank overflow requirements: When tank.type == \"nonpotable_water_storage\" and must:, it is required that overflow_pipe.installed == true and overflow_pipe.diameter >= lookup_table_606_5_4(tank.size)", "output": "rule tank_overflow_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        overflow_pipe.installed == true\n        overflow_pipe.diameter >= lookup_table_606_5_4(tank.size)\n        overflow_pipe.protected_from_insects == true\n        overflow_pipe.discharge_distance > foundation_damage_distance\n        overflow_pipe.no_shutoff_valve == true\n        overflow_pipe.cleanout_provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.5\"\n    must:\n        overflow_pipe.installed == true\n        overflow_pipe.diameter >= lookup_table_606_5_4(tank.size)\n        overflow_pipe.protected_from_insects == true\n        overflow_pipe.discharge_distance > foundation_damage_distance\n        overflow_pipe.no_shutoff_valve == true\n        overflow_pipe.cleanout_provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.5\"", "rule_name": "tank_overflow_requirements"}
{"type": "bcl_to_physics", "input": "rule tank_overflow_requirements with conditions: overflow_pipe.installed == true, overflow_pipe.diameter >= lookup_table_606_5_4(tank.size)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.13.1301.9.5", "rule_name": "tank_overflow_requirements"}
{"type": "bcl_completion", "input": "rule tank_overflow_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_overflow_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        overflow_pipe.installed == true\n        overflow_pipe.diameter >= lookup_table_606_5_4(tank.size)\n        overflow_pipe.protected_from_insects == true\n        overflow_pipe.discharge_distance > foundation_damage_distance\n        overflow_pipe.no_shutoff_valve == true\n        overflow_pipe.cleanout_provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.5\"\n    must:\n        overflow_pipe.installed == true\n        overflow_pipe.diameter >= lookup_table_606_5_4(tank.size)\n        overflow_pipe.protected_from_insects == true\n        overflow_pipe.discharge_distance > foundation_damage_distance\n        overflow_pipe.no_shutoff_valve == true\n        overflow_pipe.cleanout_provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.5\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.5\"", "rule_name": "tank_overflow_requirements"}
{"type": "safety_factor_reasoning", "input": "For tank_overflow_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.9.5.", "rule_name": "tank_overflow_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for tank access requirements: When tank.type == \"nonpotable_water_storage\" and must:, it is required that access_openings.count >= 1 and access_opening.allows_inspection == true", "output": "rule tank_access_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        access_openings.count >= 1\n        access_opening.allows_inspection == true\n        access_opening.allows_cleaning == true\n        access_opening.has_locking_device == true\n        if tank.location == \"below_grade_outside\":\n        manhole.size >= 24.inches OR manhole.diameter >= 24.inches\n        manhole.height >= ground_level + 4.inches\n        finished_grade.slopes_away_from_manhole == true\n        service_port.diameter >= 8.inches\n        service_port.height >= finished_grade + 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.6\"\n    must:\n        access_openings.count >= 1\n        access_opening.allows_inspection == true\n        access_opening.allows_cleaning == true\n        access_opening.has_locking_device == true\n        if tank.location == \"below_grade_outside\":\n        manhole.size >= 24.inches OR manhole.diameter >= 24.inches\n        manhole.height >= ground_level + 4.inches\n        finished_grade.slopes_away_from_manhole == true\n        service_port.diameter >= 8.inches\n        service_port.height >= finished_grade + 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.6\"", "rule_name": "tank_access_requirements"}
{"type": "bcl_to_physics", "input": "rule tank_access_requirements with constraints: size, diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.9.6", "rule_name": "tank_access_requirements"}
{"type": "bcl_completion", "input": "rule tank_access_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_access_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        access_openings.count >= 1\n        access_opening.allows_inspection == true\n        access_opening.allows_cleaning == true\n        access_opening.has_locking_device == true\n        if tank.location == \"below_grade_outside\":\n        manhole.size >= 24.inches OR manhole.diameter >= 24.inches\n        manhole.height >= ground_level + 4.inches\n        finished_grade.slopes_away_from_manhole == true\n        service_port.diameter >= 8.inches\n        service_port.height >= finished_grade + 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.6\"\n    must:\n        access_openings.count >= 1\n        access_opening.allows_inspection == true\n        access_opening.allows_cleaning == true\n        access_opening.has_locking_device == true\n        if tank.location == \"below_grade_outside\":\n        manhole.size >= 24.inches OR manhole.diameter >= 24.inches\n        manhole.height >= ground_level + 4.inches\n        finished_grade.slopes_away_from_manhole == true\n        service_port.diameter >= 8.inches\n        service_port.height >= finished_grade + 4.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.6\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.6\"", "rule_name": "tank_access_requirements"}
{"type": "safety_factor_reasoning", "input": "For tank_access_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.9.6.", "rule_name": "tank_access_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for tank venting: When tank.type == \"nonpotable_water_storage\" and must:, it is required that vent.sized_per_chapter_9 == true and vent.size_based_on_influent_pipes == true", "output": "rule tank_venting:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        vent.sized_per_chapter_9 == true\n        vent.size_based_on_influent_pipes == true\n        vent.not_connected_to_sanitary_vents == true\n        vent.protected_by IN [\"approved_cap\", \"u_bend_downward\"]\n        vent.outlet_height >= grade + 4.inches\n        vent.protected_from_vermin == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.7\"\n    must:\n        vent.sized_per_chapter_9 == true\n        vent.size_based_on_influent_pipes == true\n        vent.not_connected_to_sanitary_vents == true\n        vent.protected_by IN [\"approved_cap\", \"u_bend_downward\"]\n        vent.outlet_height >= grade + 4.inches\n        vent.protected_from_vermin == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.7\"", "rule_name": "tank_venting"}
{"type": "bcl_to_physics", "input": "rule tank_venting with conditions: vent.sized_per_chapter_9 == true, vent.size_based_on_influent_pipes == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.13.1301.9.7", "rule_name": "tank_venting"}
{"type": "bcl_completion", "input": "rule tank_venting:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_venting:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        vent.sized_per_chapter_9 == true\n        vent.size_based_on_influent_pipes == true\n        vent.not_connected_to_sanitary_vents == true\n        vent.protected_by IN [\"approved_cap\", \"u_bend_downward\"]\n        vent.outlet_height >= grade + 4.inches\n        vent.protected_from_vermin == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.7\"\n    must:\n        vent.sized_per_chapter_9 == true\n        vent.size_based_on_influent_pipes == true\n        vent.not_connected_to_sanitary_vents == true\n        vent.protected_by IN [\"approved_cap\", \"u_bend_downward\"]\n        vent.outlet_height >= grade + 4.inches\n        vent.protected_from_vermin == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.13.1301.9.7\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.13.1301.9.7\"", "rule_name": "tank_venting"}
{"type": "safety_factor_reasoning", "input": "For tank_venting rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.9.7.", "rule_name": "tank_venting", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for tank drain requirements: When tank.type == \"nonpotable_water_storage\" and must:, it is required that drain.method IN [\"pump\", \"gravity_drain_at_lowest_point\"] and drain.allows_complete_emptying == true", "output": "rule tank_drain_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        drain.method IN [\"pump\", \"gravity_drain_at_lowest_point\"]\n        drain.allows_complete_emptying == true\n        drain.for_service_and_cleaning == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.8\"\n        constraint disinfection_contact_time:\n        where:\n        disinfection.required == true\n        must:\n        contact_time >= required_ct_value / disinfectant_concentration\n        contact_time *= temperature_correction_factor(water_temperature)\n        safety_factor: 1.3\n        constraint filter_flow_capacity:\n        where:\n        filter.installed == true\n        must:\n        filter_area >= flow_rate / (filter_flux_rate * filter_efficiency)\n        pressure_drop_across_filter <= maximum_allowable_pressure_drop\n        safety_factor: 1.2\n        constraint underground_tank_buoyancy:\n        where:\n        tank.location == \"underground\"\n        must:\n        buoyancy_force = water_density * gravity * tank_volume\n        restraint_force = (tank_weight + ballast_weight + soil_friction) * safety_factor\n        restraint_force >= buoyancy_force\n        safety_factor: 1.5\n        constraint tank_structural_integrity:\n        where:\n        tank.location == \"below_grade\"\n        must:\n        lateral_earth_pressure = soil_density * gravity * depth * earth_pressure_coefficient\n        tank_wall_stress = lateral_earth_pressure * tank_radius / wall_thickness\n        tank_wall_stress <= material_allowable_stress\n        if surface_loads.present == true:\n        total_stress = tank_wall_stress + surface_load_stress\n        total_stress <= material_allowable_stress\n        safety_factor: 2.0\n        constraint overflow_capacity:\n        where:\n        overflow_pipe.installed == true\n        must:\n        overflow_capacity = flow.volume_flow_rate(\n        overflow_pipe.area,\n        sqrt(2 * gravity * overflow_head)\n        )\n        overflow_capacity >= maximum_inflow_rate * 1.25\n        safety_factor: 1.25\n        constraint tank_vent_sizing:\n        where:\n        tank.requires_venting == true\n        must:\n        vent_area >= tank_fill_rate / allowable_vent_velocity\n        vent_capacity >= tank_drain_rate * air_volume_ratio\n    must:\n        drain.method IN [\"pump\", \"gravity_drain_at_lowest_point\"]\n        drain.allows_complete_emptying == true\n        drain.for_service_and_cleaning == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.8\"\n        constraint disinfection_contact_time:\n        where:\n        disinfection.required == true\n        must:\n        contact_time >= required_ct_value / disinfectant_concentration\n        contact_time *= temperature_correction_factor(water_temperature)\n        safety_factor: 1.3\n        constraint filter_flow_capacity:\n        where:\n        filter.installed == true\n        must:\n        filter_area >= flow_rate / (filter_flux_rate * filter_efficiency)\n        pressure_drop_across_filter <= maximum_allowable_pressure_drop\n        safety_factor: 1.2\n        constraint underground_tank_buoyancy:\n        where:\n        tank.location == \"underground\"\n        must:\n        buoyancy_force = water_density * gravity * tank_volume\n        restraint_force = (tank_weight + ballast_weight + soil_friction) * safety_factor\n        restraint_force >= buoyancy_force\n        safety_factor: 1.5\n        constraint tank_structural_integrity:\n        where:\n        tank.location == \"below_grade\"\n        must:\n        lateral_earth_pressure = soil_density * gravity * depth * earth_pressure_coefficient\n        tank_wall_stress = lateral_earth_pressure * tank_radius / wall_thickness\n        tank_wall_stress <= material_allowable_stress\n        if surface_loads.present == true:\n        total_stress = tank_wall_stress + surface_load_stress\n        total_stress <= material_allowable_stress\n        safety_factor: 2.0\n        constraint overflow_capacity:\n        where:\n        overflow_pipe.installed == true\n        must:\n        overflow_capacity = flow.volume_flow_rate(\n        overflow_pipe.area,\n        sqrt(2 * gravity * overflow_head)\n        )\n        overflow_capacity >= maximum_inflow_rate * 1.25\n        safety_factor: 1.25\n        constraint tank_vent_sizing:\n        where:\n        tank.requires_venting == true\n        must:\n        vent_area >= tank_fill_rate / allowable_vent_velocity\n        vent_capacity >= tank_drain_rate * air_volume_ratio\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.13.1301.9.8\"", "rule_name": "tank_drain_requirements"}
{"type": "bcl_to_physics", "input": "rule tank_drain_requirements with conditions: drain.method IN [\"pump\", \"gravity_drain_at_lowest_point\"], drain.allows_complete_emptying == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.13.1301.9.8", "rule_name": "tank_drain_requirements"}
{"type": "bcl_completion", "input": "rule tank_drain_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n    # Complete this rule", "output": "rule tank_drain_requirements:\n    where:\n        tank.type == \"nonpotable_water_storage\"\n        must:\n        drain.method IN [\"pump\", \"gravity_drain_at_lowest_point\"]\n        drain.allows_complete_emptying == true\n        drain.for_service_and_cleaning == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.8\"\n        constraint disinfection_contact_time:\n        where:\n        disinfection.required == true\n        must:\n        contact_time >= required_ct_value / disinfectant_concentration\n        contact_time *= temperature_correction_factor(water_temperature)\n        safety_factor: 1.3\n        constraint filter_flow_capacity:\n        where:\n        filter.installed == true\n        must:\n        filter_area >= flow_rate / (filter_flux_rate * filter_efficiency)\n        pressure_drop_across_filter <= maximum_allowable_pressure_drop\n        safety_factor: 1.2\n        constraint underground_tank_buoyancy:\n        where:\n        tank.location == \"underground\"\n        must:\n        buoyancy_force = water_density * gravity * tank_volume\n        restraint_force = (tank_weight + ballast_weight + soil_friction) * safety_factor\n        restraint_force >= buoyancy_force\n        safety_factor: 1.5\n        constraint tank_structural_integrity:\n        where:\n        tank.location == \"below_grade\"\n        must:\n        lateral_earth_pressure = soil_density * gravity * depth * earth_pressure_coefficient\n        tank_wall_stress = lateral_earth_pressure * tank_radius / wall_thickness\n        tank_wall_stress <= material_allowable_stress\n        if surface_loads.present == true:\n        total_stress = tank_wall_stress + surface_load_stress\n        total_stress <= material_allowable_stress\n        safety_factor: 2.0\n        constraint overflow_capacity:\n        where:\n        overflow_pipe.installed == true\n        must:\n        overflow_capacity = flow.volume_flow_rate(\n        overflow_pipe.area,\n        sqrt(2 * gravity * overflow_head)\n        )\n        overflow_capacity >= maximum_inflow_rate * 1.25\n        safety_factor: 1.25\n        constraint tank_vent_sizing:\n        where:\n        tank.requires_venting == true\n        must:\n        vent_area >= tank_fill_rate / allowable_vent_velocity\n        vent_capacity >= tank_drain_rate * air_volume_ratio\n    must:\n        drain.method IN [\"pump\", \"gravity_drain_at_lowest_point\"]\n        drain.allows_complete_emptying == true\n        drain.for_service_and_cleaning == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.13.1301.9.8\"\n        constraint disinfection_contact_time:\n        where:\n        disinfection.required == true\n        must:\n        contact_time >= required_ct_value / disinfectant_concentration\n        contact_time *= temperature_correction_factor(water_temperature)\n        safety_factor: 1.3\n        constraint filter_flow_capacity:\n        where:\n        filter.installed == true\n        must:\n        filter_area >= flow_rate / (filter_flux_rate * filter_efficiency)\n        pressure_drop_across_filter <= maximum_allowable_pressure_drop\n        safety_factor: 1.2\n        constraint underground_tank_buoyancy:\n        where:\n        tank.location == \"underground\"\n        must:\n        buoyancy_force = water_density * gravity * tank_volume\n        restraint_force = (tank_weight + ballast_weight + soil_friction) * safety_factor\n        restraint_force >= buoyancy_force\n        safety_factor: 1.5\n        constraint tank_structural_integrity:\n        where:\n        tank.location == \"below_grade\"\n        must:\n        lateral_earth_pressure = soil_density * gravity * depth * earth_pressure_coefficient\n        tank_wall_stress = lateral_earth_pressure * tank_radius / wall_thickness\n        tank_wall_stress <= material_allowable_stress\n        if surface_loads.present == true:\n        total_stress = tank_wall_stress + surface_load_stress\n        total_stress <= material_allowable_stress\n        safety_factor: 2.0\n        constraint overflow_capacity:\n        where:\n        overflow_pipe.installed == true\n        must:\n        overflow_capacity = flow.volume_flow_rate(\n        overflow_pipe.area,\n        sqrt(2 * gravity * overflow_head)\n        )\n        overflow_capacity >= maximum_inflow_rate * 1.25\n        safety_factor: 1.25\n        constraint tank_vent_sizing:\n        where:\n        tank.requires_venting == true\n        must:\n        vent_area >= tank_fill_rate / allowable_vent_velocity\n        vent_capacity >= tank_drain_rate * air_volume_ratio\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.13.1301.9.8\"", "rule_name": "tank_drain_requirements"}
{"type": "safety_factor_reasoning", "input": "For tank_drain_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.13.1301.9.8.", "rule_name": "tank_drain_requirements", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for food handling indirect waste: When equipment.type IN [\"food_handling\", \"dishwashing\", \"utensil_washing\"] and location.type != \"dwelling_unit\", it is required that waste_connection.type == \"indirect\" and air_gap.vertical_distance >= pipe.diameter * 2", "output": "rule food_handling_indirect_waste:\n    where:\n        equipment.type IN [\"food_handling\", \"dishwashing\", \"utensil_washing\"]\n        location.type != \"dwelling_unit\"\n        must:\n        waste_connection.type == \"indirect\"\n        air_gap.vertical_distance >= pipe.diameter * 2\n        air_gap.vertical_distance >= 1.inch\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1\"\n    must:\n        waste_connection.type == \"indirect\"\n        air_gap.vertical_distance >= pipe.diameter * 2\n        air_gap.vertical_distance >= 1.inch\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.802.1\"", "rule_name": "food_handling_indirect_waste"}
{"type": "bcl_to_physics", "input": "rule food_handling_indirect_waste with constraints: vertical_distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1", "rule_name": "food_handling_indirect_waste"}
{"type": "bcl_completion", "input": "rule food_handling_indirect_waste:\n    where:\n        equipment.type IN [\"food_handling\", \"dishwashing\", \"utensil_washing\"]\n    # Complete this rule", "output": "rule food_handling_indirect_waste:\n    where:\n        equipment.type IN [\"food_handling\", \"dishwashing\", \"utensil_washing\"]\n        location.type != \"dwelling_unit\"\n        must:\n        waste_connection.type == \"indirect\"\n        air_gap.vertical_distance >= pipe.diameter * 2\n        air_gap.vertical_distance >= 1.inch\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1\"\n    must:\n        waste_connection.type == \"indirect\"\n        air_gap.vertical_distance >= pipe.diameter * 2\n        air_gap.vertical_distance >= 1.inch\n        air_gap.unobstructed == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.802.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.802.1\"", "rule_name": "food_handling_indirect_waste"}
{"type": "safety_factor_reasoning", "input": "For food_handling_indirect_waste rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.8.802.1.", "rule_name": "food_handling_indirect_waste", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for clear water waste indirect: When waste.type == \"clear_water\" and waste.source IN [\"humidifier\", \"cooling_coil\", \"condensate\"], it is required that discharge.type == \"indirect\" and receptor.type IN [\"floor_drain\", \"indirect_waste_receptor\"]", "output": "rule clear_water_waste_indirect:\n    where:\n        waste.type == \"clear_water\"\n        waste.source IN [\"humidifier\", \"cooling_coil\", \"condensate\"]\n        must:\n        discharge.type == \"indirect\"\n        receptor.type IN [\"floor_drain\", \"indirect_waste_receptor\"]\n        air_gap.height >= 1.inch\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1\"\n    must:\n        discharge.type == \"indirect\"\n        receptor.type IN [\"floor_drain\", \"indirect_waste_receptor\"]\n        air_gap.height >= 1.inch\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1\"", "rule_name": "clear_water_waste_indirect"}
{"type": "bcl_to_physics", "input": "rule clear_water_waste_indirect with constraints: height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.1", "rule_name": "clear_water_waste_indirect"}
{"type": "bcl_completion", "input": "rule clear_water_waste_indirect:\n    where:\n        waste.type == \"clear_water\"\n    # Complete this rule", "output": "rule clear_water_waste_indirect:\n    where:\n        waste.type == \"clear_water\"\n        waste.source IN [\"humidifier\", \"cooling_coil\", \"condensate\"]\n        must:\n        discharge.type == \"indirect\"\n        receptor.type IN [\"floor_drain\", \"indirect_waste_receptor\"]\n        air_gap.height >= 1.inch\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1\"\n    must:\n        discharge.type == \"indirect\"\n        receptor.type IN [\"floor_drain\", \"indirect_waste_receptor\"]\n        air_gap.height >= 1.inch\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.8.802.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.8.802.1\"", "rule_name": "clear_water_waste_indirect"}
{"type": "safety_factor_reasoning", "input": "For clear_water_waste_indirect rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.1.", "rule_name": "clear_water_waste_indirect", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for indirect waste pipe termination: When pipe.type == \"indirect_waste\" and must:, it is required that pipe.terminus.height > receptor.flood_level_rim + air_gap.required_height and air_gap.minimum >= 2 * pipe.diameter", "output": "rule indirect_waste_pipe_termination:\n    where:\n        pipe.type == \"indirect_waste\"\n        must:\n        pipe.terminus.height > receptor.flood_level_rim + air_gap.required_height\n        air_gap.minimum >= 2 * pipe.diameter\n        air_gap.minimum >= 1.inch\n        pipe.connection_to_receptor == \"none\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.2\"\n    must:\n        pipe.terminus.height > receptor.flood_level_rim + air_gap.required_height\n        air_gap.minimum >= 2 * pipe.diameter\n        air_gap.minimum >= 1.inch\n        pipe.connection_to_receptor == \"none\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.2\"", "rule_name": "indirect_waste_pipe_termination"}
{"type": "bcl_to_physics", "input": "rule indirect_waste_pipe_termination with constraints: minimum", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.8.802.2", "rule_name": "indirect_waste_pipe_termination"}
{"type": "bcl_completion", "input": "rule indirect_waste_pipe_termination:\n    where:\n        pipe.type == \"indirect_waste\"\n    # Complete this rule", "output": "rule indirect_waste_pipe_termination:\n    where:\n        pipe.type == \"indirect_waste\"\n        must:\n        pipe.terminus.height > receptor.flood_level_rim + air_gap.required_height\n        air_gap.minimum >= 2 * pipe.diameter\n        air_gap.minimum >= 1.inch\n        pipe.connection_to_receptor == \"none\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.2\"\n    must:\n        pipe.terminus.height > receptor.flood_level_rim + air_gap.required_height\n        air_gap.minimum >= 2 * pipe.diameter\n        air_gap.minimum >= 1.inch\n        pipe.connection_to_receptor == \"none\"\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.802.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.802.2\"", "rule_name": "indirect_waste_pipe_termination"}
{"type": "safety_factor_reasoning", "input": "For indirect_waste_pipe_termination rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.8.802.2.", "rule_name": "indirect_waste_pipe_termination", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for waste receptor sizing: When fixture.discharge_type == \"indirect\" and receptor.type == \"floor_sink\", it is required that receptor.capacity >= discharge.flow_rate * 1.5 and receptor.rim_height >= discharge.terminus - air_gap.required", "output": "rule waste_receptor_sizing:\n    where:\n        fixture.discharge_type == \"indirect\"\n        receptor.type == \"floor_sink\"\n        must:\n        receptor.capacity >= discharge.flow_rate * 1.5\n        receptor.rim_height >= discharge.terminus - air_gap.required\n        receptor.strainer.open_area >= receptor.outlet.area * 0.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.3\"\n    must:\n        receptor.capacity >= discharge.flow_rate * 1.5\n        receptor.rim_height >= discharge.terminus - air_gap.required\n        receptor.strainer.open_area >= receptor.outlet.area * 0.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.3\"\n    safety_factor: 1.25\n    reference: \"FL.Code.2024.8.802.3\"", "rule_name": "waste_receptor_sizing"}
{"type": "bcl_to_physics", "input": "rule waste_receptor_sizing with conditions: receptor.capacity >= discharge.flow_rate * 1.5, receptor.rim_height >= discharge.terminus - air_gap.required", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.25 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.8.802.3", "rule_name": "waste_receptor_sizing"}
{"type": "bcl_completion", "input": "rule waste_receptor_sizing:\n    where:\n        fixture.discharge_type == \"indirect\"\n    # Complete this rule", "output": "rule waste_receptor_sizing:\n    where:\n        fixture.discharge_type == \"indirect\"\n        receptor.type == \"floor_sink\"\n        must:\n        receptor.capacity >= discharge.flow_rate * 1.5\n        receptor.rim_height >= discharge.terminus - air_gap.required\n        receptor.strainer.open_area >= receptor.outlet.area * 0.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.3\"\n    must:\n        receptor.capacity >= discharge.flow_rate * 1.5\n        receptor.rim_height >= discharge.terminus - air_gap.required\n        receptor.strainer.open_area >= receptor.outlet.area * 0.5\n        safety_factor: 1.25\n        reference: \"FL.Code.2024.8.802.3\"\n    safety_factor: 1.25\n    reference: \"FL.Code.2024.8.802.3\"", "rule_name": "waste_receptor_sizing"}
{"type": "safety_factor_reasoning", "input": "For waste_receptor_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.25 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.802.3.", "rule_name": "waste_receptor_sizing", "safety_factor": 1.25}
{"type": "legal_to_bcl", "input": "Requirement for corrosive waste neutralization: When waste.pH < 6.5 OR waste.pH > 9.0 and waste.discharge_to == \"building_drainage\", it is required that neutralizer.present == true and neutralizer.effluent.pH >= 6.5", "output": "rule corrosive_waste_neutralization:\n    where:\n        waste.pH < 6.5 OR waste.pH > 9.0\n        waste.discharge_to == \"building_drainage\"\n        must:\n        neutralizer.present == true\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.sampling_port.present == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.803.1\"\n    must:\n        neutralizer.present == true\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.sampling_port.present == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.803.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.8.803.1\"", "rule_name": "corrosive_waste_neutralization"}
{"type": "bcl_to_physics", "input": "rule corrosive_waste_neutralization with constraints: pH, pH", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.8.803.1", "rule_name": "corrosive_waste_neutralization"}
{"type": "bcl_completion", "input": "rule corrosive_waste_neutralization:\n    where:\n        waste.pH < 6.5 OR waste.pH > 9.0\n    # Complete this rule", "output": "rule corrosive_waste_neutralization:\n    where:\n        waste.pH < 6.5 OR waste.pH > 9.0\n        waste.discharge_to == \"building_drainage\"\n        must:\n        neutralizer.present == true\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.sampling_port.present == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.803.1\"\n    must:\n        neutralizer.present == true\n        neutralizer.effluent.pH >= 6.5\n        neutralizer.effluent.pH <= 9.0\n        neutralizer.sampling_port.present == true\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.8.803.1\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.8.803.1\"", "rule_name": "corrosive_waste_neutralization"}
{"type": "safety_factor_reasoning", "input": "For corrosive_waste_neutralization rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.8.803.1.", "rule_name": "corrosive_waste_neutralization", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for grease interceptor requirements: When establishment.type == \"food_service\" and fixtures.grease_producing > 0, it is required that interceptor.type == \"grease\" and interceptor.capacity >= flow.grease_laden * retention_time", "output": "rule grease_interceptor_requirements:\n    where:\n        establishment.type == \"food_service\"\n        fixtures.grease_producing > 0\n        must:\n        interceptor.type == \"grease\"\n        interceptor.capacity >= flow.grease_laden * retention_time\n        retention_time >= 2.5.minutes\n        interceptor.baffles >= 2\n        interceptor.access.size >= 20.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.803.2\"\n    must:\n        interceptor.type == \"grease\"\n        interceptor.capacity >= flow.grease_laden * retention_time\n        retention_time >= 2.5.minutes\n        interceptor.baffles >= 2\n        interceptor.access.size >= 20.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.803.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.803.2\"", "rule_name": "grease_interceptor_requirements"}
{"type": "bcl_to_physics", "input": "rule grease_interceptor_requirements with constraints: retention_time, size", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.8.803.2", "rule_name": "grease_interceptor_requirements"}
{"type": "bcl_completion", "input": "rule grease_interceptor_requirements:\n    where:\n        establishment.type == \"food_service\"\n    # Complete this rule", "output": "rule grease_interceptor_requirements:\n    where:\n        establishment.type == \"food_service\"\n        fixtures.grease_producing > 0\n        must:\n        interceptor.type == \"grease\"\n        interceptor.capacity >= flow.grease_laden * retention_time\n        retention_time >= 2.5.minutes\n        interceptor.baffles >= 2\n        interceptor.access.size >= 20.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.803.2\"\n    must:\n        interceptor.type == \"grease\"\n        interceptor.capacity >= flow.grease_laden * retention_time\n        retention_time >= 2.5.minutes\n        interceptor.baffles >= 2\n        interceptor.access.size >= 20.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.8.803.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.8.803.2\"", "rule_name": "grease_interceptor_requirements"}
{"type": "safety_factor_reasoning", "input": "For grease_interceptor_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.8.803.2.", "rule_name": "grease_interceptor_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for special waste pipe materials: When waste.type IN [\"corrosive\", \"high_temperature\", \"chemical\"] and must:, it is required that pipe.material.chemical_resistance >= waste.corrosivity_index and pipe.material.temperature_rating >= waste.temperature * 1.25", "output": "rule special_waste_pipe_materials:\n    where:\n        waste.type IN [\"corrosive\", \"high_temperature\", \"chemical\"]\n        must:\n        pipe.material.chemical_resistance >= waste.corrosivity_index\n        pipe.material.temperature_rating >= waste.temperature * 1.25\n        joints.type == \"chemical_resistant\"\n        should:\n        pipe.material IN [\"CPVC\", \"polypropylene\", \"borosilicate_glass\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.804.1\"\n    must:\n        pipe.material.chemical_resistance >= waste.corrosivity_index\n        pipe.material.temperature_rating >= waste.temperature * 1.25\n        joints.type == \"chemical_resistant\"\n        should:\n        pipe.material IN [\"CPVC\", \"polypropylene\", \"borosilicate_glass\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.804.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.804.1\"", "rule_name": "special_waste_pipe_materials"}
{"type": "bcl_to_physics", "input": "rule special_waste_pipe_materials with conditions: pipe.material.chemical_resistance >= waste.corrosivity_index, pipe.material.temperature_rating >= waste.temperature * 1.25", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.8.804.1", "rule_name": "special_waste_pipe_materials"}
{"type": "bcl_completion", "input": "rule special_waste_pipe_materials:\n    where:\n        waste.type IN [\"corrosive\", \"high_temperature\", \"chemical\"]\n    # Complete this rule", "output": "rule special_waste_pipe_materials:\n    where:\n        waste.type IN [\"corrosive\", \"high_temperature\", \"chemical\"]\n        must:\n        pipe.material.chemical_resistance >= waste.corrosivity_index\n        pipe.material.temperature_rating >= waste.temperature * 1.25\n        joints.type == \"chemical_resistant\"\n        should:\n        pipe.material IN [\"CPVC\", \"polypropylene\", \"borosilicate_glass\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.804.1\"\n    must:\n        pipe.material.chemical_resistance >= waste.corrosivity_index\n        pipe.material.temperature_rating >= waste.temperature * 1.25\n        joints.type == \"chemical_resistant\"\n        should:\n        pipe.material IN [\"CPVC\", \"polypropylene\", \"borosilicate_glass\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.804.1\"\n    should:\n        pipe.material IN [\"CPVC\", \"polypropylene\", \"borosilicate_glass\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.8.804.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.8.804.1\"", "rule_name": "special_waste_pipe_materials"}
{"type": "safety_factor_reasoning", "input": "For special_waste_pipe_materials rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.8.804.1.", "rule_name": "special_waste_pipe_materials", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for foundation uplift resistance: When element.type == \"foundation\" and element.building.construction_type in [\"light_frame_wood\", \"light_frame_steel\"], it is required that structural.uplift_capacity(element) >= structural.wind_uplift( and element.building.exposure_category,", "output": "rule foundation_uplift_resistance:\n    where:\n        element.type == \"foundation\"\n        element.building.construction_type in [\"light_frame_wood\", \"light_frame_steel\"]\n        must:\n        structural.uplift_capacity(element) >= structural.wind_uplift(\n        element.building.exposure_category,\n        element.building.wind_speed,\n        element.building.roof_angle,\n        element.building.dimensions\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R401.2\"\n    must:\n        structural.uplift_capacity(element) >= structural.wind_uplift(\n        element.building.exposure_category,\n        element.building.wind_speed,\n        element.building.roof_angle,\n        element.building.dimensions\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R401.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R401.2\"", "rule_name": "foundation_uplift_resistance"}
{"type": "bcl_to_physics", "input": "rule foundation_uplift_resistance with constraints: structural.uplift_capacity(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Residential.2023.R401.2", "rule_name": "foundation_uplift_resistance"}
{"type": "bcl_completion", "input": "rule foundation_uplift_resistance:\n    where:\n        element.type == \"foundation\"\n    # Complete this rule", "output": "rule foundation_uplift_resistance:\n    where:\n        element.type == \"foundation\"\n        element.building.construction_type in [\"light_frame_wood\", \"light_frame_steel\"]\n        must:\n        structural.uplift_capacity(element) >= structural.wind_uplift(\n        element.building.exposure_category,\n        element.building.wind_speed,\n        element.building.roof_angle,\n        element.building.dimensions\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R401.2\"\n    must:\n        structural.uplift_capacity(element) >= structural.wind_uplift(\n        element.building.exposure_category,\n        element.building.wind_speed,\n        element.building.roof_angle,\n        element.building.dimensions\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R401.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R401.2\"", "rule_name": "foundation_uplift_resistance"}
{"type": "safety_factor_reasoning", "input": "For foundation_uplift_resistance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.R401.2.", "rule_name": "foundation_uplift_resistance", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for foundation gravity loads: When element.type == \"foundation\" and must:, it is required that structural.bearing_capacity(element) >= structural.total_load( and element.building.dead_load,", "output": "rule foundation_gravity_loads:\n    where:\n        element.type == \"foundation\"\n        must:\n        structural.bearing_capacity(element) >= structural.total_load(\n        element.building.dead_load,\n        element.building.live_load,\n        element.building.roof_load,\n        element.building.snow_load\n        )\n        element.soil_bearing_pressure <= element.soil.allowable_bearing_capacity\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.R401.2\"\n    must:\n        structural.bearing_capacity(element) >= structural.total_load(\n        element.building.dead_load,\n        element.building.live_load,\n        element.building.roof_load,\n        element.building.snow_load\n        )\n        element.soil_bearing_pressure <= element.soil.allowable_bearing_capacity\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.R401.2\"\n    safety_factor: 2.0\n    reference: \"FL.Residential.2023.R401.2\"", "rule_name": "foundation_gravity_loads"}
{"type": "bcl_to_physics", "input": "rule foundation_gravity_loads with constraints: structural.bearing_capacity(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Residential.2023.R401.2", "rule_name": "foundation_gravity_loads"}
{"type": "bcl_completion", "input": "rule foundation_gravity_loads:\n    where:\n        element.type == \"foundation\"\n    # Complete this rule", "output": "rule foundation_gravity_loads:\n    where:\n        element.type == \"foundation\"\n        must:\n        structural.bearing_capacity(element) >= structural.total_load(\n        element.building.dead_load,\n        element.building.live_load,\n        element.building.roof_load,\n        element.building.snow_load\n        )\n        element.soil_bearing_pressure <= element.soil.allowable_bearing_capacity\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.R401.2\"\n    must:\n        structural.bearing_capacity(element) >= structural.total_load(\n        element.building.dead_load,\n        element.building.live_load,\n        element.building.roof_load,\n        element.building.snow_load\n        )\n        element.soil_bearing_pressure <= element.soil.allowable_bearing_capacity\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.R401.2\"\n    safety_factor: 2.0\n    reference: \"FL.Residential.2023.R401.2\"", "rule_name": "foundation_gravity_loads"}
{"type": "safety_factor_reasoning", "input": "For foundation_gravity_loads rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.R401.2.", "rule_name": "foundation_gravity_loads", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for foundation drainage grading: When element.type == \"foundation\" and must:, it is required that slope.calculate( and element.grade_at_foundation,", "output": "rule foundation_drainage_grading:\n    where:\n        element.type == \"foundation\"\n        must:\n        slope.calculate(\n        element.grade_at_foundation,\n        element.grade_at_10_feet\n        ) >= 6.inches / 10.feet\n        reference: \"FL.Residential.2023.R401.3\"\n    must:\n        slope.calculate(\n        element.grade_at_foundation,\n        element.grade_at_10_feet\n        ) >= 6.inches / 10.feet\n        reference: \"FL.Residential.2023.R401.3\"\n    reference: \"FL.Residential.2023.R401.3\"", "rule_name": "foundation_drainage_grading"}
{"type": "bcl_to_physics", "input": "rule foundation_drainage_grading with conditions: slope.calculate(, element.grade_at_foundation,", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R401.3", "rule_name": "foundation_drainage_grading"}
{"type": "bcl_completion", "input": "rule foundation_drainage_grading:\n    where:\n        element.type == \"foundation\"\n    # Complete this rule", "output": "rule foundation_drainage_grading:\n    where:\n        element.type == \"foundation\"\n        must:\n        slope.calculate(\n        element.grade_at_foundation,\n        element.grade_at_10_feet\n        ) >= 6.inches / 10.feet\n        reference: \"FL.Residential.2023.R401.3\"\n    must:\n        slope.calculate(\n        element.grade_at_foundation,\n        element.grade_at_10_feet\n        ) >= 6.inches / 10.feet\n        reference: \"FL.Residential.2023.R401.3\"\n    reference: \"FL.Residential.2023.R401.3\"", "rule_name": "foundation_drainage_grading"}
{"type": "legal_to_bcl", "input": "Requirement for foundation drainage alternative: When element.type == \"foundation\" and element.site.has_physical_barriers == True, it is required that element.has_drainage_swales == True or element.has_foundation_drains == True and if element.has_impervious_surfaces_within_10_feet:", "output": "rule foundation_drainage_alternative:\n    where:\n        element.type == \"foundation\"\n        element.site.has_physical_barriers == True\n        must:\n        element.has_drainage_swales == True or element.has_foundation_drains == True\n        if element.has_impervious_surfaces_within_10_feet:\n        element.impervious_surface_slope >= 0.02  # 2% minimum\n        reference: \"FL.Residential.2023.R401.3\"\n    must:\n        element.has_drainage_swales == True or element.has_foundation_drains == True\n        if element.has_impervious_surfaces_within_10_feet:\n        element.impervious_surface_slope >= 0.02  # 2% minimum\n        reference: \"FL.Residential.2023.R401.3\"\n    reference: \"FL.Residential.2023.R401.3\"", "rule_name": "foundation_drainage_alternative"}
{"type": "bcl_to_physics", "input": "rule foundation_drainage_alternative with constraints: impervious_surface_slope", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R401.3", "rule_name": "foundation_drainage_alternative"}
{"type": "bcl_completion", "input": "rule foundation_drainage_alternative:\n    where:\n        element.type == \"foundation\"\n    # Complete this rule", "output": "rule foundation_drainage_alternative:\n    where:\n        element.type == \"foundation\"\n        element.site.has_physical_barriers == True\n        must:\n        element.has_drainage_swales == True or element.has_foundation_drains == True\n        if element.has_impervious_surfaces_within_10_feet:\n        element.impervious_surface_slope >= 0.02  # 2% minimum\n        reference: \"FL.Residential.2023.R401.3\"\n    must:\n        element.has_drainage_swales == True or element.has_foundation_drains == True\n        if element.has_impervious_surfaces_within_10_feet:\n        element.impervious_surface_slope >= 0.02  # 2% minimum\n        reference: \"FL.Residential.2023.R401.3\"\n    reference: \"FL.Residential.2023.R401.3\"", "rule_name": "foundation_drainage_alternative"}
{"type": "legal_to_bcl", "input": "Requirement for soil bearing capacity presumptive: When element.type == \"foundation\" and element.soil.has_geotechnical_report == False, it is required that if element.soil.classification == \"crystalline_bedrock\": and element.design_bearing_capacity <= 12000.psf", "output": "rule soil_bearing_capacity_presumptive:\n    where:\n        element.type == \"foundation\"\n        element.soil.has_geotechnical_report == False\n        must:\n        if element.soil.classification == \"crystalline_bedrock\":\n        element.design_bearing_capacity <= 12000.psf\n        elif element.soil.classification == \"sedimentary_rock\":\n        element.design_bearing_capacity <= 4000.psf\n        elif element.soil.classification in [\"GW\", \"GP\"]:  # Sandy gravel\n        element.design_bearing_capacity <= 3000.psf\n        elif element.soil.classification in [\"SW\", \"SP\", \"SM\", \"SC\", \"GM\", \"GC\"]:\n        element.design_bearing_capacity <= 2000.psf\n        elif element.soil.classification in [\"CL\", \"ML\", \"MH\", \"CH\"]:\n        element.design_bearing_capacity <= 1500.psf\n        reference: \"FL.Residential.2023.R401.4.1\"\n    must:\n        if element.soil.classification == \"crystalline_bedrock\":\n        element.design_bearing_capacity <= 12000.psf\n        elif element.soil.classification == \"sedimentary_rock\":\n        element.design_bearing_capacity <= 4000.psf\n        elif element.soil.classification in [\"GW\", \"GP\"]:  # Sandy gravel\n        element.design_bearing_capacity <= 3000.psf\n        elif element.soil.classification in [\"SW\", \"SP\", \"SM\", \"SC\", \"GM\", \"GC\"]:\n        element.design_bearing_capacity <= 2000.psf\n        elif element.soil.classification in [\"CL\", \"ML\", \"MH\", \"CH\"]:\n        element.design_bearing_capacity <= 1500.psf\n        reference: \"FL.Residential.2023.R401.4.1\"\n    reference: \"FL.Residential.2023.R401.4.1\"", "rule_name": "soil_bearing_capacity_presumptive"}
{"type": "bcl_to_physics", "input": "rule soil_bearing_capacity_presumptive with constraints: design_bearing_capacity, design_bearing_capacity", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R401.4.1", "rule_name": "soil_bearing_capacity_presumptive"}
{"type": "bcl_completion", "input": "rule soil_bearing_capacity_presumptive:\n    where:\n        element.type == \"foundation\"\n    # Complete this rule", "output": "rule soil_bearing_capacity_presumptive:\n    where:\n        element.type == \"foundation\"\n        element.soil.has_geotechnical_report == False\n        must:\n        if element.soil.classification == \"crystalline_bedrock\":\n        element.design_bearing_capacity <= 12000.psf\n        elif element.soil.classification == \"sedimentary_rock\":\n        element.design_bearing_capacity <= 4000.psf\n        elif element.soil.classification in [\"GW\", \"GP\"]:  # Sandy gravel\n        element.design_bearing_capacity <= 3000.psf\n        elif element.soil.classification in [\"SW\", \"SP\", \"SM\", \"SC\", \"GM\", \"GC\"]:\n        element.design_bearing_capacity <= 2000.psf\n        elif element.soil.classification in [\"CL\", \"ML\", \"MH\", \"CH\"]:\n        element.design_bearing_capacity <= 1500.psf\n        reference: \"FL.Residential.2023.R401.4.1\"\n    must:\n        if element.soil.classification == \"crystalline_bedrock\":\n        element.design_bearing_capacity <= 12000.psf\n        elif element.soil.classification == \"sedimentary_rock\":\n        element.design_bearing_capacity <= 4000.psf\n        elif element.soil.classification in [\"GW\", \"GP\"]:  # Sandy gravel\n        element.design_bearing_capacity <= 3000.psf\n        elif element.soil.classification in [\"SW\", \"SP\", \"SM\", \"SC\", \"GM\", \"GC\"]:\n        element.design_bearing_capacity <= 2000.psf\n        elif element.soil.classification in [\"CL\", \"ML\", \"MH\", \"CH\"]:\n        element.design_bearing_capacity <= 1500.psf\n        reference: \"FL.Residential.2023.R401.4.1\"\n    reference: \"FL.Residential.2023.R401.4.1\"", "rule_name": "soil_bearing_capacity_presumptive"}
{"type": "legal_to_bcl", "input": "Requirement for compressible soil treatment: When element.type == \"foundation\" and element.soil.is_compressible == True or element.soil.is_shifting == True, it is required that element.soil_treatment in [\"removed_to_stable_depth\", \"chemically_stabilized\", \"dewatered\", \"presaturated\"] and element.removed_soil_reused_in_active_zone == False", "output": "rule compressible_soil_treatment:\n    where:\n        element.type == \"foundation\"\n        element.soil.is_compressible == True or element.soil.is_shifting == True\n        must:\n        element.soil_treatment in [\"removed_to_stable_depth\", \"chemically_stabilized\", \"dewatered\", \"presaturated\"]\n        element.removed_soil_reused_in_active_zone == False\n        reference: \"FL.Residential.2023.R401.4.2\"\n        constraint foundation_overturning_stability:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.resisting_moment(element) >= 1.5 * structural.overturning_moment(\n        element.building.wind_loads,\n        element.building.seismic_loads\n        )\n        safety_factor: 1.5\n        constraint foundation_sliding_resistance:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.sliding_resistance(element) >= structural.lateral_forces(\n        element.building.wind_loads,\n        element.building.seismic_loads,\n        element.building.earth_pressure\n        )\n        safety_factor: 1.5\n        constraint soil_bearing_pressure_distribution:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.max_bearing_pressure(\n        element.total_load,\n        element.eccentricity,\n        element.footing_area\n        ) <= element.soil.allowable_bearing_capacity\n        safety_factor: 1.0\n        constraint foundation_settlement_limits:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.total_settlement(element) <= 1.0.inches\n        soil_mechanics.differential_settlement(element) <= 0.5.inches\n        safety_factor: 1.2\n        constraint drainage_flow_capacity:\n        where:\n        element.type == \"foundation_drain\"\n        require:\n        flow.pipe_capacity(\n        element.diameter,\n        element.slope,\n        element.material.roughness\n        ) >= flow.design_storm_runoff(\n        element.tributary_area,\n        element.rainfall_intensity\n        )\n        safety_factor: 1.5\n        constraint frost_protection_depth:\n        where:\n        element.type == \"foundation\"\n        element.location.has_frost_risk == True\n        require:\n        element.bottom_depth >= element.location.frost_line_depth\n        safety_factor: 1.0\n        constraint fill_soil_compaction:\n        where:\n        element.type == \"fill_soil\"\n        element.supports_foundation == True\n        require:\n        element.compaction_percentage >= 95  # % of maximum dry density\n        element.has_engineering_supervision == True\n    must:\n        element.soil_treatment in [\"removed_to_stable_depth\", \"chemically_stabilized\", \"dewatered\", \"presaturated\"]\n        element.removed_soil_reused_in_active_zone == False\n        reference: \"FL.Residential.2023.R401.4.2\"\n        constraint foundation_overturning_stability:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.resisting_moment(element) >= 1.5 * structural.overturning_moment(\n        element.building.wind_loads,\n        element.building.seismic_loads\n        )\n        safety_factor: 1.5\n        constraint foundation_sliding_resistance:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.sliding_resistance(element) >= structural.lateral_forces(\n        element.building.wind_loads,\n        element.building.seismic_loads,\n        element.building.earth_pressure\n        )\n        safety_factor: 1.5\n        constraint soil_bearing_pressure_distribution:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.max_bearing_pressure(\n        element.total_load,\n        element.eccentricity,\n        element.footing_area\n        ) <= element.soil.allowable_bearing_capacity\n        safety_factor: 1.0\n        constraint foundation_settlement_limits:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.total_settlement(element) <= 1.0.inches\n        soil_mechanics.differential_settlement(element) <= 0.5.inches\n        safety_factor: 1.2\n        constraint drainage_flow_capacity:\n        where:\n        element.type == \"foundation_drain\"\n        require:\n        flow.pipe_capacity(\n        element.diameter,\n        element.slope,\n        element.material.roughness\n        ) >= flow.design_storm_runoff(\n        element.tributary_area,\n        element.rainfall_intensity\n        )\n        safety_factor: 1.5\n        constraint frost_protection_depth:\n        where:\n        element.type == \"foundation\"\n        element.location.has_frost_risk == True\n        require:\n        element.bottom_depth >= element.location.frost_line_depth\n        safety_factor: 1.0\n        constraint fill_soil_compaction:\n        where:\n        element.type == \"fill_soil\"\n        element.supports_foundation == True\n        require:\n        element.compaction_percentage >= 95  # % of maximum dry density\n        element.has_engineering_supervision == True\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R401.4.2\"", "rule_name": "compressible_soil_treatment"}
{"type": "bcl_to_physics", "input": "rule compressible_soil_treatment with constraints: structural.resisting_moment(element), structural.sliding_resistance(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.R401.4.2", "rule_name": "compressible_soil_treatment"}
{"type": "bcl_completion", "input": "rule compressible_soil_treatment:\n    where:\n        element.type == \"foundation\"\n    # Complete this rule", "output": "rule compressible_soil_treatment:\n    where:\n        element.type == \"foundation\"\n        element.soil.is_compressible == True or element.soil.is_shifting == True\n        must:\n        element.soil_treatment in [\"removed_to_stable_depth\", \"chemically_stabilized\", \"dewatered\", \"presaturated\"]\n        element.removed_soil_reused_in_active_zone == False\n        reference: \"FL.Residential.2023.R401.4.2\"\n        constraint foundation_overturning_stability:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.resisting_moment(element) >= 1.5 * structural.overturning_moment(\n        element.building.wind_loads,\n        element.building.seismic_loads\n        )\n        safety_factor: 1.5\n        constraint foundation_sliding_resistance:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.sliding_resistance(element) >= structural.lateral_forces(\n        element.building.wind_loads,\n        element.building.seismic_loads,\n        element.building.earth_pressure\n        )\n        safety_factor: 1.5\n        constraint soil_bearing_pressure_distribution:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.max_bearing_pressure(\n        element.total_load,\n        element.eccentricity,\n        element.footing_area\n        ) <= element.soil.allowable_bearing_capacity\n        safety_factor: 1.0\n        constraint foundation_settlement_limits:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.total_settlement(element) <= 1.0.inches\n        soil_mechanics.differential_settlement(element) <= 0.5.inches\n        safety_factor: 1.2\n        constraint drainage_flow_capacity:\n        where:\n        element.type == \"foundation_drain\"\n        require:\n        flow.pipe_capacity(\n        element.diameter,\n        element.slope,\n        element.material.roughness\n        ) >= flow.design_storm_runoff(\n        element.tributary_area,\n        element.rainfall_intensity\n        )\n        safety_factor: 1.5\n        constraint frost_protection_depth:\n        where:\n        element.type == \"foundation\"\n        element.location.has_frost_risk == True\n        require:\n        element.bottom_depth >= element.location.frost_line_depth\n        safety_factor: 1.0\n        constraint fill_soil_compaction:\n        where:\n        element.type == \"fill_soil\"\n        element.supports_foundation == True\n        require:\n        element.compaction_percentage >= 95  # % of maximum dry density\n        element.has_engineering_supervision == True\n    must:\n        element.soil_treatment in [\"removed_to_stable_depth\", \"chemically_stabilized\", \"dewatered\", \"presaturated\"]\n        element.removed_soil_reused_in_active_zone == False\n        reference: \"FL.Residential.2023.R401.4.2\"\n        constraint foundation_overturning_stability:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.resisting_moment(element) >= 1.5 * structural.overturning_moment(\n        element.building.wind_loads,\n        element.building.seismic_loads\n        )\n        safety_factor: 1.5\n        constraint foundation_sliding_resistance:\n        where:\n        element.type == \"foundation\"\n        require:\n        structural.sliding_resistance(element) >= structural.lateral_forces(\n        element.building.wind_loads,\n        element.building.seismic_loads,\n        element.building.earth_pressure\n        )\n        safety_factor: 1.5\n        constraint soil_bearing_pressure_distribution:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.max_bearing_pressure(\n        element.total_load,\n        element.eccentricity,\n        element.footing_area\n        ) <= element.soil.allowable_bearing_capacity\n        safety_factor: 1.0\n        constraint foundation_settlement_limits:\n        where:\n        element.type == \"foundation\"\n        require:\n        soil_mechanics.total_settlement(element) <= 1.0.inches\n        soil_mechanics.differential_settlement(element) <= 0.5.inches\n        safety_factor: 1.2\n        constraint drainage_flow_capacity:\n        where:\n        element.type == \"foundation_drain\"\n        require:\n        flow.pipe_capacity(\n        element.diameter,\n        element.slope,\n        element.material.roughness\n        ) >= flow.design_storm_runoff(\n        element.tributary_area,\n        element.rainfall_intensity\n        )\n        safety_factor: 1.5\n        constraint frost_protection_depth:\n        where:\n        element.type == \"foundation\"\n        element.location.has_frost_risk == True\n        require:\n        element.bottom_depth >= element.location.frost_line_depth\n        safety_factor: 1.0\n        constraint fill_soil_compaction:\n        where:\n        element.type == \"fill_soil\"\n        element.supports_foundation == True\n        require:\n        element.compaction_percentage >= 95  # % of maximum dry density\n        element.has_engineering_supervision == True\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R401.4.2\"", "rule_name": "compressible_soil_treatment"}
{"type": "safety_factor_reasoning", "input": "For compressible_soil_treatment rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.R401.4.2.", "rule_name": "compressible_soil_treatment", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for floor load capacity: When element.type == \"floor_system\" and must:, it is required that structural.capacity(element) >= sum( and element.dead_load,", "output": "rule floor_load_capacity:\n    where:\n        element.type == \"floor_system\"\n        must:\n        structural.capacity(element) >= sum(\n        element.dead_load,\n        element.live_load,\n        element.concentrated_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R501.2\"\n    must:\n        structural.capacity(element) >= sum(\n        element.dead_load,\n        element.live_load,\n        element.concentrated_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R501.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R501.2\"", "rule_name": "floor_load_capacity"}
{"type": "bcl_to_physics", "input": "rule floor_load_capacity with constraints: structural.capacity(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Residential.2023.R501.2", "rule_name": "floor_load_capacity"}
{"type": "bcl_completion", "input": "rule floor_load_capacity:\n    where:\n        element.type == \"floor_system\"\n    # Complete this rule", "output": "rule floor_load_capacity:\n    where:\n        element.type == \"floor_system\"\n        must:\n        structural.capacity(element) >= sum(\n        element.dead_load,\n        element.live_load,\n        element.concentrated_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R501.2\"\n    must:\n        structural.capacity(element) >= sum(\n        element.dead_load,\n        element.live_load,\n        element.concentrated_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R501.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R501.2\"", "rule_name": "floor_load_capacity"}
{"type": "safety_factor_reasoning", "input": "For floor_load_capacity rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.R501.2.", "rule_name": "floor_load_capacity", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for lumber grade marking: When element.type == \"floor_joist\" and element.material == \"sawn_lumber\", it is required that element.has_grade_mark == True or element.has_inspection_certificate == True and element.grading_agency_accredited == True", "output": "rule lumber_grade_marking:\n    where:\n        element.type == \"floor_joist\"\n        element.material == \"sawn_lumber\"\n        must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R502.1.1\"\n    must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R502.1.1\"\n    reference: \"FL.Residential.2023.R502.1.1\"", "rule_name": "lumber_grade_marking"}
{"type": "bcl_to_physics", "input": "rule lumber_grade_marking with conditions: element.has_grade_mark == True or element.has_inspection_certificate == True, element.grading_agency_accredited == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.1.1", "rule_name": "lumber_grade_marking"}
{"type": "bcl_completion", "input": "rule lumber_grade_marking:\n    where:\n        element.type == \"floor_joist\"\n    # Complete this rule", "output": "rule lumber_grade_marking:\n    where:\n        element.type == \"floor_joist\"\n        element.material == \"sawn_lumber\"\n        must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R502.1.1\"\n    must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R502.1.1\"\n    reference: \"FL.Residential.2023.R502.1.1\"", "rule_name": "lumber_grade_marking"}
{"type": "legal_to_bcl", "input": "Requirement for preservative treated floor lumber: When element.type == \"floor_framing\" and element.material == \"wood\", it is required that element.preservative_treatment_identified == True and element.complies_with_section(\"R317.2\")", "output": "rule preservative_treated_floor_lumber:\n    where:\n        element.type == \"floor_framing\"\n        element.material == \"wood\"\n        element.requires_preservative_treatment == True\n        must:\n        element.preservative_treatment_identified == True\n        element.complies_with_section(\"R317.2\")\n        reference: \"FL.Residential.2023.R502.1.1.1\"\n    must:\n        element.preservative_treatment_identified == True\n        element.complies_with_section(\"R317.2\")\n        reference: \"FL.Residential.2023.R502.1.1.1\"\n    reference: \"FL.Residential.2023.R502.1.1.1\"", "rule_name": "preservative_treated_floor_lumber"}
{"type": "bcl_to_physics", "input": "rule preservative_treated_floor_lumber with conditions: element.preservative_treatment_identified == True, element.complies_with_section(\"R317.2\")", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.1.1.1", "rule_name": "preservative_treated_floor_lumber"}
{"type": "bcl_completion", "input": "rule preservative_treated_floor_lumber:\n    where:\n        element.type == \"floor_framing\"\n    # Complete this rule", "output": "rule preservative_treated_floor_lumber:\n    where:\n        element.type == \"floor_framing\"\n        element.material == \"wood\"\n        element.requires_preservative_treatment == True\n        must:\n        element.preservative_treatment_identified == True\n        element.complies_with_section(\"R317.2\")\n        reference: \"FL.Residential.2023.R502.1.1.1\"\n    must:\n        element.preservative_treatment_identified == True\n        element.complies_with_section(\"R317.2\")\n        reference: \"FL.Residential.2023.R502.1.1.1\"\n    reference: \"FL.Residential.2023.R502.1.1.1\"", "rule_name": "preservative_treated_floor_lumber"}
{"type": "legal_to_bcl", "input": "Requirement for end jointed lumber fire rating: When element.type == \"floor_joist\" and element.material == \"end_jointed_lumber\", it is required that element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\") and reference: \"FL.Residential.2023.R502.1.1.2\"", "output": "rule end_jointed_lumber_fire_rating:\n    where:\n        element.type == \"floor_joist\"\n        element.material == \"end_jointed_lumber\"\n        element.assembly_requires_fire_rating == True\n        must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R502.1.1.2\"\n    must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R502.1.1.2\"\n    reference: \"FL.Residential.2023.R502.1.1.2\"", "rule_name": "end_jointed_lumber_fire_rating"}
{"type": "bcl_to_physics", "input": "rule end_jointed_lumber_fire_rating with conditions: element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\"), reference: \"FL.Residential.2023.R502.1.1.2\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.1.1.2", "rule_name": "end_jointed_lumber_fire_rating"}
{"type": "bcl_completion", "input": "rule end_jointed_lumber_fire_rating:\n    where:\n        element.type == \"floor_joist\"\n    # Complete this rule", "output": "rule end_jointed_lumber_fire_rating:\n    where:\n        element.type == \"floor_joist\"\n        element.material == \"end_jointed_lumber\"\n        element.assembly_requires_fire_rating == True\n        must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R502.1.1.2\"\n    must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R502.1.1.2\"\n    reference: \"FL.Residential.2023.R502.1.1.2\"", "rule_name": "end_jointed_lumber_fire_rating"}
{"type": "legal_to_bcl", "input": "Requirement for engineered wood product standards: When element.type in [\"floor_joist\", \"floor_beam\", \"rim_board\"] and element.material_type == \"engineered_wood\", it is required that if element.product_type == \"wood_i_joist\": and element.complies_with_standard(\"ASTM D5055\")", "output": "rule engineered_wood_product_standards:\n    where:\n        element.type in [\"floor_joist\", \"floor_beam\", \"rim_board\"]\n        element.material_type == \"engineered_wood\"\n        must:\n        if element.product_type == \"wood_i_joist\":\n        element.complies_with_standard(\"ASTM D5055\")\n        elif element.product_type == \"glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R502.1.2-7\"\n    must:\n        if element.product_type == \"wood_i_joist\":\n        element.complies_with_standard(\"ASTM D5055\")\n        elif element.product_type == \"glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R502.1.2-7\"\n    reference: \"FL.Residential.2023.R502.1.2-7\"", "rule_name": "engineered_wood_product_standards"}
{"type": "bcl_to_physics", "input": "rule engineered_wood_product_standards with conditions: if element.product_type == \"wood_i_joist\":, element.complies_with_standard(\"ASTM D5055\")", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.1.2-7", "rule_name": "engineered_wood_product_standards"}
{"type": "bcl_completion", "input": "rule engineered_wood_product_standards:\n    where:\n        element.type in [\"floor_joist\", \"floor_beam\", \"rim_board\"]\n    # Complete this rule", "output": "rule engineered_wood_product_standards:\n    where:\n        element.type in [\"floor_joist\", \"floor_beam\", \"rim_board\"]\n        element.material_type == \"engineered_wood\"\n        must:\n        if element.product_type == \"wood_i_joist\":\n        element.complies_with_standard(\"ASTM D5055\")\n        elif element.product_type == \"glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R502.1.2-7\"\n    must:\n        if element.product_type == \"wood_i_joist\":\n        element.complies_with_standard(\"ASTM D5055\")\n        elif element.product_type == \"glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R502.1.2-7\"\n    reference: \"FL.Residential.2023.R502.1.2-7\"", "rule_name": "engineered_wood_product_standards"}
{"type": "legal_to_bcl", "input": "Requirement for floor truss design: When element.type == \"floor_truss\" and element.material == \"wood\", it is required that element.designed_per_engineering_practice == True and if element.connection_type == \"metal_plate\":", "output": "rule floor_truss_design:\n    where:\n        element.type == \"floor_truss\"\n        element.material == \"wood\"\n        must:\n        element.designed_per_engineering_practice == True\n        if element.connection_type == \"metal_plate\":\n        element.complies_with_standard(\"ANSI/TPI 1\")\n        element.design_drawings_by_registered_professional == True\n        reference: \"FL.Residential.2023.R502.11.1\"\n    must:\n        element.designed_per_engineering_practice == True\n        if element.connection_type == \"metal_plate\":\n        element.complies_with_standard(\"ANSI/TPI 1\")\n        element.design_drawings_by_registered_professional == True\n        reference: \"FL.Residential.2023.R502.11.1\"\n    reference: \"FL.Residential.2023.R502.11.1\"", "rule_name": "floor_truss_design"}
{"type": "bcl_to_physics", "input": "rule floor_truss_design with conditions: element.designed_per_engineering_practice == True, if element.connection_type == \"metal_plate\":", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.11.1", "rule_name": "floor_truss_design"}
{"type": "bcl_completion", "input": "rule floor_truss_design:\n    where:\n        element.type == \"floor_truss\"\n    # Complete this rule", "output": "rule floor_truss_design:\n    where:\n        element.type == \"floor_truss\"\n        element.material == \"wood\"\n        must:\n        element.designed_per_engineering_practice == True\n        if element.connection_type == \"metal_plate\":\n        element.complies_with_standard(\"ANSI/TPI 1\")\n        element.design_drawings_by_registered_professional == True\n        reference: \"FL.Residential.2023.R502.11.1\"\n    must:\n        element.designed_per_engineering_practice == True\n        if element.connection_type == \"metal_plate\":\n        element.complies_with_standard(\"ANSI/TPI 1\")\n        element.design_drawings_by_registered_professional == True\n        reference: \"FL.Residential.2023.R502.11.1\"\n    reference: \"FL.Residential.2023.R502.11.1\"", "rule_name": "floor_truss_design"}
{"type": "legal_to_bcl", "input": "Requirement for floor truss bracing: When element.type == \"floor_truss\" and must:, it is required that element.has_rotation_bracing == True and element.has_lateral_stability_bracing == True", "output": "rule floor_truss_bracing:\n    where:\n        element.type == \"floor_truss\"\n        must:\n        element.has_rotation_bracing == True\n        element.has_lateral_stability_bracing == True\n        element.bracing_per_construction_documents == True or\n        element.bracing_per_bcsi_guide == True\n        reference: \"FL.Residential.2023.R502.11.2\"\n    must:\n        element.has_rotation_bracing == True\n        element.has_lateral_stability_bracing == True\n        element.bracing_per_construction_documents == True or\n        element.bracing_per_bcsi_guide == True\n        reference: \"FL.Residential.2023.R502.11.2\"\n    reference: \"FL.Residential.2023.R502.11.2\"", "rule_name": "floor_truss_bracing"}
{"type": "bcl_to_physics", "input": "rule floor_truss_bracing with conditions: element.has_rotation_bracing == True, element.has_lateral_stability_bracing == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.11.2", "rule_name": "floor_truss_bracing"}
{"type": "bcl_completion", "input": "rule floor_truss_bracing:\n    where:\n        element.type == \"floor_truss\"\n    # Complete this rule", "output": "rule floor_truss_bracing:\n    where:\n        element.type == \"floor_truss\"\n        must:\n        element.has_rotation_bracing == True\n        element.has_lateral_stability_bracing == True\n        element.bracing_per_construction_documents == True or\n        element.bracing_per_bcsi_guide == True\n        reference: \"FL.Residential.2023.R502.11.2\"\n    must:\n        element.has_rotation_bracing == True\n        element.has_lateral_stability_bracing == True\n        element.bracing_per_construction_documents == True or\n        element.bracing_per_bcsi_guide == True\n        reference: \"FL.Residential.2023.R502.11.2\"\n    reference: \"FL.Residential.2023.R502.11.2\"", "rule_name": "floor_truss_bracing"}
{"type": "legal_to_bcl", "input": "Requirement for floor truss alterations: When element.type == \"floor_truss\" and element.has_alterations == True, it is required that element.members_cut == False or element.alteration_approved_by_engineer == True and element.members_notched == False or element.alteration_approved_by_engineer == True", "output": "rule floor_truss_alterations:\n    where:\n        element.type == \"floor_truss\"\n        element.has_alterations == True\n        must:\n        element.members_cut == False or element.alteration_approved_by_engineer == True\n        element.members_notched == False or element.alteration_approved_by_engineer == True\n        element.members_spliced == False or element.alteration_approved_by_engineer == True\n        if element.additional_load > 0:\n        element.capacity_verified_for_additional_load == True\n        reference: \"FL.Residential.2023.R502.11.3\"\n    must:\n        element.members_cut == False or element.alteration_approved_by_engineer == True\n        element.members_notched == False or element.alteration_approved_by_engineer == True\n        element.members_spliced == False or element.alteration_approved_by_engineer == True\n        if element.additional_load > 0:\n        element.capacity_verified_for_additional_load == True\n        reference: \"FL.Residential.2023.R502.11.3\"\n    reference: \"FL.Residential.2023.R502.11.3\"", "rule_name": "floor_truss_alterations"}
{"type": "bcl_to_physics", "input": "rule floor_truss_alterations with conditions: element.members_cut == False or element.alteration_approved_by_engineer == True, element.members_notched == False or element.alteration_approved_by_engineer == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.11.3", "rule_name": "floor_truss_alterations"}
{"type": "bcl_completion", "input": "rule floor_truss_alterations:\n    where:\n        element.type == \"floor_truss\"\n    # Complete this rule", "output": "rule floor_truss_alterations:\n    where:\n        element.type == \"floor_truss\"\n        element.has_alterations == True\n        must:\n        element.members_cut == False or element.alteration_approved_by_engineer == True\n        element.members_notched == False or element.alteration_approved_by_engineer == True\n        element.members_spliced == False or element.alteration_approved_by_engineer == True\n        if element.additional_load > 0:\n        element.capacity_verified_for_additional_load == True\n        reference: \"FL.Residential.2023.R502.11.3\"\n    must:\n        element.members_cut == False or element.alteration_approved_by_engineer == True\n        element.members_notched == False or element.alteration_approved_by_engineer == True\n        element.members_spliced == False or element.alteration_approved_by_engineer == True\n        if element.additional_load > 0:\n        element.capacity_verified_for_additional_load == True\n        reference: \"FL.Residential.2023.R502.11.3\"\n    reference: \"FL.Residential.2023.R502.11.3\"", "rule_name": "floor_truss_alterations"}
{"type": "legal_to_bcl", "input": "Requirement for floor truss design drawings: When element.type == \"floor_truss_design_drawing\" and must:, it is required that element.shows_span_slope_spacing == True and element.shows_joint_locations == True", "output": "rule floor_truss_design_drawings:\n    where:\n        element.type == \"floor_truss_design_drawing\"\n        must:\n        element.shows_span_slope_spacing == True\n        element.shows_joint_locations == True\n        element.shows_bearing_widths == True\n        element.shows_design_loads == True\n        element.shows_reactions == True\n        element.shows_connector_details == True\n        element.shows_lumber_specifications == True\n        element.shows_deflection_ratios == True\n        element.shows_bracing_requirements == True\n        element.submitted_before_installation == True\n        element.provided_with_delivery == True\n        reference: \"FL.Residential.2023.R502.11.4\"\n    must:\n        element.shows_span_slope_spacing == True\n        element.shows_joint_locations == True\n        element.shows_bearing_widths == True\n        element.shows_design_loads == True\n        element.shows_reactions == True\n        element.shows_connector_details == True\n        element.shows_lumber_specifications == True\n        element.shows_deflection_ratios == True\n        element.shows_bracing_requirements == True\n        element.submitted_before_installation == True\n        element.provided_with_delivery == True\n        reference: \"FL.Residential.2023.R502.11.4\"\n    reference: \"FL.Residential.2023.R502.11.4\"", "rule_name": "floor_truss_design_drawings"}
{"type": "bcl_to_physics", "input": "rule floor_truss_design_drawings with conditions: element.shows_span_slope_spacing == True, element.shows_joint_locations == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R502.11.4", "rule_name": "floor_truss_design_drawings"}
{"type": "bcl_completion", "input": "rule floor_truss_design_drawings:\n    where:\n        element.type == \"floor_truss_design_drawing\"\n    # Complete this rule", "output": "rule floor_truss_design_drawings:\n    where:\n        element.type == \"floor_truss_design_drawing\"\n        must:\n        element.shows_span_slope_spacing == True\n        element.shows_joint_locations == True\n        element.shows_bearing_widths == True\n        element.shows_design_loads == True\n        element.shows_reactions == True\n        element.shows_connector_details == True\n        element.shows_lumber_specifications == True\n        element.shows_deflection_ratios == True\n        element.shows_bracing_requirements == True\n        element.submitted_before_installation == True\n        element.provided_with_delivery == True\n        reference: \"FL.Residential.2023.R502.11.4\"\n    must:\n        element.shows_span_slope_spacing == True\n        element.shows_joint_locations == True\n        element.shows_bearing_widths == True\n        element.shows_design_loads == True\n        element.shows_reactions == True\n        element.shows_connector_details == True\n        element.shows_lumber_specifications == True\n        element.shows_deflection_ratios == True\n        element.shows_bracing_requirements == True\n        element.submitted_before_installation == True\n        element.provided_with_delivery == True\n        reference: \"FL.Residential.2023.R502.11.4\"\n    reference: \"FL.Residential.2023.R502.11.4\"", "rule_name": "floor_truss_design_drawings"}
{"type": "legal_to_bcl", "input": "Requirement for floor draftstopping: When element.type == \"floor_assembly\" and element.has_usable_space_above_and_below == True, it is required that element.draftstopping_installed == True and element.draftstopping_complies_with_section(\"R302.12\")", "output": "rule floor_draftstopping:\n    where:\n        element.type == \"floor_assembly\"\n        element.has_usable_space_above_and_below == True\n        must:\n        element.draftstopping_installed == True\n        element.draftstopping_complies_with_section(\"R302.12\")\n        reference: \"FL.Residential.2023.R502.12\"\n        constraint floor_deflection_limits:\n        where:\n        element.type == \"floor_system\"\n        require:\n        deflection.live_load(element) <= element.span / 360\n        deflection.total_load(element) <= element.span / 240\n        safety_factor: 1.0\n        constraint floor_vibration_control:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.natural_frequency(element) >= 8.Hz  # Avoid walking frequency\n        structural.peak_acceleration(element) <= 0.5  # % of gravity\n        safety_factor: 1.2\n        constraint floor_joist_stability:\n        where:\n        element.type == \"floor_joist\"\n        require:\n        structural.buckling_capacity(element) >= structural.compression_load(element)\n        element.depth / element.thickness <= 6.0  # For stability\n        safety_factor: 1.5\n        constraint floor_load_distribution:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.load_distribution_factor(element) >= 1.15  # For repetitive members\n        if element.has_concentrated_loads:\n        element.load_spread_angle >= 45.degrees\n        safety_factor: 1.0\n        constraint floor_fire_resistance:\n        where:\n        element.type == \"floor_assembly\"\n        element.requires_fire_rating == True\n        require:\n        fire.resistance_time(element) >= element.required_fire_rating\n        if element.material == \"wood\":\n        element.member_size >= element.required_size + fire.char_depth(element.fire_rating)\n        safety_factor: 1.2\n        constraint floor_acoustic_performance:\n        where:\n        element.type == \"floor_assembly\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        acoustics.iic_rating(element) >= 50\n    must:\n        element.draftstopping_installed == True\n        element.draftstopping_complies_with_section(\"R302.12\")\n        reference: \"FL.Residential.2023.R502.12\"\n        constraint floor_deflection_limits:\n        where:\n        element.type == \"floor_system\"\n        require:\n        deflection.live_load(element) <= element.span / 360\n        deflection.total_load(element) <= element.span / 240\n        safety_factor: 1.0\n        constraint floor_vibration_control:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.natural_frequency(element) >= 8.Hz  # Avoid walking frequency\n        structural.peak_acceleration(element) <= 0.5  # % of gravity\n        safety_factor: 1.2\n        constraint floor_joist_stability:\n        where:\n        element.type == \"floor_joist\"\n        require:\n        structural.buckling_capacity(element) >= structural.compression_load(element)\n        element.depth / element.thickness <= 6.0  # For stability\n        safety_factor: 1.5\n        constraint floor_load_distribution:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.load_distribution_factor(element) >= 1.15  # For repetitive members\n        if element.has_concentrated_loads:\n        element.load_spread_angle >= 45.degrees\n        safety_factor: 1.0\n        constraint floor_fire_resistance:\n        where:\n        element.type == \"floor_assembly\"\n        element.requires_fire_rating == True\n        require:\n        fire.resistance_time(element) >= element.required_fire_rating\n        if element.material == \"wood\":\n        element.member_size >= element.required_size + fire.char_depth(element.fire_rating)\n        safety_factor: 1.2\n        constraint floor_acoustic_performance:\n        where:\n        element.type == \"floor_assembly\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        acoustics.iic_rating(element) >= 50\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.R502.12\"", "rule_name": "floor_draftstopping"}
{"type": "bcl_to_physics", "input": "rule floor_draftstopping with constraints: thickness, load_spread_angle", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Residential.2023.R502.12", "rule_name": "floor_draftstopping"}
{"type": "bcl_completion", "input": "rule floor_draftstopping:\n    where:\n        element.type == \"floor_assembly\"\n    # Complete this rule", "output": "rule floor_draftstopping:\n    where:\n        element.type == \"floor_assembly\"\n        element.has_usable_space_above_and_below == True\n        must:\n        element.draftstopping_installed == True\n        element.draftstopping_complies_with_section(\"R302.12\")\n        reference: \"FL.Residential.2023.R502.12\"\n        constraint floor_deflection_limits:\n        where:\n        element.type == \"floor_system\"\n        require:\n        deflection.live_load(element) <= element.span / 360\n        deflection.total_load(element) <= element.span / 240\n        safety_factor: 1.0\n        constraint floor_vibration_control:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.natural_frequency(element) >= 8.Hz  # Avoid walking frequency\n        structural.peak_acceleration(element) <= 0.5  # % of gravity\n        safety_factor: 1.2\n        constraint floor_joist_stability:\n        where:\n        element.type == \"floor_joist\"\n        require:\n        structural.buckling_capacity(element) >= structural.compression_load(element)\n        element.depth / element.thickness <= 6.0  # For stability\n        safety_factor: 1.5\n        constraint floor_load_distribution:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.load_distribution_factor(element) >= 1.15  # For repetitive members\n        if element.has_concentrated_loads:\n        element.load_spread_angle >= 45.degrees\n        safety_factor: 1.0\n        constraint floor_fire_resistance:\n        where:\n        element.type == \"floor_assembly\"\n        element.requires_fire_rating == True\n        require:\n        fire.resistance_time(element) >= element.required_fire_rating\n        if element.material == \"wood\":\n        element.member_size >= element.required_size + fire.char_depth(element.fire_rating)\n        safety_factor: 1.2\n        constraint floor_acoustic_performance:\n        where:\n        element.type == \"floor_assembly\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        acoustics.iic_rating(element) >= 50\n    must:\n        element.draftstopping_installed == True\n        element.draftstopping_complies_with_section(\"R302.12\")\n        reference: \"FL.Residential.2023.R502.12\"\n        constraint floor_deflection_limits:\n        where:\n        element.type == \"floor_system\"\n        require:\n        deflection.live_load(element) <= element.span / 360\n        deflection.total_load(element) <= element.span / 240\n        safety_factor: 1.0\n        constraint floor_vibration_control:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.natural_frequency(element) >= 8.Hz  # Avoid walking frequency\n        structural.peak_acceleration(element) <= 0.5  # % of gravity\n        safety_factor: 1.2\n        constraint floor_joist_stability:\n        where:\n        element.type == \"floor_joist\"\n        require:\n        structural.buckling_capacity(element) >= structural.compression_load(element)\n        element.depth / element.thickness <= 6.0  # For stability\n        safety_factor: 1.5\n        constraint floor_load_distribution:\n        where:\n        element.type == \"floor_system\"\n        require:\n        structural.load_distribution_factor(element) >= 1.15  # For repetitive members\n        if element.has_concentrated_loads:\n        element.load_spread_angle >= 45.degrees\n        safety_factor: 1.0\n        constraint floor_fire_resistance:\n        where:\n        element.type == \"floor_assembly\"\n        element.requires_fire_rating == True\n        require:\n        fire.resistance_time(element) >= element.required_fire_rating\n        if element.material == \"wood\":\n        element.member_size >= element.required_size + fire.char_depth(element.fire_rating)\n        safety_factor: 1.2\n        constraint floor_acoustic_performance:\n        where:\n        element.type == \"floor_assembly\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        acoustics.iic_rating(element) >= 50\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.R502.12\"", "rule_name": "floor_draftstopping"}
{"type": "safety_factor_reasoning", "input": "For floor_draftstopping rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.R502.12.", "rule_name": "floor_draftstopping", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for wall load capacity: When element.type in [\"wall\", \"partition\"] and must:, it is required that structural.capacity(element) >= sum( and element.axial_load,", "output": "rule wall_load_capacity:\n    where:\n        element.type in [\"wall\", \"partition\"]\n        must:\n        structural.capacity(element) >= sum(\n        element.axial_load,\n        element.lateral_load,\n        element.eccentric_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R601.2\"\n    must:\n        structural.capacity(element) >= sum(\n        element.axial_load,\n        element.lateral_load,\n        element.eccentric_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R601.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R601.2\"", "rule_name": "wall_load_capacity"}
{"type": "bcl_to_physics", "input": "rule wall_load_capacity with constraints: structural.capacity(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Residential.2023.R601.2", "rule_name": "wall_load_capacity"}
{"type": "bcl_completion", "input": "rule wall_load_capacity:\n    where:\n        element.type in [\"wall\", \"partition\"]\n    # Complete this rule", "output": "rule wall_load_capacity:\n    where:\n        element.type in [\"wall\", \"partition\"]\n        must:\n        structural.capacity(element) >= sum(\n        element.axial_load,\n        element.lateral_load,\n        element.eccentric_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R601.2\"\n    must:\n        structural.capacity(element) >= sum(\n        element.axial_load,\n        element.lateral_load,\n        element.eccentric_load\n        )\n        element.load_path_continuous == True\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.R601.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.R601.2\"", "rule_name": "wall_load_capacity"}
{"type": "safety_factor_reasoning", "input": "For wall_load_capacity rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.R601.2.", "rule_name": "wall_load_capacity", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for compressible floor covering restriction: When element.type == \"floor_covering\" and element.is_compressible == True, it is required that element.extends_beneath_walls == False and element.extends_beneath_partitions == False", "output": "rule compressible_floor_covering_restriction:\n    where:\n        element.type == \"floor_covering\"\n        element.is_compressible == True\n        element.compression_under_50lb_per_sq_in > 0.03125.inches  # 1/32\"\n        element.uncompressed_thickness > 0.125.inches  # 1/8\"\n        must:\n        element.extends_beneath_walls == False\n        element.extends_beneath_partitions == False\n        element.extends_beneath_columns == False\n        reference: \"FL.Residential.2023.R601.2.1\"\n    must:\n        element.extends_beneath_walls == False\n        element.extends_beneath_partitions == False\n        element.extends_beneath_columns == False\n        reference: \"FL.Residential.2023.R601.2.1\"\n    reference: \"FL.Residential.2023.R601.2.1\"", "rule_name": "compressible_floor_covering_restriction"}
{"type": "bcl_to_physics", "input": "rule compressible_floor_covering_restriction with constraints: compression_under_50lb_per_sq_in, uncompressed_thickness", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R601.2.1", "rule_name": "compressible_floor_covering_restriction"}
{"type": "bcl_completion", "input": "rule compressible_floor_covering_restriction:\n    where:\n        element.type == \"floor_covering\"\n    # Complete this rule", "output": "rule compressible_floor_covering_restriction:\n    where:\n        element.type == \"floor_covering\"\n        element.is_compressible == True\n        element.compression_under_50lb_per_sq_in > 0.03125.inches  # 1/32\"\n        element.uncompressed_thickness > 0.125.inches  # 1/8\"\n        must:\n        element.extends_beneath_walls == False\n        element.extends_beneath_partitions == False\n        element.extends_beneath_columns == False\n        reference: \"FL.Residential.2023.R601.2.1\"\n    must:\n        element.extends_beneath_walls == False\n        element.extends_beneath_partitions == False\n        element.extends_beneath_columns == False\n        reference: \"FL.Residential.2023.R601.2.1\"\n    reference: \"FL.Residential.2023.R601.2.1\"", "rule_name": "compressible_floor_covering_restriction"}
{"type": "legal_to_bcl", "input": "Requirement for wood wall lumber grading: When element.type == \"wall_stud\" and element.material == \"sawn_lumber\", it is required that element.has_grade_mark == True or element.has_inspection_certificate == True and element.grading_agency_accredited == True", "output": "rule wood_wall_lumber_grading:\n    where:\n        element.type == \"wall_stud\"\n        element.material == \"sawn_lumber\"\n        must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R602.1.1\"\n    must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R602.1.1\"\n    reference: \"FL.Residential.2023.R602.1.1\"", "rule_name": "wood_wall_lumber_grading"}
{"type": "bcl_to_physics", "input": "rule wood_wall_lumber_grading with conditions: element.has_grade_mark == True or element.has_inspection_certificate == True, element.grading_agency_accredited == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.1.1", "rule_name": "wood_wall_lumber_grading"}
{"type": "bcl_completion", "input": "rule wood_wall_lumber_grading:\n    where:\n        element.type == \"wall_stud\"\n    # Complete this rule", "output": "rule wood_wall_lumber_grading:\n    where:\n        element.type == \"wall_stud\"\n        element.material == \"sawn_lumber\"\n        must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R602.1.1\"\n    must:\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        element.grading_agency_accredited == True\n        element.design_values_certified == True\n        reference: \"FL.Residential.2023.R602.1.1\"\n    reference: \"FL.Residential.2023.R602.1.1\"", "rule_name": "wood_wall_lumber_grading"}
{"type": "legal_to_bcl", "input": "Requirement for wall stud minimum grade: When element.type == \"wall_stud\" and element.material == \"lumber\", it is required that if element.is_bearing and element.supports_floors: and element.grade in [\"No. 3\", \"standard\", \"stud\"]", "output": "rule wall_stud_minimum_grade:\n    where:\n        element.type == \"wall_stud\"\n        element.material == \"lumber\"\n        must:\n        if element.is_bearing and element.supports_floors:\n        element.grade in [\"No. 3\", \"standard\", \"stud\"]\n        else:\n        element.grade in [\"No. 3\", \"standard\", \"stud\", \"utility\"]\n        reference: \"FL.Residential.2023.R602.2\"\n    must:\n        if element.is_bearing and element.supports_floors:\n        element.grade in [\"No. 3\", \"standard\", \"stud\"]\n        else:\n        element.grade in [\"No. 3\", \"standard\", \"stud\", \"utility\"]\n        reference: \"FL.Residential.2023.R602.2\"\n    reference: \"FL.Residential.2023.R602.2\"", "rule_name": "wall_stud_minimum_grade"}
{"type": "bcl_to_physics", "input": "rule wall_stud_minimum_grade with conditions: if element.is_bearing and element.supports_floors:, element.grade in [\"No. 3\", \"standard\", \"stud\"]", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.2", "rule_name": "wall_stud_minimum_grade"}
{"type": "bcl_completion", "input": "rule wall_stud_minimum_grade:\n    where:\n        element.type == \"wall_stud\"\n    # Complete this rule", "output": "rule wall_stud_minimum_grade:\n    where:\n        element.type == \"wall_stud\"\n        element.material == \"lumber\"\n        must:\n        if element.is_bearing and element.supports_floors:\n        element.grade in [\"No. 3\", \"standard\", \"stud\"]\n        else:\n        element.grade in [\"No. 3\", \"standard\", \"stud\", \"utility\"]\n        reference: \"FL.Residential.2023.R602.2\"\n    must:\n        if element.is_bearing and element.supports_floors:\n        element.grade in [\"No. 3\", \"standard\", \"stud\"]\n        else:\n        element.grade in [\"No. 3\", \"standard\", \"stud\", \"utility\"]\n        reference: \"FL.Residential.2023.R602.2\"\n    reference: \"FL.Residential.2023.R602.2\"", "rule_name": "wall_stud_minimum_grade"}
{"type": "legal_to_bcl", "input": "Requirement for end jointed wall lumber fire: When element.type == \"wall_framing\" and element.material == \"end_jointed_lumber\", it is required that element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\") and reference: \"FL.Residential.2023.R602.1.2\"", "output": "rule end_jointed_wall_lumber_fire:\n    where:\n        element.type == \"wall_framing\"\n        element.material == \"end_jointed_lumber\"\n        element.assembly_requires_fire_rating == True\n        must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R602.1.2\"\n    must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R602.1.2\"\n    reference: \"FL.Residential.2023.R602.1.2\"", "rule_name": "end_jointed_wall_lumber_fire"}
{"type": "bcl_to_physics", "input": "rule end_jointed_wall_lumber_fire with conditions: element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\"), reference: \"FL.Residential.2023.R602.1.2\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.1.2", "rule_name": "end_jointed_wall_lumber_fire"}
{"type": "bcl_completion", "input": "rule end_jointed_wall_lumber_fire:\n    where:\n        element.type == \"wall_framing\"\n    # Complete this rule", "output": "rule end_jointed_wall_lumber_fire:\n    where:\n        element.type == \"wall_framing\"\n        element.material == \"end_jointed_lumber\"\n        element.assembly_requires_fire_rating == True\n        must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R602.1.2\"\n    must:\n        element.grade_mark_includes(\"HRA\") or element.grade_mark_includes(\"Heat Resistant Adhesive\")\n        reference: \"FL.Residential.2023.R602.1.2\"\n    reference: \"FL.Residential.2023.R602.1.2\"", "rule_name": "end_jointed_wall_lumber_fire"}
{"type": "legal_to_bcl", "input": "Requirement for engineered wood wall products: When element.type in [\"wall_stud\", \"wall_plate\", \"rim_board\"] and element.material_type == \"engineered_wood\", it is required that if element.product_type == \"structural_glued_laminated\": and element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])", "output": "rule engineered_wood_wall_products:\n    where:\n        element.type in [\"wall_stud\", \"wall_plate\", \"rim_board\"]\n        element.material_type == \"engineered_wood\"\n        must:\n        if element.product_type == \"structural_glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R602.1.3-7\"\n    must:\n        if element.product_type == \"structural_glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R602.1.3-7\"\n    reference: \"FL.Residential.2023.R602.1.3-7\"", "rule_name": "engineered_wood_wall_products"}
{"type": "bcl_to_physics", "input": "rule engineered_wood_wall_products with conditions: if element.product_type == \"structural_glued_laminated\":, element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.1.3-7", "rule_name": "engineered_wood_wall_products"}
{"type": "bcl_completion", "input": "rule engineered_wood_wall_products:\n    where:\n        element.type in [\"wall_stud\", \"wall_plate\", \"rim_board\"]\n    # Complete this rule", "output": "rule engineered_wood_wall_products:\n    where:\n        element.type in [\"wall_stud\", \"wall_plate\", \"rim_board\"]\n        element.material_type == \"engineered_wood\"\n        must:\n        if element.product_type == \"structural_glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R602.1.3-7\"\n    must:\n        if element.product_type == \"structural_glued_laminated\":\n        element.complies_with_standards([\"ANSI A190.1\", \"ANSI 117\", \"ASTM D3737\"])\n        elif element.product_type == \"structural_composite_lumber\":\n        element.complies_with_standard(\"ASTM D5456\")\n        elif element.product_type == \"cross_laminated_timber\":\n        element.complies_with_standard(\"ANSI/APA PRG 320\")\n        elif element.product_type == \"engineered_rim_board\":\n        element.complies_with_standard(\"ANSI/APA PRR 410\") or element.evaluated_per(\"ASTM D7672\")\n        reference: \"FL.Residential.2023.R602.1.3-7\"\n    reference: \"FL.Residential.2023.R602.1.3-7\"", "rule_name": "engineered_wood_wall_products"}
{"type": "legal_to_bcl", "input": "Requirement for wood structural panel sheathing: When element.type == \"wall_sheathing\" and element.material == \"wood_structural_panel\", it is required that element.complies_with_standard(\"DOC PS 1\") or and element.complies_with_standard(\"DOC PS 2\") or", "output": "rule wood_structural_panel_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n        element.material == \"wood_structural_panel\"\n        must:\n        element.complies_with_standard(\"DOC PS 1\") or\n        element.complies_with_standard(\"DOC PS 2\") or\n        (element.manufactured_in_canada and element.complies_with_standards([\"CSA O437\", \"CSA O325\"]))\n        element.has_grade_mark == True\n        element.shows_bond_classification == True\n        element.shows_performance_category == True\n        reference: \"FL.Residential.2023.R602.1.8\"\n    must:\n        element.complies_with_standard(\"DOC PS 1\") or\n        element.complies_with_standard(\"DOC PS 2\") or\n        (element.manufactured_in_canada and element.complies_with_standards([\"CSA O437\", \"CSA O325\"]))\n        element.has_grade_mark == True\n        element.shows_bond_classification == True\n        element.shows_performance_category == True\n        reference: \"FL.Residential.2023.R602.1.8\"\n    reference: \"FL.Residential.2023.R602.1.8\"", "rule_name": "wood_structural_panel_sheathing"}
{"type": "bcl_to_physics", "input": "rule wood_structural_panel_sheathing with conditions: element.complies_with_standard(\"DOC PS 1\") or, element.complies_with_standard(\"DOC PS 2\") or", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.1.8", "rule_name": "wood_structural_panel_sheathing"}
{"type": "bcl_completion", "input": "rule wood_structural_panel_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n    # Complete this rule", "output": "rule wood_structural_panel_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n        element.material == \"wood_structural_panel\"\n        must:\n        element.complies_with_standard(\"DOC PS 1\") or\n        element.complies_with_standard(\"DOC PS 2\") or\n        (element.manufactured_in_canada and element.complies_with_standards([\"CSA O437\", \"CSA O325\"]))\n        element.has_grade_mark == True\n        element.shows_bond_classification == True\n        element.shows_performance_category == True\n        reference: \"FL.Residential.2023.R602.1.8\"\n    must:\n        element.complies_with_standard(\"DOC PS 1\") or\n        element.complies_with_standard(\"DOC PS 2\") or\n        (element.manufactured_in_canada and element.complies_with_standards([\"CSA O437\", \"CSA O325\"]))\n        element.has_grade_mark == True\n        element.shows_bond_classification == True\n        element.shows_performance_category == True\n        reference: \"FL.Residential.2023.R602.1.8\"\n    reference: \"FL.Residential.2023.R602.1.8\"", "rule_name": "wood_structural_panel_sheathing"}
{"type": "legal_to_bcl", "input": "Requirement for particleboard wall sheathing: When element.type == \"wall_sheathing\" and element.material == \"particleboard\", it is required that element.complies_with_standard(\"ANSI A208.1\") and element.has_grade_mark == True or element.has_inspection_certificate == True", "output": "rule particleboard_wall_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n        element.material == \"particleboard\"\n        must:\n        element.complies_with_standard(\"ANSI A208.1\")\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        reference: \"FL.Residential.2023.R602.1.9\"\n    must:\n        element.complies_with_standard(\"ANSI A208.1\")\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        reference: \"FL.Residential.2023.R602.1.9\"\n    reference: \"FL.Residential.2023.R602.1.9\"", "rule_name": "particleboard_wall_sheathing"}
{"type": "bcl_to_physics", "input": "rule particleboard_wall_sheathing with conditions: element.complies_with_standard(\"ANSI A208.1\"), element.has_grade_mark == True or element.has_inspection_certificate == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.1.9", "rule_name": "particleboard_wall_sheathing"}
{"type": "bcl_completion", "input": "rule particleboard_wall_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n    # Complete this rule", "output": "rule particleboard_wall_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n        element.material == \"particleboard\"\n        must:\n        element.complies_with_standard(\"ANSI A208.1\")\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        reference: \"FL.Residential.2023.R602.1.9\"\n    must:\n        element.complies_with_standard(\"ANSI A208.1\")\n        element.has_grade_mark == True or element.has_inspection_certificate == True\n        reference: \"FL.Residential.2023.R602.1.9\"\n    reference: \"FL.Residential.2023.R602.1.9\"", "rule_name": "particleboard_wall_sheathing"}
{"type": "legal_to_bcl", "input": "Requirement for fiberboard wall sheathing: When element.type == \"wall_sheathing\" and element.material == \"fiberboard\", it is required that element.complies_with_standard(\"ASTM C208\") and element.identified_by_approved_agency == True", "output": "rule fiberboard_wall_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n        element.material == \"fiberboard\"\n        element.use == \"structural\"\n        must:\n        element.complies_with_standard(\"ASTM C208\")\n        element.identified_by_approved_agency == True\n        reference: \"FL.Residential.2023.R602.1.10\"\n    must:\n        element.complies_with_standard(\"ASTM C208\")\n        element.identified_by_approved_agency == True\n        reference: \"FL.Residential.2023.R602.1.10\"\n    reference: \"FL.Residential.2023.R602.1.10\"", "rule_name": "fiberboard_wall_sheathing"}
{"type": "bcl_to_physics", "input": "rule fiberboard_wall_sheathing with conditions: element.complies_with_standard(\"ASTM C208\"), element.identified_by_approved_agency == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R602.1.10", "rule_name": "fiberboard_wall_sheathing"}
{"type": "bcl_completion", "input": "rule fiberboard_wall_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n    # Complete this rule", "output": "rule fiberboard_wall_sheathing:\n    where:\n        element.type == \"wall_sheathing\"\n        element.material == \"fiberboard\"\n        element.use == \"structural\"\n        must:\n        element.complies_with_standard(\"ASTM C208\")\n        element.identified_by_approved_agency == True\n        reference: \"FL.Residential.2023.R602.1.10\"\n    must:\n        element.complies_with_standard(\"ASTM C208\")\n        element.identified_by_approved_agency == True\n        reference: \"FL.Residential.2023.R602.1.10\"\n    reference: \"FL.Residential.2023.R602.1.10\"", "rule_name": "fiberboard_wall_sheathing"}
{"type": "legal_to_bcl", "input": "Requirement for structural insulated panels: When element.type == \"wall_panel\" and element.panel_type == \"structural_insulated_panel\", it is required that element.complies_with_standard(\"ANSI/APA PRS 610.1\") and element.identified_per_standard == True", "output": "rule structural_insulated_panels:\n    where:\n        element.type == \"wall_panel\"\n        element.panel_type == \"structural_insulated_panel\"\n        must:\n        element.complies_with_standard(\"ANSI/APA PRS 610.1\")\n        element.identified_per_standard == True\n        reference: \"FL.Residential.2023.R602.1.11\"\n        constraint wall_slenderness_ratio:\n        where:\n        element.type == \"wall\"\n        element.is_load_bearing == True\n        require:\n        element.unsupported_height / element.effective_thickness <= 25\n        safety_factor: 1.2\n        constraint wall_lateral_stability:\n        where:\n        element.type == \"wall_stud\"\n        require:\n        element.lateral_support_spacing <= min(\n        element.depth * 50,  # Based on depth\n        8.feet  # Maximum spacing\n        )\n        safety_factor: 1.0\n        constraint wall_axial_capacity:\n        where:\n        element.type == \"wall_stud\"\n        element.is_load_bearing == True\n        require:\n        (structural.axial_stress(element) / element.allowable_compression) +\n        (structural.bending_stress(element) / element.allowable_bending) <= 1.0\n        safety_factor: 1.5\n        constraint wall_shear_capacity:\n        where:\n        element.type == \"shear_wall\"\n        require:\n        structural.shear_capacity(element) >= structural.applied_shear(element)\n        element.height / element.length <= 3.5\n        safety_factor: 1.4\n        constraint wall_thermal_performance:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        thermal.r_value(element) >= element.climate_zone_minimum_r_value\n        if element.has_steel_framing:\n        element.has_continuous_insulation == True\n        safety_factor: 1.0\n        constraint wall_fire_separation:\n        where:\n        element.type == \"wall\"\n        element.is_fire_separation == True\n        require:\n        fire.resistance_rating(element) >= element.required_fire_rating\n        element.extends_from_foundation_to_roof == True\n        safety_factor: 1.0\n        constraint wall_sound_transmission:\n        where:\n        element.type == \"wall\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        safety_factor: 1.0\n        constraint wall_moisture_control:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        element.has_water_resistive_barrier == True\n        element.vapor_retarder_class <= element.climate_zone_requirement\n    must:\n        element.complies_with_standard(\"ANSI/APA PRS 610.1\")\n        element.identified_per_standard == True\n        reference: \"FL.Residential.2023.R602.1.11\"\n        constraint wall_slenderness_ratio:\n        where:\n        element.type == \"wall\"\n        element.is_load_bearing == True\n        require:\n        element.unsupported_height / element.effective_thickness <= 25\n        safety_factor: 1.2\n        constraint wall_lateral_stability:\n        where:\n        element.type == \"wall_stud\"\n        require:\n        element.lateral_support_spacing <= min(\n        element.depth * 50,  # Based on depth\n        8.feet  # Maximum spacing\n        )\n        safety_factor: 1.0\n        constraint wall_axial_capacity:\n        where:\n        element.type == \"wall_stud\"\n        element.is_load_bearing == True\n        require:\n        (structural.axial_stress(element) / element.allowable_compression) +\n        (structural.bending_stress(element) / element.allowable_bending) <= 1.0\n        safety_factor: 1.5\n        constraint wall_shear_capacity:\n        where:\n        element.type == \"shear_wall\"\n        require:\n        structural.shear_capacity(element) >= structural.applied_shear(element)\n        element.height / element.length <= 3.5\n        safety_factor: 1.4\n        constraint wall_thermal_performance:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        thermal.r_value(element) >= element.climate_zone_minimum_r_value\n        if element.has_steel_framing:\n        element.has_continuous_insulation == True\n        safety_factor: 1.0\n        constraint wall_fire_separation:\n        where:\n        element.type == \"wall\"\n        element.is_fire_separation == True\n        require:\n        fire.resistance_rating(element) >= element.required_fire_rating\n        element.extends_from_foundation_to_roof == True\n        safety_factor: 1.0\n        constraint wall_sound_transmission:\n        where:\n        element.type == \"wall\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        safety_factor: 1.0\n        constraint wall_moisture_control:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        element.has_water_resistive_barrier == True\n        element.vapor_retarder_class <= element.climate_zone_requirement\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.R602.1.11\"", "rule_name": "structural_insulated_panels"}
{"type": "bcl_to_physics", "input": "rule structural_insulated_panels with constraints: length, thermal.r_value(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Residential.2023.R602.1.11", "rule_name": "structural_insulated_panels"}
{"type": "bcl_completion", "input": "rule structural_insulated_panels:\n    where:\n        element.type == \"wall_panel\"\n    # Complete this rule", "output": "rule structural_insulated_panels:\n    where:\n        element.type == \"wall_panel\"\n        element.panel_type == \"structural_insulated_panel\"\n        must:\n        element.complies_with_standard(\"ANSI/APA PRS 610.1\")\n        element.identified_per_standard == True\n        reference: \"FL.Residential.2023.R602.1.11\"\n        constraint wall_slenderness_ratio:\n        where:\n        element.type == \"wall\"\n        element.is_load_bearing == True\n        require:\n        element.unsupported_height / element.effective_thickness <= 25\n        safety_factor: 1.2\n        constraint wall_lateral_stability:\n        where:\n        element.type == \"wall_stud\"\n        require:\n        element.lateral_support_spacing <= min(\n        element.depth * 50,  # Based on depth\n        8.feet  # Maximum spacing\n        )\n        safety_factor: 1.0\n        constraint wall_axial_capacity:\n        where:\n        element.type == \"wall_stud\"\n        element.is_load_bearing == True\n        require:\n        (structural.axial_stress(element) / element.allowable_compression) +\n        (structural.bending_stress(element) / element.allowable_bending) <= 1.0\n        safety_factor: 1.5\n        constraint wall_shear_capacity:\n        where:\n        element.type == \"shear_wall\"\n        require:\n        structural.shear_capacity(element) >= structural.applied_shear(element)\n        element.height / element.length <= 3.5\n        safety_factor: 1.4\n        constraint wall_thermal_performance:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        thermal.r_value(element) >= element.climate_zone_minimum_r_value\n        if element.has_steel_framing:\n        element.has_continuous_insulation == True\n        safety_factor: 1.0\n        constraint wall_fire_separation:\n        where:\n        element.type == \"wall\"\n        element.is_fire_separation == True\n        require:\n        fire.resistance_rating(element) >= element.required_fire_rating\n        element.extends_from_foundation_to_roof == True\n        safety_factor: 1.0\n        constraint wall_sound_transmission:\n        where:\n        element.type == \"wall\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        safety_factor: 1.0\n        constraint wall_moisture_control:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        element.has_water_resistive_barrier == True\n        element.vapor_retarder_class <= element.climate_zone_requirement\n    must:\n        element.complies_with_standard(\"ANSI/APA PRS 610.1\")\n        element.identified_per_standard == True\n        reference: \"FL.Residential.2023.R602.1.11\"\n        constraint wall_slenderness_ratio:\n        where:\n        element.type == \"wall\"\n        element.is_load_bearing == True\n        require:\n        element.unsupported_height / element.effective_thickness <= 25\n        safety_factor: 1.2\n        constraint wall_lateral_stability:\n        where:\n        element.type == \"wall_stud\"\n        require:\n        element.lateral_support_spacing <= min(\n        element.depth * 50,  # Based on depth\n        8.feet  # Maximum spacing\n        )\n        safety_factor: 1.0\n        constraint wall_axial_capacity:\n        where:\n        element.type == \"wall_stud\"\n        element.is_load_bearing == True\n        require:\n        (structural.axial_stress(element) / element.allowable_compression) +\n        (structural.bending_stress(element) / element.allowable_bending) <= 1.0\n        safety_factor: 1.5\n        constraint wall_shear_capacity:\n        where:\n        element.type == \"shear_wall\"\n        require:\n        structural.shear_capacity(element) >= structural.applied_shear(element)\n        element.height / element.length <= 3.5\n        safety_factor: 1.4\n        constraint wall_thermal_performance:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        thermal.r_value(element) >= element.climate_zone_minimum_r_value\n        if element.has_steel_framing:\n        element.has_continuous_insulation == True\n        safety_factor: 1.0\n        constraint wall_fire_separation:\n        where:\n        element.type == \"wall\"\n        element.is_fire_separation == True\n        require:\n        fire.resistance_rating(element) >= element.required_fire_rating\n        element.extends_from_foundation_to_roof == True\n        safety_factor: 1.0\n        constraint wall_sound_transmission:\n        where:\n        element.type == \"wall\"\n        element.separates_dwelling_units == True\n        require:\n        acoustics.stc_rating(element) >= 50\n        safety_factor: 1.0\n        constraint wall_moisture_control:\n        where:\n        element.type == \"exterior_wall\"\n        require:\n        element.has_water_resistive_barrier == True\n        element.vapor_retarder_class <= element.climate_zone_requirement\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.R602.1.11\"", "rule_name": "structural_insulated_panels"}
{"type": "safety_factor_reasoning", "input": "For structural_insulated_panels rule involving structural integrity, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.R602.1.11.", "rule_name": "structural_insulated_panels", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for electrical system scope: When element.type == \"electrical_system\" and element.building_type in [\"one_family\", \"two_family\", \"townhouse\"], it is required that element.service_voltage <= 240.volts and element.service_amperage <= 400.amperes", "output": "rule electrical_system_scope:\n    where:\n        element.type == \"electrical_system\"\n        element.building_type in [\"one_family\", \"two_family\", \"townhouse\"]\n        must:\n        element.service_voltage <= 240.volts\n        element.service_amperage <= 400.amperes\n        element.service_phases == 1\n        reference: \"FL.Residential.2023.Ch34-NEC\"\n    must:\n        element.service_voltage <= 240.volts\n        element.service_amperage <= 400.amperes\n        element.service_phases == 1\n        reference: \"FL.Residential.2023.Ch34-NEC\"\n    reference: \"FL.Residential.2023.Ch34-NEC\"", "rule_name": "electrical_system_scope"}
{"type": "bcl_to_physics", "input": "rule electrical_system_scope with constraints: service_voltage, service_amperage", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC", "rule_name": "electrical_system_scope"}
{"type": "bcl_completion", "input": "rule electrical_system_scope:\n    where:\n        element.type == \"electrical_system\"\n    # Complete this rule", "output": "rule electrical_system_scope:\n    where:\n        element.type == \"electrical_system\"\n        element.building_type in [\"one_family\", \"two_family\", \"townhouse\"]\n        must:\n        element.service_voltage <= 240.volts\n        element.service_amperage <= 400.amperes\n        element.service_phases == 1\n        reference: \"FL.Residential.2023.Ch34-NEC\"\n    must:\n        element.service_voltage <= 240.volts\n        element.service_amperage <= 400.amperes\n        element.service_phases == 1\n        reference: \"FL.Residential.2023.Ch34-NEC\"\n    reference: \"FL.Residential.2023.Ch34-NEC\"", "rule_name": "electrical_system_scope"}
{"type": "legal_to_bcl", "input": "Requirement for electrical code compliance: When element.type in [\"electrical_component\", \"electrical_system\"] and must:, it is required that element.complies_with_nec_2020 == True and element.is_listed == True or element.is_field_evaluated == True", "output": "rule electrical_code_compliance:\n    where:\n        element.type in [\"electrical_component\", \"electrical_system\"]\n        must:\n        element.complies_with_nec_2020 == True\n        element.is_listed == True or element.is_field_evaluated == True\n        element.is_labeled == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.2\"\n    must:\n        element.complies_with_nec_2020 == True\n        element.is_listed == True or element.is_field_evaluated == True\n        element.is_labeled == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.2\"\n    reference: \"FL.Residential.2023.Ch34-NEC.110.2\"", "rule_name": "electrical_code_compliance"}
{"type": "bcl_to_physics", "input": "rule electrical_code_compliance with conditions: element.complies_with_nec_2020 == True, element.is_listed == True or element.is_field_evaluated == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.110.2", "rule_name": "electrical_code_compliance"}
{"type": "bcl_completion", "input": "rule electrical_code_compliance:\n    where:\n        element.type in [\"electrical_component\", \"electrical_system\"]\n    # Complete this rule", "output": "rule electrical_code_compliance:\n    where:\n        element.type in [\"electrical_component\", \"electrical_system\"]\n        must:\n        element.complies_with_nec_2020 == True\n        element.is_listed == True or element.is_field_evaluated == True\n        element.is_labeled == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.2\"\n    must:\n        element.complies_with_nec_2020 == True\n        element.is_listed == True or element.is_field_evaluated == True\n        element.is_labeled == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.2\"\n    reference: \"FL.Residential.2023.Ch34-NEC.110.2\"", "rule_name": "electrical_code_compliance"}
{"type": "legal_to_bcl", "input": "Requirement for gfci protection required: When element.type == \"receptacle_outlet\" and element.location in [\"bathroom\", \"garage\", \"outdoor\", \"crawl_space\",, it is required that element.has_gfci_protection == True and element.gfci_device_location == \"readily_accessible\"", "output": "rule gfci_protection_required:\n    where:\n        element.type == \"receptacle_outlet\"\n        element.location in [\"bathroom\", \"garage\", \"outdoor\", \"crawl_space\",\n        \"unfinished_basement\", \"kitchen_sink_area\", \"laundry_area\"]\n        must:\n        element.has_gfci_protection == True\n        element.gfci_device_location == \"readily_accessible\"\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    must:\n        element.has_gfci_protection == True\n        element.gfci_device_location == \"readily_accessible\"\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.8\"", "rule_name": "gfci_protection_required"}
{"type": "bcl_to_physics", "input": "rule gfci_protection_required with conditions: element.has_gfci_protection == True, element.gfci_device_location == \"readily_accessible\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.210.8", "rule_name": "gfci_protection_required"}
{"type": "bcl_completion", "input": "rule gfci_protection_required:\n    where:\n        element.type == \"receptacle_outlet\"\n    # Complete this rule", "output": "rule gfci_protection_required:\n    where:\n        element.type == \"receptacle_outlet\"\n        element.location in [\"bathroom\", \"garage\", \"outdoor\", \"crawl_space\",\n        \"unfinished_basement\", \"kitchen_sink_area\", \"laundry_area\"]\n        must:\n        element.has_gfci_protection == True\n        element.gfci_device_location == \"readily_accessible\"\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    must:\n        element.has_gfci_protection == True\n        element.gfci_device_location == \"readily_accessible\"\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.8\"", "rule_name": "gfci_protection_required"}
{"type": "legal_to_bcl", "input": "Requirement for gfci kitchen requirements: When element.type == \"receptacle_outlet\" and element.location == \"kitchen\", it is required that element.has_gfci_protection == True and reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"", "output": "rule gfci_kitchen_requirements:\n    where:\n        element.type == \"receptacle_outlet\"\n        element.location == \"kitchen\"\n        distance.to_sink_edge(element) <= 6.feet\n        must:\n        element.has_gfci_protection == True\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"\n    must:\n        element.has_gfci_protection == True\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"", "rule_name": "gfci_kitchen_requirements"}
{"type": "bcl_to_physics", "input": "rule gfci_kitchen_requirements with conditions: element.has_gfci_protection == True, reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.210.8(A)(6)", "rule_name": "gfci_kitchen_requirements"}
{"type": "bcl_completion", "input": "rule gfci_kitchen_requirements:\n    where:\n        element.type == \"receptacle_outlet\"\n    # Complete this rule", "output": "rule gfci_kitchen_requirements:\n    where:\n        element.type == \"receptacle_outlet\"\n        element.location == \"kitchen\"\n        distance.to_sink_edge(element) <= 6.feet\n        must:\n        element.has_gfci_protection == True\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"\n    must:\n        element.has_gfci_protection == True\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.8(A)(6)\"", "rule_name": "gfci_kitchen_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for gfci response time: When element.type == \"gfci_device\" and must:, it is required that element.trip_current_range == [4, 6].milliamperes and element.trip_time <= 0.025.seconds  # At 6mA ground fault", "output": "rule gfci_response_time:\n    where:\n        element.type == \"gfci_device\"\n        must:\n        element.trip_current_range == [4, 6].milliamperes\n        element.trip_time <= 0.025.seconds  # At 6mA ground fault\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    must:\n        element.trip_current_range == [4, 6].milliamperes\n        element.trip_time <= 0.025.seconds  # At 6mA ground fault\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch34-NEC.210.8\"", "rule_name": "gfci_response_time"}
{"type": "bcl_to_physics", "input": "rule gfci_response_time with constraints: trip_time", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Residential.2023.Ch34-NEC.210.8", "rule_name": "gfci_response_time"}
{"type": "bcl_completion", "input": "rule gfci_response_time:\n    where:\n        element.type == \"gfci_device\"\n    # Complete this rule", "output": "rule gfci_response_time:\n    where:\n        element.type == \"gfci_device\"\n        must:\n        element.trip_current_range == [4, 6].milliamperes\n        element.trip_time <= 0.025.seconds  # At 6mA ground fault\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    must:\n        element.trip_current_range == [4, 6].milliamperes\n        element.trip_time <= 0.025.seconds  # At 6mA ground fault\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch34-NEC.210.8\"\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch34-NEC.210.8\"", "rule_name": "gfci_response_time"}
{"type": "safety_factor_reasoning", "input": "For gfci_response_time rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.Ch34-NEC.210.8.", "rule_name": "gfci_response_time", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for afci protection required: When element.type == \"branch_circuit\" and element.supplies in [\"living_room\", \"bedroom\", \"hallway\", \"closet\", \"den\", \"library\"], it is required that element.has_afci_protection == True and element.afci_type in [\"combination\", \"outlet_branch_circuit\"]", "output": "rule afci_protection_required:\n    where:\n        element.type == \"branch_circuit\"\n        element.supplies in [\"living_room\", \"bedroom\", \"hallway\", \"closet\", \"den\", \"library\"]\n        must:\n        element.has_afci_protection == True\n        element.afci_type in [\"combination\", \"outlet_branch_circuit\"]\n        reference: \"FL.Residential.2023.Ch34-NEC.210.12\"\n    must:\n        element.has_afci_protection == True\n        element.afci_type in [\"combination\", \"outlet_branch_circuit\"]\n        reference: \"FL.Residential.2023.Ch34-NEC.210.12\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.12\"", "rule_name": "afci_protection_required"}
{"type": "bcl_to_physics", "input": "rule afci_protection_required with conditions: element.has_afci_protection == True, element.afci_type in [\"combination\", \"outlet_branch_circuit\"]", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.210.12", "rule_name": "afci_protection_required"}
{"type": "bcl_completion", "input": "rule afci_protection_required:\n    where:\n        element.type == \"branch_circuit\"\n    # Complete this rule", "output": "rule afci_protection_required:\n    where:\n        element.type == \"branch_circuit\"\n        element.supplies in [\"living_room\", \"bedroom\", \"hallway\", \"closet\", \"den\", \"library\"]\n        must:\n        element.has_afci_protection == True\n        element.afci_type in [\"combination\", \"outlet_branch_circuit\"]\n        reference: \"FL.Residential.2023.Ch34-NEC.210.12\"\n    must:\n        element.has_afci_protection == True\n        element.afci_type in [\"combination\", \"outlet_branch_circuit\"]\n        reference: \"FL.Residential.2023.Ch34-NEC.210.12\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.12\"", "rule_name": "afci_protection_required"}
{"type": "legal_to_bcl", "input": "Requirement for receptacle wall spacing: When element.type == \"wall\" and element.location in [\"living_area\", \"bedroom\", \"den\"], it is required that element.max_distance_to_receptacle <= 6.feet and element.receptacle_spacing <= 12.feet", "output": "rule receptacle_wall_spacing:\n    where:\n        element.type == \"wall\"\n        element.location in [\"living_area\", \"bedroom\", \"den\"]\n        element.length >= 2.feet\n        must:\n        element.max_distance_to_receptacle <= 6.feet\n        element.receptacle_spacing <= 12.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(A)\"\n    must:\n        element.max_distance_to_receptacle <= 6.feet\n        element.receptacle_spacing <= 12.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(A)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.52(A)\"", "rule_name": "receptacle_wall_spacing"}
{"type": "bcl_to_physics", "input": "rule receptacle_wall_spacing with constraints: length, max_distance_to_receptacle", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.210.52(A)", "rule_name": "receptacle_wall_spacing"}
{"type": "bcl_completion", "input": "rule receptacle_wall_spacing:\n    where:\n        element.type == \"wall\"\n    # Complete this rule", "output": "rule receptacle_wall_spacing:\n    where:\n        element.type == \"wall\"\n        element.location in [\"living_area\", \"bedroom\", \"den\"]\n        element.length >= 2.feet\n        must:\n        element.max_distance_to_receptacle <= 6.feet\n        element.receptacle_spacing <= 12.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(A)\"\n    must:\n        element.max_distance_to_receptacle <= 6.feet\n        element.receptacle_spacing <= 12.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(A)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.52(A)\"", "rule_name": "receptacle_wall_spacing"}
{"type": "legal_to_bcl", "input": "Requirement for receptacle counter spacing: When element.type == \"kitchen_counter\" and element.wall_length >= 12.inches, it is required that element.max_distance_to_receptacle <= 2.feet and element.receptacle_spacing <= 4.feet", "output": "rule receptacle_counter_spacing:\n    where:\n        element.type == \"kitchen_counter\"\n        element.wall_length >= 12.inches\n        must:\n        element.max_distance_to_receptacle <= 2.feet\n        element.receptacle_spacing <= 4.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(C)\"\n    must:\n        element.max_distance_to_receptacle <= 2.feet\n        element.receptacle_spacing <= 4.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(C)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.52(C)\"", "rule_name": "receptacle_counter_spacing"}
{"type": "bcl_to_physics", "input": "rule receptacle_counter_spacing with constraints: wall_length, max_distance_to_receptacle", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.210.52(C)", "rule_name": "receptacle_counter_spacing"}
{"type": "bcl_completion", "input": "rule receptacle_counter_spacing:\n    where:\n        element.type == \"kitchen_counter\"\n    # Complete this rule", "output": "rule receptacle_counter_spacing:\n    where:\n        element.type == \"kitchen_counter\"\n        element.wall_length >= 12.inches\n        must:\n        element.max_distance_to_receptacle <= 2.feet\n        element.receptacle_spacing <= 4.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(C)\"\n    must:\n        element.max_distance_to_receptacle <= 2.feet\n        element.receptacle_spacing <= 4.feet\n        reference: \"FL.Residential.2023.Ch34-NEC.210.52(C)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.210.52(C)\"", "rule_name": "receptacle_counter_spacing"}
{"type": "legal_to_bcl", "input": "Requirement for electrical panel working space: When element.type == \"electrical_panel\" and element.voltage <= 600.volts, it is required that element.working_space_depth >= 3.feet and element.working_space_width >= 30.inches", "output": "rule electrical_panel_working_space:\n    where:\n        element.type == \"electrical_panel\"\n        element.voltage <= 600.volts\n        must:\n        element.working_space_depth >= 3.feet\n        element.working_space_width >= 30.inches\n        element.working_space_height >= 6.5.feet\n        element.working_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26\"\n    must:\n        element.working_space_depth >= 3.feet\n        element.working_space_width >= 30.inches\n        element.working_space_height >= 6.5.feet\n        element.working_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26\"\n    reference: \"FL.Residential.2023.Ch34-NEC.110.26\"", "rule_name": "electrical_panel_working_space"}
{"type": "bcl_to_physics", "input": "rule electrical_panel_working_space with constraints: voltage, working_space_depth", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.110.26", "rule_name": "electrical_panel_working_space"}
{"type": "bcl_completion", "input": "rule electrical_panel_working_space:\n    where:\n        element.type == \"electrical_panel\"\n    # Complete this rule", "output": "rule electrical_panel_working_space:\n    where:\n        element.type == \"electrical_panel\"\n        element.voltage <= 600.volts\n        must:\n        element.working_space_depth >= 3.feet\n        element.working_space_width >= 30.inches\n        element.working_space_height >= 6.5.feet\n        element.working_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26\"\n    must:\n        element.working_space_depth >= 3.feet\n        element.working_space_width >= 30.inches\n        element.working_space_height >= 6.5.feet\n        element.working_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26\"\n    reference: \"FL.Residential.2023.Ch34-NEC.110.26\"", "rule_name": "electrical_panel_working_space"}
{"type": "legal_to_bcl", "input": "Requirement for electrical panel dedicated space: When element.type == \"electrical_panel\" and must:, it is required that element.dedicated_space_above >= 6.feet  # Or to ceiling and element.dedicated_space_width == element.equipment_width", "output": "rule electrical_panel_dedicated_space:\n    where:\n        element.type == \"electrical_panel\"\n        must:\n        element.dedicated_space_above >= 6.feet  # Or to ceiling\n        element.dedicated_space_width == element.equipment_width\n        element.dedicated_space_depth == element.equipment_depth\n        element.dedicated_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26(E)\"\n    must:\n        element.dedicated_space_above >= 6.feet  # Or to ceiling\n        element.dedicated_space_width == element.equipment_width\n        element.dedicated_space_depth == element.equipment_depth\n        element.dedicated_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26(E)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.110.26(E)\"", "rule_name": "electrical_panel_dedicated_space"}
{"type": "bcl_to_physics", "input": "rule electrical_panel_dedicated_space with constraints: dedicated_space_above", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.110.26(E)", "rule_name": "electrical_panel_dedicated_space"}
{"type": "bcl_completion", "input": "rule electrical_panel_dedicated_space:\n    where:\n        element.type == \"electrical_panel\"\n    # Complete this rule", "output": "rule electrical_panel_dedicated_space:\n    where:\n        element.type == \"electrical_panel\"\n        must:\n        element.dedicated_space_above >= 6.feet  # Or to ceiling\n        element.dedicated_space_width == element.equipment_width\n        element.dedicated_space_depth == element.equipment_depth\n        element.dedicated_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26(E)\"\n    must:\n        element.dedicated_space_above >= 6.feet  # Or to ceiling\n        element.dedicated_space_width == element.equipment_width\n        element.dedicated_space_depth == element.equipment_depth\n        element.dedicated_space_clear == True\n        reference: \"FL.Residential.2023.Ch34-NEC.110.26(E)\"\n    reference: \"FL.Residential.2023.Ch34-NEC.110.26(E)\"", "rule_name": "electrical_panel_dedicated_space"}
{"type": "legal_to_bcl", "input": "Requirement for grounding electrode system: When element.type == \"electrical_service\" and must:, it is required that element.has_grounding_electrode_system == True and element.electrode_types.includes_any([", "output": "rule grounding_electrode_system:\n    where:\n        element.type == \"electrical_service\"\n        must:\n        element.has_grounding_electrode_system == True\n        element.electrode_types.includes_any([\n        \"metal_water_pipe\",\n        \"concrete_encased_electrode\",\n        \"ground_rod\",\n        \"ground_plate\"\n        ])\n        reference: \"FL.Residential.2023.Ch34-NEC.250.50\"\n    must:\n        element.has_grounding_electrode_system == True\n        element.electrode_types.includes_any([\n        \"metal_water_pipe\",\n        \"concrete_encased_electrode\",\n        \"ground_rod\",\n        \"ground_plate\"\n        ])\n        reference: \"FL.Residential.2023.Ch34-NEC.250.50\"\n    reference: \"FL.Residential.2023.Ch34-NEC.250.50\"", "rule_name": "grounding_electrode_system"}
{"type": "bcl_to_physics", "input": "rule grounding_electrode_system with conditions: element.has_grounding_electrode_system == True, element.electrode_types.includes_any([", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch34-NEC.250.50", "rule_name": "grounding_electrode_system"}
{"type": "bcl_completion", "input": "rule grounding_electrode_system:\n    where:\n        element.type == \"electrical_service\"\n    # Complete this rule", "output": "rule grounding_electrode_system:\n    where:\n        element.type == \"electrical_service\"\n        must:\n        element.has_grounding_electrode_system == True\n        element.electrode_types.includes_any([\n        \"metal_water_pipe\",\n        \"concrete_encased_electrode\",\n        \"ground_rod\",\n        \"ground_plate\"\n        ])\n        reference: \"FL.Residential.2023.Ch34-NEC.250.50\"\n    must:\n        element.has_grounding_electrode_system == True\n        element.electrode_types.includes_any([\n        \"metal_water_pipe\",\n        \"concrete_encased_electrode\",\n        \"ground_rod\",\n        \"ground_plate\"\n        ])\n        reference: \"FL.Residential.2023.Ch34-NEC.250.50\"\n    reference: \"FL.Residential.2023.Ch34-NEC.250.50\"", "rule_name": "grounding_electrode_system"}
{"type": "legal_to_bcl", "input": "Requirement for equipment grounding conductor: When element.type == \"branch_circuit\" and must:, it is required that element.has_equipment_grounding_conductor == True and element.egc_size >= electrical.minimum_egc_size(element.overcurrent_device_rating)", "output": "rule equipment_grounding_conductor:\n    where:\n        element.type == \"branch_circuit\"\n        must:\n        element.has_equipment_grounding_conductor == True\n        element.egc_size >= electrical.minimum_egc_size(element.overcurrent_device_rating)\n        reference: \"FL.Residential.2023.Ch34-NEC.250.122\"\n        constraint electrical_voltage_drop:\n        where:\n        element.type in [\"feeder\", \"branch_circuit\"]\n        require:\n        if element.circuit_type == \"feeder\":\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        else:  # Branch circuit\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        electrical.total_voltage_drop(element) <= 0.05 * element.nominal_voltage  # 5%\n        safety_factor: 1.0\n        constraint conductor_ampacity:\n        where:\n        element.type == \"conductor\"\n        require:\n        electrical.corrected_ampacity(\n        element.base_ampacity,\n        element.ambient_temperature,\n        element.number_of_conductors\n        ) >= element.circuit_load\n        safety_factor: 1.25\n        constraint fault_current_capacity:\n        where:\n        element.type in [\"conductor\", \"equipment\"]\n        require:\n        element.fault_current_rating >= electrical.available_fault_current(element.location)\n        safety_factor: 1.0\n        constraint ground_fault_impedance:\n        where:\n        element.type == \"grounding_system\"\n        require:\n        electrical.ground_fault_impedance(element) <= electrical.max_impedance_for_clearing(\n        element.overcurrent_device_rating,\n        element.clearing_time\n        )\n        safety_factor: 1.5\n        constraint arc_flash_boundary:\n        where:\n        element.type == \"electrical_equipment\"\n        element.voltage >= 50.volts\n        require:\n        element.has_arc_flash_label == True\n        element.working_distance >= electrical.arc_flash_boundary(\n        element.available_fault_current,\n        element.clearing_time\n        )\n    must:\n        element.has_equipment_grounding_conductor == True\n        element.egc_size >= electrical.minimum_egc_size(element.overcurrent_device_rating)\n        reference: \"FL.Residential.2023.Ch34-NEC.250.122\"\n        constraint electrical_voltage_drop:\n        where:\n        element.type in [\"feeder\", \"branch_circuit\"]\n        require:\n        if element.circuit_type == \"feeder\":\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        else:  # Branch circuit\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        electrical.total_voltage_drop(element) <= 0.05 * element.nominal_voltage  # 5%\n        safety_factor: 1.0\n        constraint conductor_ampacity:\n        where:\n        element.type == \"conductor\"\n        require:\n        electrical.corrected_ampacity(\n        element.base_ampacity,\n        element.ambient_temperature,\n        element.number_of_conductors\n        ) >= element.circuit_load\n        safety_factor: 1.25\n        constraint fault_current_capacity:\n        where:\n        element.type in [\"conductor\", \"equipment\"]\n        require:\n        element.fault_current_rating >= electrical.available_fault_current(element.location)\n        safety_factor: 1.0\n        constraint ground_fault_impedance:\n        where:\n        element.type == \"grounding_system\"\n        require:\n        electrical.ground_fault_impedance(element) <= electrical.max_impedance_for_clearing(\n        element.overcurrent_device_rating,\n        element.clearing_time\n        )\n        safety_factor: 1.5\n        constraint arc_flash_boundary:\n        where:\n        element.type == \"electrical_equipment\"\n        element.voltage >= 50.volts\n        require:\n        element.has_arc_flash_label == True\n        element.working_distance >= electrical.arc_flash_boundary(\n        element.available_fault_current,\n        element.clearing_time\n        )\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch34-NEC.250.122\"", "rule_name": "equipment_grounding_conductor"}
{"type": "bcl_to_physics", "input": "rule equipment_grounding_conductor with constraints: voltage", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.Ch34-NEC.250.122", "rule_name": "equipment_grounding_conductor"}
{"type": "bcl_completion", "input": "rule equipment_grounding_conductor:\n    where:\n        element.type == \"branch_circuit\"\n    # Complete this rule", "output": "rule equipment_grounding_conductor:\n    where:\n        element.type == \"branch_circuit\"\n        must:\n        element.has_equipment_grounding_conductor == True\n        element.egc_size >= electrical.minimum_egc_size(element.overcurrent_device_rating)\n        reference: \"FL.Residential.2023.Ch34-NEC.250.122\"\n        constraint electrical_voltage_drop:\n        where:\n        element.type in [\"feeder\", \"branch_circuit\"]\n        require:\n        if element.circuit_type == \"feeder\":\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        else:  # Branch circuit\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        electrical.total_voltage_drop(element) <= 0.05 * element.nominal_voltage  # 5%\n        safety_factor: 1.0\n        constraint conductor_ampacity:\n        where:\n        element.type == \"conductor\"\n        require:\n        electrical.corrected_ampacity(\n        element.base_ampacity,\n        element.ambient_temperature,\n        element.number_of_conductors\n        ) >= element.circuit_load\n        safety_factor: 1.25\n        constraint fault_current_capacity:\n        where:\n        element.type in [\"conductor\", \"equipment\"]\n        require:\n        element.fault_current_rating >= electrical.available_fault_current(element.location)\n        safety_factor: 1.0\n        constraint ground_fault_impedance:\n        where:\n        element.type == \"grounding_system\"\n        require:\n        electrical.ground_fault_impedance(element) <= electrical.max_impedance_for_clearing(\n        element.overcurrent_device_rating,\n        element.clearing_time\n        )\n        safety_factor: 1.5\n        constraint arc_flash_boundary:\n        where:\n        element.type == \"electrical_equipment\"\n        element.voltage >= 50.volts\n        require:\n        element.has_arc_flash_label == True\n        element.working_distance >= electrical.arc_flash_boundary(\n        element.available_fault_current,\n        element.clearing_time\n        )\n    must:\n        element.has_equipment_grounding_conductor == True\n        element.egc_size >= electrical.minimum_egc_size(element.overcurrent_device_rating)\n        reference: \"FL.Residential.2023.Ch34-NEC.250.122\"\n        constraint electrical_voltage_drop:\n        where:\n        element.type in [\"feeder\", \"branch_circuit\"]\n        require:\n        if element.circuit_type == \"feeder\":\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        else:  # Branch circuit\n        electrical.voltage_drop(element) <= 0.03 * element.nominal_voltage  # 3%\n        electrical.total_voltage_drop(element) <= 0.05 * element.nominal_voltage  # 5%\n        safety_factor: 1.0\n        constraint conductor_ampacity:\n        where:\n        element.type == \"conductor\"\n        require:\n        electrical.corrected_ampacity(\n        element.base_ampacity,\n        element.ambient_temperature,\n        element.number_of_conductors\n        ) >= element.circuit_load\n        safety_factor: 1.25\n        constraint fault_current_capacity:\n        where:\n        element.type in [\"conductor\", \"equipment\"]\n        require:\n        element.fault_current_rating >= electrical.available_fault_current(element.location)\n        safety_factor: 1.0\n        constraint ground_fault_impedance:\n        where:\n        element.type == \"grounding_system\"\n        require:\n        electrical.ground_fault_impedance(element) <= electrical.max_impedance_for_clearing(\n        element.overcurrent_device_rating,\n        element.clearing_time\n        )\n        safety_factor: 1.5\n        constraint arc_flash_boundary:\n        where:\n        element.type == \"electrical_equipment\"\n        element.voltage >= 50.volts\n        require:\n        element.has_arc_flash_label == True\n        element.working_distance >= electrical.arc_flash_boundary(\n        element.available_fault_current,\n        element.clearing_time\n        )\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch34-NEC.250.122\"", "rule_name": "equipment_grounding_conductor"}
{"type": "safety_factor_reasoning", "input": "For equipment_grounding_conductor rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.Ch34-NEC.250.122.", "rule_name": "equipment_grounding_conductor", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for residential service limits: When element.type == \"electrical_service\" and element.building_type in [\"one_family\", \"two_family\", \"townhouse\"], it is required that element.voltage <= 240.volts and element.amperage <= 400.amperes", "output": "rule residential_service_limits:\n    where:\n        element.type == \"electrical_service\"\n        element.building_type in [\"one_family\", \"two_family\", \"townhouse\"]\n        must:\n        element.voltage <= 240.volts\n        element.amperage <= 400.amperes\n        element.phases == 1\n        element.services_per_building == 1  # With exceptions\n        reference: \"FL.Residential.2023.Ch35-NEC.230.2\"\n    must:\n        element.voltage <= 240.volts\n        element.amperage <= 400.amperes\n        element.phases == 1\n        element.services_per_building == 1  # With exceptions\n        reference: \"FL.Residential.2023.Ch35-NEC.230.2\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.2\"", "rule_name": "residential_service_limits"}
{"type": "bcl_to_physics", "input": "rule residential_service_limits with constraints: voltage, amperage", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.230.2", "rule_name": "residential_service_limits"}
{"type": "bcl_completion", "input": "rule residential_service_limits:\n    where:\n        element.type == \"electrical_service\"\n    # Complete this rule", "output": "rule residential_service_limits:\n    where:\n        element.type == \"electrical_service\"\n        element.building_type in [\"one_family\", \"two_family\", \"townhouse\"]\n        must:\n        element.voltage <= 240.volts\n        element.amperage <= 400.amperes\n        element.phases == 1\n        element.services_per_building == 1  # With exceptions\n        reference: \"FL.Residential.2023.Ch35-NEC.230.2\"\n    must:\n        element.voltage <= 240.volts\n        element.amperage <= 400.amperes\n        element.phases == 1\n        element.services_per_building == 1  # With exceptions\n        reference: \"FL.Residential.2023.Ch35-NEC.230.2\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.2\"", "rule_name": "residential_service_limits"}
{"type": "legal_to_bcl", "input": "Requirement for service conductor sizing: When element.type == \"service_conductor\" and must:, it is required that if element.serves == \"single_family_dwelling\": and element.ampacity >= 100.amperes", "output": "rule service_conductor_sizing:\n    where:\n        element.type == \"service_conductor\"\n        must:\n        if element.serves == \"single_family_dwelling\":\n        element.ampacity >= 100.amperes\n        element.conductor_size >= \"8_AWG_copper\" or element.conductor_size >= \"6_AWG_aluminum\"\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.25\n        reference: \"FL.Residential.2023.Ch35-NEC.230.42\"\n    must:\n        if element.serves == \"single_family_dwelling\":\n        element.ampacity >= 100.amperes\n        element.conductor_size >= \"8_AWG_copper\" or element.conductor_size >= \"6_AWG_aluminum\"\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.25\n        reference: \"FL.Residential.2023.Ch35-NEC.230.42\"\n    safety_factor: 1.25\n    reference: \"FL.Residential.2023.Ch35-NEC.230.42\"", "rule_name": "service_conductor_sizing"}
{"type": "bcl_to_physics", "input": "rule service_conductor_sizing with constraints: ampacity", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.25 is applied to account for uncertainties. Reference: FL.Residential.2023.Ch35-NEC.230.42", "rule_name": "service_conductor_sizing"}
{"type": "bcl_completion", "input": "rule service_conductor_sizing:\n    where:\n        element.type == \"service_conductor\"\n    # Complete this rule", "output": "rule service_conductor_sizing:\n    where:\n        element.type == \"service_conductor\"\n        must:\n        if element.serves == \"single_family_dwelling\":\n        element.ampacity >= 100.amperes\n        element.conductor_size >= \"8_AWG_copper\" or element.conductor_size >= \"6_AWG_aluminum\"\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.25\n        reference: \"FL.Residential.2023.Ch35-NEC.230.42\"\n    must:\n        if element.serves == \"single_family_dwelling\":\n        element.ampacity >= 100.amperes\n        element.conductor_size >= \"8_AWG_copper\" or element.conductor_size >= \"6_AWG_aluminum\"\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.25\n        reference: \"FL.Residential.2023.Ch35-NEC.230.42\"\n    safety_factor: 1.25\n    reference: \"FL.Residential.2023.Ch35-NEC.230.42\"", "rule_name": "service_conductor_sizing"}
{"type": "safety_factor_reasoning", "input": "For service_conductor_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.25 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.Ch35-NEC.230.42.", "rule_name": "service_conductor_sizing", "safety_factor": 1.25}
{"type": "legal_to_bcl", "input": "Requirement for service drop clearances: When element.type == \"service_drop_conductor\" and must:, it is required that if element.above == \"public_road\": and element.clearance >= 18.feet", "output": "rule service_drop_clearances:\n    where:\n        element.type == \"service_drop_conductor\"\n        must:\n        if element.above == \"public_road\":\n        element.clearance >= 18.feet\n        elif element.above == \"residential_driveway\":\n        element.clearance >= 12.feet\n        elif element.above == \"sidewalk\":\n        element.clearance >= 12.feet\n        elif element.above == \"residential_property\":\n        element.clearance >= 10.feet\n        reference: \"FL.Residential.2023.Ch35-NEC.230.24(B)\"\n    must:\n        if element.above == \"public_road\":\n        element.clearance >= 18.feet\n        elif element.above == \"residential_driveway\":\n        element.clearance >= 12.feet\n        elif element.above == \"sidewalk\":\n        element.clearance >= 12.feet\n        elif element.above == \"residential_property\":\n        element.clearance >= 10.feet\n        reference: \"FL.Residential.2023.Ch35-NEC.230.24(B)\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.24(B)\"", "rule_name": "service_drop_clearances"}
{"type": "bcl_to_physics", "input": "rule service_drop_clearances with constraints: clearance, clearance", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.230.24(B)", "rule_name": "service_drop_clearances"}
{"type": "bcl_completion", "input": "rule service_drop_clearances:\n    where:\n        element.type == \"service_drop_conductor\"\n    # Complete this rule", "output": "rule service_drop_clearances:\n    where:\n        element.type == \"service_drop_conductor\"\n        must:\n        if element.above == \"public_road\":\n        element.clearance >= 18.feet\n        elif element.above == \"residential_driveway\":\n        element.clearance >= 12.feet\n        elif element.above == \"sidewalk\":\n        element.clearance >= 12.feet\n        elif element.above == \"residential_property\":\n        element.clearance >= 10.feet\n        reference: \"FL.Residential.2023.Ch35-NEC.230.24(B)\"\n    must:\n        if element.above == \"public_road\":\n        element.clearance >= 18.feet\n        elif element.above == \"residential_driveway\":\n        element.clearance >= 12.feet\n        elif element.above == \"sidewalk\":\n        element.clearance >= 12.feet\n        elif element.above == \"residential_property\":\n        element.clearance >= 10.feet\n        reference: \"FL.Residential.2023.Ch35-NEC.230.24(B)\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.24(B)\"", "rule_name": "service_drop_clearances"}
{"type": "legal_to_bcl", "input": "Requirement for service clearance from windows: When element.type == \"service_conductor\" and element.location == \"exterior\", it is required that element.clearance_from_windows >= 3.feet and element.clearance_from_doors >= 3.feet", "output": "rule service_clearance_from_windows:\n    where:\n        element.type == \"service_conductor\"\n        element.location == \"exterior\"\n        must:\n        element.clearance_from_windows >= 3.feet\n        element.clearance_from_doors >= 3.feet\n        element.clearance_from_porches >= 3.feet\n        element.installed_below_opening == False\n        reference: \"FL.Residential.2023.Ch35-NEC.230.9\"\n    must:\n        element.clearance_from_windows >= 3.feet\n        element.clearance_from_doors >= 3.feet\n        element.clearance_from_porches >= 3.feet\n        element.installed_below_opening == False\n        reference: \"FL.Residential.2023.Ch35-NEC.230.9\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.9\"", "rule_name": "service_clearance_from_windows"}
{"type": "bcl_to_physics", "input": "rule service_clearance_from_windows with constraints: clearance_from_windows, clearance_from_doors", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.230.9", "rule_name": "service_clearance_from_windows"}
{"type": "bcl_completion", "input": "rule service_clearance_from_windows:\n    where:\n        element.type == \"service_conductor\"\n    # Complete this rule", "output": "rule service_clearance_from_windows:\n    where:\n        element.type == \"service_conductor\"\n        element.location == \"exterior\"\n        must:\n        element.clearance_from_windows >= 3.feet\n        element.clearance_from_doors >= 3.feet\n        element.clearance_from_porches >= 3.feet\n        element.installed_below_opening == False\n        reference: \"FL.Residential.2023.Ch35-NEC.230.9\"\n    must:\n        element.clearance_from_windows >= 3.feet\n        element.clearance_from_doors >= 3.feet\n        element.clearance_from_porches >= 3.feet\n        element.installed_below_opening == False\n        reference: \"FL.Residential.2023.Ch35-NEC.230.9\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.9\"", "rule_name": "service_clearance_from_windows"}
{"type": "legal_to_bcl", "input": "Requirement for service attachment height: When element.type == \"service_drop_attachment\" and must:, it is required that element.height_above_grade >= 10.feet and if element.uses_service_mast:", "output": "rule service_attachment_height:\n    where:\n        element.type == \"service_drop_attachment\"\n        must:\n        element.height_above_grade >= 10.feet\n        if element.uses_service_mast:\n        element.mast_extends_above_roof >= 18.inches\n        reference: \"FL.Residential.2023.Ch35-NEC.230.26\"\n    must:\n        element.height_above_grade >= 10.feet\n        if element.uses_service_mast:\n        element.mast_extends_above_roof >= 18.inches\n        reference: \"FL.Residential.2023.Ch35-NEC.230.26\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.26\"", "rule_name": "service_attachment_height"}
{"type": "bcl_to_physics", "input": "rule service_attachment_height with constraints: height_above_grade, mast_extends_above_roof", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.230.26", "rule_name": "service_attachment_height"}
{"type": "bcl_completion", "input": "rule service_attachment_height:\n    where:\n        element.type == \"service_drop_attachment\"\n    # Complete this rule", "output": "rule service_attachment_height:\n    where:\n        element.type == \"service_drop_attachment\"\n        must:\n        element.height_above_grade >= 10.feet\n        if element.uses_service_mast:\n        element.mast_extends_above_roof >= 18.inches\n        reference: \"FL.Residential.2023.Ch35-NEC.230.26\"\n    must:\n        element.height_above_grade >= 10.feet\n        if element.uses_service_mast:\n        element.mast_extends_above_roof >= 18.inches\n        reference: \"FL.Residential.2023.Ch35-NEC.230.26\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.26\"", "rule_name": "service_attachment_height"}
{"type": "legal_to_bcl", "input": "Requirement for service disconnect requirements: When element.type == \"service_disconnect\" and must:, it is required that element.location == \"readily_accessible\" and element.location == \"nearest_point_of_entrance\"", "output": "rule service_disconnect_requirements:\n    where:\n        element.type == \"service_disconnect\"\n        must:\n        element.location == \"readily_accessible\"\n        element.location == \"nearest_point_of_entrance\"\n        element.located_outside or element.located_inside_nearest_entrance\n        element.disconnect_count <= 6\n        element.disconnects_grouped == True\n        reference: \"FL.Residential.2023.Ch35-NEC.230.70\"\n    must:\n        element.location == \"readily_accessible\"\n        element.location == \"nearest_point_of_entrance\"\n        element.located_outside or element.located_inside_nearest_entrance\n        element.disconnect_count <= 6\n        element.disconnects_grouped == True\n        reference: \"FL.Residential.2023.Ch35-NEC.230.70\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.70\"", "rule_name": "service_disconnect_requirements"}
{"type": "bcl_to_physics", "input": "rule service_disconnect_requirements with conditions: element.location == \"readily_accessible\", element.location == \"nearest_point_of_entrance\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.230.70", "rule_name": "service_disconnect_requirements"}
{"type": "bcl_completion", "input": "rule service_disconnect_requirements:\n    where:\n        element.type == \"service_disconnect\"\n    # Complete this rule", "output": "rule service_disconnect_requirements:\n    where:\n        element.type == \"service_disconnect\"\n        must:\n        element.location == \"readily_accessible\"\n        element.location == \"nearest_point_of_entrance\"\n        element.located_outside or element.located_inside_nearest_entrance\n        element.disconnect_count <= 6\n        element.disconnects_grouped == True\n        reference: \"FL.Residential.2023.Ch35-NEC.230.70\"\n    must:\n        element.location == \"readily_accessible\"\n        element.location == \"nearest_point_of_entrance\"\n        element.located_outside or element.located_inside_nearest_entrance\n        element.disconnect_count <= 6\n        element.disconnects_grouped == True\n        reference: \"FL.Residential.2023.Ch35-NEC.230.70\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.70\"", "rule_name": "service_disconnect_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for service disconnect rating: When element.type == \"service_disconnect\" and element.serves == \"dwelling_unit\", it is required that element.rating >= 100.amperes and element.poles >= 2  # For single-phase", "output": "rule service_disconnect_rating:\n    where:\n        element.type == \"service_disconnect\"\n        element.serves == \"dwelling_unit\"\n        must:\n        element.rating >= 100.amperes\n        element.poles >= 2  # For single-phase\n        reference: \"FL.Residential.2023.Ch35-NEC.230.79\"\n    must:\n        element.rating >= 100.amperes\n        element.poles >= 2  # For single-phase\n        reference: \"FL.Residential.2023.Ch35-NEC.230.79\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.79\"", "rule_name": "service_disconnect_rating"}
{"type": "bcl_to_physics", "input": "rule service_disconnect_rating with constraints: rating", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.230.79", "rule_name": "service_disconnect_rating"}
{"type": "bcl_completion", "input": "rule service_disconnect_rating:\n    where:\n        element.type == \"service_disconnect\"\n    # Complete this rule", "output": "rule service_disconnect_rating:\n    where:\n        element.type == \"service_disconnect\"\n        element.serves == \"dwelling_unit\"\n        must:\n        element.rating >= 100.amperes\n        element.poles >= 2  # For single-phase\n        reference: \"FL.Residential.2023.Ch35-NEC.230.79\"\n    must:\n        element.rating >= 100.amperes\n        element.poles >= 2  # For single-phase\n        reference: \"FL.Residential.2023.Ch35-NEC.230.79\"\n    reference: \"FL.Residential.2023.Ch35-NEC.230.79\"", "rule_name": "service_disconnect_rating"}
{"type": "legal_to_bcl", "input": "Requirement for service equipment bonding: When element.type == \"service_equipment\" and must:, it is required that element.has_main_bonding_jumper == True and element.enclosure_bonded == True", "output": "rule service_equipment_bonding:\n    where:\n        element.type == \"service_equipment\"\n        must:\n        element.has_main_bonding_jumper == True\n        element.enclosure_bonded == True\n        element.neutral_bonded_to_enclosure == True  # At service only\n        reference: \"FL.Residential.2023.Ch35-NEC.250.24\"\n    must:\n        element.has_main_bonding_jumper == True\n        element.enclosure_bonded == True\n        element.neutral_bonded_to_enclosure == True  # At service only\n        reference: \"FL.Residential.2023.Ch35-NEC.250.24\"\n    reference: \"FL.Residential.2023.Ch35-NEC.250.24\"", "rule_name": "service_equipment_bonding"}
{"type": "bcl_to_physics", "input": "rule service_equipment_bonding with conditions: element.has_main_bonding_jumper == True, element.enclosure_bonded == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.250.24", "rule_name": "service_equipment_bonding"}
{"type": "bcl_completion", "input": "rule service_equipment_bonding:\n    where:\n        element.type == \"service_equipment\"\n    # Complete this rule", "output": "rule service_equipment_bonding:\n    where:\n        element.type == \"service_equipment\"\n        must:\n        element.has_main_bonding_jumper == True\n        element.enclosure_bonded == True\n        element.neutral_bonded_to_enclosure == True  # At service only\n        reference: \"FL.Residential.2023.Ch35-NEC.250.24\"\n    must:\n        element.has_main_bonding_jumper == True\n        element.enclosure_bonded == True\n        element.neutral_bonded_to_enclosure == True  # At service only\n        reference: \"FL.Residential.2023.Ch35-NEC.250.24\"\n    reference: \"FL.Residential.2023.Ch35-NEC.250.24\"", "rule_name": "service_equipment_bonding"}
{"type": "legal_to_bcl", "input": "Requirement for meter socket location: When element.type == \"meter_socket\" and must:, it is required that element.center_height >= 4.feet and element.center_height <= 6.feet", "output": "rule meter_socket_location:\n    where:\n        element.type == \"meter_socket\"\n        must:\n        element.center_height >= 4.feet\n        element.center_height <= 6.feet\n        element.is_readily_accessible == True\n        element.working_space_complies == True\n        reference: \"FL.Residential.2023.Ch35-NEC.110.26\"\n    must:\n        element.center_height >= 4.feet\n        element.center_height <= 6.feet\n        element.is_readily_accessible == True\n        element.working_space_complies == True\n        reference: \"FL.Residential.2023.Ch35-NEC.110.26\"\n    reference: \"FL.Residential.2023.Ch35-NEC.110.26\"", "rule_name": "meter_socket_location"}
{"type": "bcl_to_physics", "input": "rule meter_socket_location with constraints: center_height, center_height", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.110.26", "rule_name": "meter_socket_location"}
{"type": "bcl_completion", "input": "rule meter_socket_location:\n    where:\n        element.type == \"meter_socket\"\n    # Complete this rule", "output": "rule meter_socket_location:\n    where:\n        element.type == \"meter_socket\"\n        must:\n        element.center_height >= 4.feet\n        element.center_height <= 6.feet\n        element.is_readily_accessible == True\n        element.working_space_complies == True\n        reference: \"FL.Residential.2023.Ch35-NEC.110.26\"\n    must:\n        element.center_height >= 4.feet\n        element.center_height <= 6.feet\n        element.is_readily_accessible == True\n        element.working_space_complies == True\n        reference: \"FL.Residential.2023.Ch35-NEC.110.26\"\n    reference: \"FL.Residential.2023.Ch35-NEC.110.26\"", "rule_name": "meter_socket_location"}
{"type": "legal_to_bcl", "input": "Requirement for service grounding conductor: When element.type == \"grounding_electrode_conductor\" and element.connects_to == \"service\", it is required that element.is_continuous == True or element.splices_are_irreversible == True and element.size >= electrical.grounding_conductor_size(", "output": "rule service_grounding_conductor:\n    where:\n        element.type == \"grounding_electrode_conductor\"\n        element.connects_to == \"service\"\n        must:\n        element.is_continuous == True or element.splices_are_irreversible == True\n        element.size >= electrical.grounding_conductor_size(\n        element.service_conductor_size\n        )\n        element.is_protected == True or element.size >= \"6_AWG\"\n        reference: \"FL.Residential.2023.Ch35-NEC.250.64\"\n    must:\n        element.is_continuous == True or element.splices_are_irreversible == True\n        element.size >= electrical.grounding_conductor_size(\n        element.service_conductor_size\n        )\n        element.is_protected == True or element.size >= \"6_AWG\"\n        reference: \"FL.Residential.2023.Ch35-NEC.250.64\"\n    reference: \"FL.Residential.2023.Ch35-NEC.250.64\"", "rule_name": "service_grounding_conductor"}
{"type": "bcl_to_physics", "input": "rule service_grounding_conductor with conditions: element.is_continuous == True or element.splices_are_irreversible == True, element.size >= electrical.grounding_conductor_size(", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.250.64", "rule_name": "service_grounding_conductor"}
{"type": "bcl_completion", "input": "rule service_grounding_conductor:\n    where:\n        element.type == \"grounding_electrode_conductor\"\n    # Complete this rule", "output": "rule service_grounding_conductor:\n    where:\n        element.type == \"grounding_electrode_conductor\"\n        element.connects_to == \"service\"\n        must:\n        element.is_continuous == True or element.splices_are_irreversible == True\n        element.size >= electrical.grounding_conductor_size(\n        element.service_conductor_size\n        )\n        element.is_protected == True or element.size >= \"6_AWG\"\n        reference: \"FL.Residential.2023.Ch35-NEC.250.64\"\n    must:\n        element.is_continuous == True or element.splices_are_irreversible == True\n        element.size >= electrical.grounding_conductor_size(\n        element.service_conductor_size\n        )\n        element.is_protected == True or element.size >= \"6_AWG\"\n        reference: \"FL.Residential.2023.Ch35-NEC.250.64\"\n    reference: \"FL.Residential.2023.Ch35-NEC.250.64\"", "rule_name": "service_grounding_conductor"}
{"type": "legal_to_bcl", "input": "Requirement for intersystem bonding: When element.type == \"service_equipment\" and must:, it is required that element.has_intersystem_bonding_termination == True and element.bonding_terminal_count >= 3", "output": "rule intersystem_bonding:\n    where:\n        element.type == \"service_equipment\"\n        must:\n        element.has_intersystem_bonding_termination == True\n        element.bonding_terminal_count >= 3\n        element.accessible_for_communications == True\n        reference: \"FL.Residential.2023.Ch35-NEC.250.94\"\n    must:\n        element.has_intersystem_bonding_termination == True\n        element.bonding_terminal_count >= 3\n        element.accessible_for_communications == True\n        reference: \"FL.Residential.2023.Ch35-NEC.250.94\"\n    reference: \"FL.Residential.2023.Ch35-NEC.250.94\"", "rule_name": "intersystem_bonding"}
{"type": "bcl_to_physics", "input": "rule intersystem_bonding with conditions: element.has_intersystem_bonding_termination == True, element.bonding_terminal_count >= 3", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch35-NEC.250.94", "rule_name": "intersystem_bonding"}
{"type": "bcl_completion", "input": "rule intersystem_bonding:\n    where:\n        element.type == \"service_equipment\"\n    # Complete this rule", "output": "rule intersystem_bonding:\n    where:\n        element.type == \"service_equipment\"\n        must:\n        element.has_intersystem_bonding_termination == True\n        element.bonding_terminal_count >= 3\n        element.accessible_for_communications == True\n        reference: \"FL.Residential.2023.Ch35-NEC.250.94\"\n    must:\n        element.has_intersystem_bonding_termination == True\n        element.bonding_terminal_count >= 3\n        element.accessible_for_communications == True\n        reference: \"FL.Residential.2023.Ch35-NEC.250.94\"\n    reference: \"FL.Residential.2023.Ch35-NEC.250.94\"", "rule_name": "intersystem_bonding"}
{"type": "legal_to_bcl", "input": "Requirement for surge protection device: When element.type == \"dwelling_unit_service\" and element.edition >= \"2020_NEC\", it is required that element.has_surge_protective_device == True and element.spd_type in [\"type_1\", \"type_2\"]", "output": "rule surge_protection_device:\n    where:\n        element.type == \"dwelling_unit_service\"\n        element.edition >= \"2020_NEC\"\n        must:\n        element.has_surge_protective_device == True\n        element.spd_type in [\"type_1\", \"type_2\"]\n        element.spd_location == \"service_equipment\"\n        reference: \"FL.Residential.2023.Ch35-NEC.230.67\"\n        constraint service_conductor_thermal:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        thermal.conductor_temperature(\n        element.current,\n        element.resistance,\n        element.ambient_temperature\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint service_mast_structural:\n        where:\n        element.type == \"service_mast\"\n        require:\n        structural.bending_stress(element) <= element.material.yield_strength / 3\n        element.total_load = sum(\n        element.conductor_weight,\n        element.ice_load,\n        element.wind_load\n        )\n        safety_factor: 2.0\n        constraint service_fault_current:\n        where:\n        element.type == \"service_equipment\"\n        require:\n        element.interrupting_rating >= electrical.available_fault_current(\n        element.transformer_size,\n        element.transformer_impedance,\n        element.conductor_length\n        )\n        safety_factor: 1.0\n        constraint service_voltage_regulation:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        electrical.voltage_drop(\n        element.length,\n        element.current,\n        element.conductor_size\n        ) <= 0.03 * element.nominal_voltage  # 3% max\n        safety_factor: 1.0\n        constraint grounding_electrode_resistance:\n        where:\n        element.type == \"grounding_electrode_system\"\n        require:\n        electrical.ground_resistance(element) <= 25.ohms\n        if electrical.ground_resistance(element) > 25.ohms:\n        element.has_supplemental_electrode == True\n        safety_factor: 1.0\n        constraint service_bonding_impedance:\n        where:\n        element.type == \"service_bonding\"\n        require:\n        electrical.bonding_impedance(element) <= 0.1.ohms\n        element.fault_current_capacity >= element.available_fault_current\n    must:\n        element.has_surge_protective_device == True\n        element.spd_type in [\"type_1\", \"type_2\"]\n        element.spd_location == \"service_equipment\"\n        reference: \"FL.Residential.2023.Ch35-NEC.230.67\"\n        constraint service_conductor_thermal:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        thermal.conductor_temperature(\n        element.current,\n        element.resistance,\n        element.ambient_temperature\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint service_mast_structural:\n        where:\n        element.type == \"service_mast\"\n        require:\n        structural.bending_stress(element) <= element.material.yield_strength / 3\n        element.total_load = sum(\n        element.conductor_weight,\n        element.ice_load,\n        element.wind_load\n        )\n        safety_factor: 2.0\n        constraint service_fault_current:\n        where:\n        element.type == \"service_equipment\"\n        require:\n        element.interrupting_rating >= electrical.available_fault_current(\n        element.transformer_size,\n        element.transformer_impedance,\n        element.conductor_length\n        )\n        safety_factor: 1.0\n        constraint service_voltage_regulation:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        electrical.voltage_drop(\n        element.length,\n        element.current,\n        element.conductor_size\n        ) <= 0.03 * element.nominal_voltage  # 3% max\n        safety_factor: 1.0\n        constraint grounding_electrode_resistance:\n        where:\n        element.type == \"grounding_electrode_system\"\n        require:\n        electrical.ground_resistance(element) <= 25.ohms\n        if electrical.ground_resistance(element) > 25.ohms:\n        element.has_supplemental_electrode == True\n        safety_factor: 1.0\n        constraint service_bonding_impedance:\n        where:\n        element.type == \"service_bonding\"\n        require:\n        electrical.bonding_impedance(element) <= 0.1.ohms\n        element.fault_current_capacity >= element.available_fault_current\n    safety_factor: 1.25\n    reference: \"FL.Residential.2023.Ch35-NEC.230.67\"", "rule_name": "surge_protection_device"}
{"type": "bcl_to_physics", "input": "rule surge_protection_device with constraints: structural.bending_stress(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.25 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.Ch35-NEC.230.67", "rule_name": "surge_protection_device"}
{"type": "bcl_completion", "input": "rule surge_protection_device:\n    where:\n        element.type == \"dwelling_unit_service\"\n    # Complete this rule", "output": "rule surge_protection_device:\n    where:\n        element.type == \"dwelling_unit_service\"\n        element.edition >= \"2020_NEC\"\n        must:\n        element.has_surge_protective_device == True\n        element.spd_type in [\"type_1\", \"type_2\"]\n        element.spd_location == \"service_equipment\"\n        reference: \"FL.Residential.2023.Ch35-NEC.230.67\"\n        constraint service_conductor_thermal:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        thermal.conductor_temperature(\n        element.current,\n        element.resistance,\n        element.ambient_temperature\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint service_mast_structural:\n        where:\n        element.type == \"service_mast\"\n        require:\n        structural.bending_stress(element) <= element.material.yield_strength / 3\n        element.total_load = sum(\n        element.conductor_weight,\n        element.ice_load,\n        element.wind_load\n        )\n        safety_factor: 2.0\n        constraint service_fault_current:\n        where:\n        element.type == \"service_equipment\"\n        require:\n        element.interrupting_rating >= electrical.available_fault_current(\n        element.transformer_size,\n        element.transformer_impedance,\n        element.conductor_length\n        )\n        safety_factor: 1.0\n        constraint service_voltage_regulation:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        electrical.voltage_drop(\n        element.length,\n        element.current,\n        element.conductor_size\n        ) <= 0.03 * element.nominal_voltage  # 3% max\n        safety_factor: 1.0\n        constraint grounding_electrode_resistance:\n        where:\n        element.type == \"grounding_electrode_system\"\n        require:\n        electrical.ground_resistance(element) <= 25.ohms\n        if electrical.ground_resistance(element) > 25.ohms:\n        element.has_supplemental_electrode == True\n        safety_factor: 1.0\n        constraint service_bonding_impedance:\n        where:\n        element.type == \"service_bonding\"\n        require:\n        electrical.bonding_impedance(element) <= 0.1.ohms\n        element.fault_current_capacity >= element.available_fault_current\n    must:\n        element.has_surge_protective_device == True\n        element.spd_type in [\"type_1\", \"type_2\"]\n        element.spd_location == \"service_equipment\"\n        reference: \"FL.Residential.2023.Ch35-NEC.230.67\"\n        constraint service_conductor_thermal:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        thermal.conductor_temperature(\n        element.current,\n        element.resistance,\n        element.ambient_temperature\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint service_mast_structural:\n        where:\n        element.type == \"service_mast\"\n        require:\n        structural.bending_stress(element) <= element.material.yield_strength / 3\n        element.total_load = sum(\n        element.conductor_weight,\n        element.ice_load,\n        element.wind_load\n        )\n        safety_factor: 2.0\n        constraint service_fault_current:\n        where:\n        element.type == \"service_equipment\"\n        require:\n        element.interrupting_rating >= electrical.available_fault_current(\n        element.transformer_size,\n        element.transformer_impedance,\n        element.conductor_length\n        )\n        safety_factor: 1.0\n        constraint service_voltage_regulation:\n        where:\n        element.type == \"service_conductor\"\n        require:\n        electrical.voltage_drop(\n        element.length,\n        element.current,\n        element.conductor_size\n        ) <= 0.03 * element.nominal_voltage  # 3% max\n        safety_factor: 1.0\n        constraint grounding_electrode_resistance:\n        where:\n        element.type == \"grounding_electrode_system\"\n        require:\n        electrical.ground_resistance(element) <= 25.ohms\n        if electrical.ground_resistance(element) > 25.ohms:\n        element.has_supplemental_electrode == True\n        safety_factor: 1.0\n        constraint service_bonding_impedance:\n        where:\n        element.type == \"service_bonding\"\n        require:\n        electrical.bonding_impedance(element) <= 0.1.ohms\n        element.fault_current_capacity >= element.available_fault_current\n    safety_factor: 1.25\n    reference: \"FL.Residential.2023.Ch35-NEC.230.67\"", "rule_name": "surge_protection_device"}
{"type": "safety_factor_reasoning", "input": "For surge_protection_device rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.25 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.Ch35-NEC.230.67.", "rule_name": "surge_protection_device", "safety_factor": 1.25}
{"type": "legal_to_bcl", "input": "Requirement for branch circuit ratings: When element.type == \"branch_circuit\" and element.serves == \"dwelling_unit\", it is required that element.rating in [15, 20, 30, 40, 50].amperes and element.conductor_ampacity >= element.overcurrent_device_rating", "output": "rule branch_circuit_ratings:\n    where:\n        element.type == \"branch_circuit\"\n        element.serves == \"dwelling_unit\"\n        must:\n        element.rating in [15, 20, 30, 40, 50].amperes\n        element.conductor_ampacity >= element.overcurrent_device_rating\n        reference: \"FL.Residential.2023.Ch36-NEC.210.3\"\n    must:\n        element.rating in [15, 20, 30, 40, 50].amperes\n        element.conductor_ampacity >= element.overcurrent_device_rating\n        reference: \"FL.Residential.2023.Ch36-NEC.210.3\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.3\"", "rule_name": "branch_circuit_ratings"}
{"type": "bcl_to_physics", "input": "rule branch_circuit_ratings with conditions: element.rating in [15, 20, 30, 40, 50].amperes, element.conductor_ampacity >= element.overcurrent_device_rating", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.210.3", "rule_name": "branch_circuit_ratings"}
{"type": "bcl_completion", "input": "rule branch_circuit_ratings:\n    where:\n        element.type == \"branch_circuit\"\n    # Complete this rule", "output": "rule branch_circuit_ratings:\n    where:\n        element.type == \"branch_circuit\"\n        element.serves == \"dwelling_unit\"\n        must:\n        element.rating in [15, 20, 30, 40, 50].amperes\n        element.conductor_ampacity >= element.overcurrent_device_rating\n        reference: \"FL.Residential.2023.Ch36-NEC.210.3\"\n    must:\n        element.rating in [15, 20, 30, 40, 50].amperes\n        element.conductor_ampacity >= element.overcurrent_device_rating\n        reference: \"FL.Residential.2023.Ch36-NEC.210.3\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.3\"", "rule_name": "branch_circuit_ratings"}
{"type": "legal_to_bcl", "input": "Requirement for small appliance circuits: When element.type == \"dwelling_unit\" and must:, it is required that element.kitchen_small_appliance_circuits >= 2 and element.small_appliance_circuit_rating == 20.amperes", "output": "rule small_appliance_circuits:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.kitchen_small_appliance_circuits >= 2\n        element.small_appliance_circuit_rating == 20.amperes\n        element.small_appliance_circuits_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(1)\"\n    must:\n        element.kitchen_small_appliance_circuits >= 2\n        element.small_appliance_circuit_rating == 20.amperes\n        element.small_appliance_circuits_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(1)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(1)\"", "rule_name": "small_appliance_circuits"}
{"type": "bcl_to_physics", "input": "rule small_appliance_circuits with conditions: element.kitchen_small_appliance_circuits >= 2, element.small_appliance_circuit_rating == 20.amperes", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.210.11(C)(1)", "rule_name": "small_appliance_circuits"}
{"type": "bcl_completion", "input": "rule small_appliance_circuits:\n    where:\n        element.type == \"dwelling_unit\"\n    # Complete this rule", "output": "rule small_appliance_circuits:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.kitchen_small_appliance_circuits >= 2\n        element.small_appliance_circuit_rating == 20.amperes\n        element.small_appliance_circuits_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(1)\"\n    must:\n        element.kitchen_small_appliance_circuits >= 2\n        element.small_appliance_circuit_rating == 20.amperes\n        element.small_appliance_circuits_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(1)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(1)\"", "rule_name": "small_appliance_circuits"}
{"type": "legal_to_bcl", "input": "Requirement for bathroom circuit requirements: When element.type == \"dwelling_unit\" and must:, it is required that element.has_bathroom_branch_circuit == True and element.bathroom_circuit_rating == 20.amperes", "output": "rule bathroom_circuit_requirements:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.has_bathroom_branch_circuit == True\n        element.bathroom_circuit_rating == 20.amperes\n        element.bathroom_circuit_serves_only_bathrooms == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(3)\"\n    must:\n        element.has_bathroom_branch_circuit == True\n        element.bathroom_circuit_rating == 20.amperes\n        element.bathroom_circuit_serves_only_bathrooms == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(3)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(3)\"", "rule_name": "bathroom_circuit_requirements"}
{"type": "bcl_to_physics", "input": "rule bathroom_circuit_requirements with conditions: element.has_bathroom_branch_circuit == True, element.bathroom_circuit_rating == 20.amperes", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.210.11(C)(3)", "rule_name": "bathroom_circuit_requirements"}
{"type": "bcl_completion", "input": "rule bathroom_circuit_requirements:\n    where:\n        element.type == \"dwelling_unit\"\n    # Complete this rule", "output": "rule bathroom_circuit_requirements:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.has_bathroom_branch_circuit == True\n        element.bathroom_circuit_rating == 20.amperes\n        element.bathroom_circuit_serves_only_bathrooms == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(3)\"\n    must:\n        element.has_bathroom_branch_circuit == True\n        element.bathroom_circuit_rating == 20.amperes\n        element.bathroom_circuit_serves_only_bathrooms == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(3)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(3)\"", "rule_name": "bathroom_circuit_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for laundry circuit requirements: When element.type == \"dwelling_unit\" and must:, it is required that element.has_laundry_circuit == True and element.laundry_circuit_rating == 20.amperes", "output": "rule laundry_circuit_requirements:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.has_laundry_circuit == True\n        element.laundry_circuit_rating == 20.amperes\n        element.laundry_circuit_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(2)\"\n    must:\n        element.has_laundry_circuit == True\n        element.laundry_circuit_rating == 20.amperes\n        element.laundry_circuit_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(2)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(2)\"", "rule_name": "laundry_circuit_requirements"}
{"type": "bcl_to_physics", "input": "rule laundry_circuit_requirements with conditions: element.has_laundry_circuit == True, element.laundry_circuit_rating == 20.amperes", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.210.11(C)(2)", "rule_name": "laundry_circuit_requirements"}
{"type": "bcl_completion", "input": "rule laundry_circuit_requirements:\n    where:\n        element.type == \"dwelling_unit\"\n    # Complete this rule", "output": "rule laundry_circuit_requirements:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.has_laundry_circuit == True\n        element.laundry_circuit_rating == 20.amperes\n        element.laundry_circuit_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(2)\"\n    must:\n        element.has_laundry_circuit == True\n        element.laundry_circuit_rating == 20.amperes\n        element.laundry_circuit_dedicated == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(2)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.11(C)(2)\"", "rule_name": "laundry_circuit_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for overcurrent device location: When element.type == \"overcurrent_device\" and element.protects == \"dwelling_unit_branch_circuit\", it is required that element.is_readily_accessible == True and element.center_height <= 6.feet_7.inches", "output": "rule overcurrent_device_location:\n    where:\n        element.type == \"overcurrent_device\"\n        element.protects == \"dwelling_unit_branch_circuit\"\n        must:\n        element.is_readily_accessible == True\n        element.center_height <= 6.feet_7.inches\n        element.location not in [\"bathroom\", \"clothes_closet\", \"over_steps\"]\n        reference: \"FL.Residential.2023.Ch36-NEC.240.24\"\n    must:\n        element.is_readily_accessible == True\n        element.center_height <= 6.feet_7.inches\n        element.location not in [\"bathroom\", \"clothes_closet\", \"over_steps\"]\n        reference: \"FL.Residential.2023.Ch36-NEC.240.24\"\n    reference: \"FL.Residential.2023.Ch36-NEC.240.24\"", "rule_name": "overcurrent_device_location"}
{"type": "bcl_to_physics", "input": "rule overcurrent_device_location with constraints: center_height", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.240.24", "rule_name": "overcurrent_device_location"}
{"type": "bcl_completion", "input": "rule overcurrent_device_location:\n    where:\n        element.type == \"overcurrent_device\"\n    # Complete this rule", "output": "rule overcurrent_device_location:\n    where:\n        element.type == \"overcurrent_device\"\n        element.protects == \"dwelling_unit_branch_circuit\"\n        must:\n        element.is_readily_accessible == True\n        element.center_height <= 6.feet_7.inches\n        element.location not in [\"bathroom\", \"clothes_closet\", \"over_steps\"]\n        reference: \"FL.Residential.2023.Ch36-NEC.240.24\"\n    must:\n        element.is_readily_accessible == True\n        element.center_height <= 6.feet_7.inches\n        element.location not in [\"bathroom\", \"clothes_closet\", \"over_steps\"]\n        reference: \"FL.Residential.2023.Ch36-NEC.240.24\"\n    reference: \"FL.Residential.2023.Ch36-NEC.240.24\"", "rule_name": "overcurrent_device_location"}
{"type": "legal_to_bcl", "input": "Requirement for afci protection branch circuits: When element.type == \"branch_circuit\" and element.voltage == 120.volts, it is required that element.has_afci_protection == True and element.afci_type == \"combination\"", "output": "rule afci_protection_branch_circuits:\n    where:\n        element.type == \"branch_circuit\"\n        element.voltage == 120.volts\n        element.supplies in [\"living_areas\", \"bedrooms\", \"hallways\", \"closets\", \"kitchens\", \"laundry_areas\"]\n        must:\n        element.has_afci_protection == True\n        element.afci_type == \"combination\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.12(A)\"\n    must:\n        element.has_afci_protection == True\n        element.afci_type == \"combination\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.12(A)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.12(A)\"", "rule_name": "afci_protection_branch_circuits"}
{"type": "bcl_to_physics", "input": "rule afci_protection_branch_circuits with conditions: element.has_afci_protection == True, element.afci_type == \"combination\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.210.12(A)", "rule_name": "afci_protection_branch_circuits"}
{"type": "bcl_completion", "input": "rule afci_protection_branch_circuits:\n    where:\n        element.type == \"branch_circuit\"\n    # Complete this rule", "output": "rule afci_protection_branch_circuits:\n    where:\n        element.type == \"branch_circuit\"\n        element.voltage == 120.volts\n        element.supplies in [\"living_areas\", \"bedrooms\", \"hallways\", \"closets\", \"kitchens\", \"laundry_areas\"]\n        must:\n        element.has_afci_protection == True\n        element.afci_type == \"combination\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.12(A)\"\n    must:\n        element.has_afci_protection == True\n        element.afci_type == \"combination\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.12(A)\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.12(A)\"", "rule_name": "afci_protection_branch_circuits"}
{"type": "legal_to_bcl", "input": "Requirement for branch circuit conductor sizing: When element.type == \"branch_circuit_conductor\" and must:, it is required that if element.circuit_rating == 15.amperes: and element.size >= \"14_AWG_copper\" or element.size >= \"12_AWG_aluminum\"", "output": "rule branch_circuit_conductor_sizing:\n    where:\n        element.type == \"branch_circuit_conductor\"\n        must:\n        if element.circuit_rating == 15.amperes:\n        element.size >= \"14_AWG_copper\" or element.size >= \"12_AWG_aluminum\"\n        elif element.circuit_rating == 20.amperes:\n        element.size >= \"12_AWG_copper\" or element.size >= \"10_AWG_aluminum\"\n        elif element.circuit_rating == 30.amperes:\n        element.size >= \"10_AWG_copper\" or element.size >= \"8_AWG_aluminum\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.19\"\n    must:\n        if element.circuit_rating == 15.amperes:\n        element.size >= \"14_AWG_copper\" or element.size >= \"12_AWG_aluminum\"\n        elif element.circuit_rating == 20.amperes:\n        element.size >= \"12_AWG_copper\" or element.size >= \"10_AWG_aluminum\"\n        elif element.circuit_rating == 30.amperes:\n        element.size >= \"10_AWG_copper\" or element.size >= \"8_AWG_aluminum\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.19\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.19\"", "rule_name": "branch_circuit_conductor_sizing"}
{"type": "bcl_to_physics", "input": "rule branch_circuit_conductor_sizing with conditions: if element.circuit_rating == 15.amperes:, element.size >= \"14_AWG_copper\" or element.size >= \"12_AWG_aluminum\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.210.19", "rule_name": "branch_circuit_conductor_sizing"}
{"type": "bcl_completion", "input": "rule branch_circuit_conductor_sizing:\n    where:\n        element.type == \"branch_circuit_conductor\"\n    # Complete this rule", "output": "rule branch_circuit_conductor_sizing:\n    where:\n        element.type == \"branch_circuit_conductor\"\n        must:\n        if element.circuit_rating == 15.amperes:\n        element.size >= \"14_AWG_copper\" or element.size >= \"12_AWG_aluminum\"\n        elif element.circuit_rating == 20.amperes:\n        element.size >= \"12_AWG_copper\" or element.size >= \"10_AWG_aluminum\"\n        elif element.circuit_rating == 30.amperes:\n        element.size >= \"10_AWG_copper\" or element.size >= \"8_AWG_aluminum\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.19\"\n    must:\n        if element.circuit_rating == 15.amperes:\n        element.size >= \"14_AWG_copper\" or element.size >= \"12_AWG_aluminum\"\n        elif element.circuit_rating == 20.amperes:\n        element.size >= \"12_AWG_copper\" or element.size >= \"10_AWG_aluminum\"\n        elif element.circuit_rating == 30.amperes:\n        element.size >= \"10_AWG_copper\" or element.size >= \"8_AWG_aluminum\"\n        reference: \"FL.Residential.2023.Ch36-NEC.210.19\"\n    reference: \"FL.Residential.2023.Ch36-NEC.210.19\"", "rule_name": "branch_circuit_conductor_sizing"}
{"type": "legal_to_bcl", "input": "Requirement for neutral conductor sizing: When element.type == \"neutral_conductor\" and must:, it is required that element.size >= electrical.minimum_egc_size(element.circuit_rating) and element.ampacity >= element.maximum_unbalanced_load", "output": "rule neutral_conductor_sizing:\n    where:\n        element.type == \"neutral_conductor\"\n        must:\n        element.size >= electrical.minimum_egc_size(element.circuit_rating)\n        element.ampacity >= element.maximum_unbalanced_load\n        reference: \"FL.Residential.2023.Ch36-NEC.220.61\"\n    must:\n        element.size >= electrical.minimum_egc_size(element.circuit_rating)\n        element.ampacity >= element.maximum_unbalanced_load\n        reference: \"FL.Residential.2023.Ch36-NEC.220.61\"\n    reference: \"FL.Residential.2023.Ch36-NEC.220.61\"", "rule_name": "neutral_conductor_sizing"}
{"type": "bcl_to_physics", "input": "rule neutral_conductor_sizing with conditions: element.size >= electrical.minimum_egc_size(element.circuit_rating), element.ampacity >= element.maximum_unbalanced_load", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.220.61", "rule_name": "neutral_conductor_sizing"}
{"type": "bcl_completion", "input": "rule neutral_conductor_sizing:\n    where:\n        element.type == \"neutral_conductor\"\n    # Complete this rule", "output": "rule neutral_conductor_sizing:\n    where:\n        element.type == \"neutral_conductor\"\n        must:\n        element.size >= electrical.minimum_egc_size(element.circuit_rating)\n        element.ampacity >= element.maximum_unbalanced_load\n        reference: \"FL.Residential.2023.Ch36-NEC.220.61\"\n    must:\n        element.size >= electrical.minimum_egc_size(element.circuit_rating)\n        element.ampacity >= element.maximum_unbalanced_load\n        reference: \"FL.Residential.2023.Ch36-NEC.220.61\"\n    reference: \"FL.Residential.2023.Ch36-NEC.220.61\"", "rule_name": "neutral_conductor_sizing"}
{"type": "legal_to_bcl", "input": "Requirement for feeder conductor sizing: When element.type == \"feeder\" and must:, it is required that element.ampacity >= (1.25 * element.continuous_load) + element.noncontinuous_load and element.ampacity >= element.calculated_load", "output": "rule feeder_conductor_sizing:\n    where:\n        element.type == \"feeder\"\n        must:\n        element.ampacity >= (1.25 * element.continuous_load) + element.noncontinuous_load\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch36-NEC.215.2\"\n    must:\n        element.ampacity >= (1.25 * element.continuous_load) + element.noncontinuous_load\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch36-NEC.215.2\"\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch36-NEC.215.2\"", "rule_name": "feeder_conductor_sizing"}
{"type": "bcl_to_physics", "input": "rule feeder_conductor_sizing with conditions: element.ampacity >= (1.25 * element.continuous_load) + element.noncontinuous_load, element.ampacity >= element.calculated_load", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.Residential.2023.Ch36-NEC.215.2", "rule_name": "feeder_conductor_sizing"}
{"type": "bcl_completion", "input": "rule feeder_conductor_sizing:\n    where:\n        element.type == \"feeder\"\n    # Complete this rule", "output": "rule feeder_conductor_sizing:\n    where:\n        element.type == \"feeder\"\n        must:\n        element.ampacity >= (1.25 * element.continuous_load) + element.noncontinuous_load\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch36-NEC.215.2\"\n    must:\n        element.ampacity >= (1.25 * element.continuous_load) + element.noncontinuous_load\n        element.ampacity >= element.calculated_load\n        safety_factor: 1.0\n        reference: \"FL.Residential.2023.Ch36-NEC.215.2\"\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch36-NEC.215.2\"", "rule_name": "feeder_conductor_sizing"}
{"type": "safety_factor_reasoning", "input": "For feeder_conductor_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.Ch36-NEC.215.2.", "rule_name": "feeder_conductor_sizing", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for feeder overcurrent protection: When element.type == \"feeder\" and must:, it is required that element.overcurrent_device_rating <= element.conductor_ampacity and if element.calculated_load <= 800.amperes:", "output": "rule feeder_overcurrent_protection:\n    where:\n        element.type == \"feeder\"\n        must:\n        element.overcurrent_device_rating <= element.conductor_ampacity\n        if element.calculated_load <= 800.amperes:\n        element.overcurrent_device_rating <= electrical.next_standard_size(element.conductor_ampacity)\n        reference: \"FL.Residential.2023.Ch36-NEC.215.3\"\n    must:\n        element.overcurrent_device_rating <= element.conductor_ampacity\n        if element.calculated_load <= 800.amperes:\n        element.overcurrent_device_rating <= electrical.next_standard_size(element.conductor_ampacity)\n        reference: \"FL.Residential.2023.Ch36-NEC.215.3\"\n    reference: \"FL.Residential.2023.Ch36-NEC.215.3\"", "rule_name": "feeder_overcurrent_protection"}
{"type": "bcl_to_physics", "input": "rule feeder_overcurrent_protection with constraints: calculated_load", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.215.3", "rule_name": "feeder_overcurrent_protection"}
{"type": "bcl_completion", "input": "rule feeder_overcurrent_protection:\n    where:\n        element.type == \"feeder\"\n    # Complete this rule", "output": "rule feeder_overcurrent_protection:\n    where:\n        element.type == \"feeder\"\n        must:\n        element.overcurrent_device_rating <= element.conductor_ampacity\n        if element.calculated_load <= 800.amperes:\n        element.overcurrent_device_rating <= electrical.next_standard_size(element.conductor_ampacity)\n        reference: \"FL.Residential.2023.Ch36-NEC.215.3\"\n    must:\n        element.overcurrent_device_rating <= element.conductor_ampacity\n        if element.calculated_load <= 800.amperes:\n        element.overcurrent_device_rating <= electrical.next_standard_size(element.conductor_ampacity)\n        reference: \"FL.Residential.2023.Ch36-NEC.215.3\"\n    reference: \"FL.Residential.2023.Ch36-NEC.215.3\"", "rule_name": "feeder_overcurrent_protection"}
{"type": "legal_to_bcl", "input": "Requirement for general lighting load: When element.type == \"dwelling_unit\" and must:, it is required that element.general_lighting_load >= element.floor_area * 3.volt_amperes_per_sq_ft and element.small_appliance_load >= 2 * 1500.volt_amperes", "output": "rule general_lighting_load:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.general_lighting_load >= element.floor_area * 3.volt_amperes_per_sq_ft\n        element.small_appliance_load >= 2 * 1500.volt_amperes\n        element.laundry_load >= 1500.volt_amperes\n        reference: \"FL.Residential.2023.Ch36-NEC.220.12\"\n    must:\n        element.general_lighting_load >= element.floor_area * 3.volt_amperes_per_sq_ft\n        element.small_appliance_load >= 2 * 1500.volt_amperes\n        element.laundry_load >= 1500.volt_amperes\n        reference: \"FL.Residential.2023.Ch36-NEC.220.12\"\n    reference: \"FL.Residential.2023.Ch36-NEC.220.12\"", "rule_name": "general_lighting_load"}
{"type": "bcl_to_physics", "input": "rule general_lighting_load with constraints: laundry_load", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.220.12", "rule_name": "general_lighting_load"}
{"type": "bcl_completion", "input": "rule general_lighting_load:\n    where:\n        element.type == \"dwelling_unit\"\n    # Complete this rule", "output": "rule general_lighting_load:\n    where:\n        element.type == \"dwelling_unit\"\n        must:\n        element.general_lighting_load >= element.floor_area * 3.volt_amperes_per_sq_ft\n        element.small_appliance_load >= 2 * 1500.volt_amperes\n        element.laundry_load >= 1500.volt_amperes\n        reference: \"FL.Residential.2023.Ch36-NEC.220.12\"\n    must:\n        element.general_lighting_load >= element.floor_area * 3.volt_amperes_per_sq_ft\n        element.small_appliance_load >= 2 * 1500.volt_amperes\n        element.laundry_load >= 1500.volt_amperes\n        reference: \"FL.Residential.2023.Ch36-NEC.220.12\"\n    reference: \"FL.Residential.2023.Ch36-NEC.220.12\"", "rule_name": "general_lighting_load"}
{"type": "legal_to_bcl", "input": "Requirement for demand factors application: When element.type == \"dwelling_unit_service\" and must:, it is required that if element.general_lighting_load > 3000.volt_amperes: and element.demand_load = 3000 + (0.35 * (element.general_lighting_load - 3000))", "output": "rule demand_factors_application:\n    where:\n        element.type == \"dwelling_unit_service\"\n        must:\n        if element.general_lighting_load > 3000.volt_amperes:\n        element.demand_load = 3000 + (0.35 * (element.general_lighting_load - 3000))\n        element.appliance_demand_factor <= 0.75  # For 4 or more appliances\n        reference: \"FL.Residential.2023.Ch36-NEC.220.53\"\n    must:\n        if element.general_lighting_load > 3000.volt_amperes:\n        element.demand_load = 3000 + (0.35 * (element.general_lighting_load - 3000))\n        element.appliance_demand_factor <= 0.75  # For 4 or more appliances\n        reference: \"FL.Residential.2023.Ch36-NEC.220.53\"\n    reference: \"FL.Residential.2023.Ch36-NEC.220.53\"", "rule_name": "demand_factors_application"}
{"type": "bcl_to_physics", "input": "rule demand_factors_application with constraints: general_lighting_load, appliance_demand_factor", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch36-NEC.220.53", "rule_name": "demand_factors_application"}
{"type": "bcl_completion", "input": "rule demand_factors_application:\n    where:\n        element.type == \"dwelling_unit_service\"\n    # Complete this rule", "output": "rule demand_factors_application:\n    where:\n        element.type == \"dwelling_unit_service\"\n        must:\n        if element.general_lighting_load > 3000.volt_amperes:\n        element.demand_load = 3000 + (0.35 * (element.general_lighting_load - 3000))\n        element.appliance_demand_factor <= 0.75  # For 4 or more appliances\n        reference: \"FL.Residential.2023.Ch36-NEC.220.53\"\n    must:\n        if element.general_lighting_load > 3000.volt_amperes:\n        element.demand_load = 3000 + (0.35 * (element.general_lighting_load - 3000))\n        element.appliance_demand_factor <= 0.75  # For 4 or more appliances\n        reference: \"FL.Residential.2023.Ch36-NEC.220.53\"\n    reference: \"FL.Residential.2023.Ch36-NEC.220.53\"", "rule_name": "demand_factors_application"}
{"type": "legal_to_bcl", "input": "Requirement for multiwire circuit requirements: When element.type == \"multiwire_branch_circuit\" and must:, it is required that element.has_simultaneous_disconnect == True and element.disconnect_type in [\"handle_tie\", \"multipole_breaker\"]", "output": "rule multiwire_circuit_requirements:\n    where:\n        element.type == \"multiwire_branch_circuit\"\n        must:\n        element.has_simultaneous_disconnect == True\n        element.disconnect_type in [\"handle_tie\", \"multipole_breaker\"]\n        element.neutral_switching_prohibited == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.4\"\n        constraint circuit_voltage_drop_limits:\n        where:\n        element.type in [\"branch_circuit\", \"feeder\"]\n        require:\n        electrical.voltage_drop_percentage(element) <= 3.0  # 3% max\n        if element.type == \"branch_circuit\":\n        electrical.total_voltage_drop(element.feeder, element) <= 5.0  # 5% max\n        safety_factor: 1.0\n        constraint conductor_temperature_derating:\n        where:\n        element.type == \"conductor\"\n        element.ambient_temperature > 30.celsius\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.temperature_correction_factor(element.ambient_temperature)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint conductor_bundling_derating:\n        where:\n        element.type == \"conductor\"\n        element.bundled_conductor_count > 3\n        require:\n        element.adjusted_ampacity = element.base_ampacity *\n        electrical.bundling_adjustment_factor(element.bundled_conductor_count)\n        element.adjusted_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint harmonic_current_effects:\n        where:\n        element.type == \"neutral_conductor\"\n        element.serves_nonlinear_loads == True\n        require:\n        element.neutral_current <= element.ampacity\n        element.effective_current = sqrt(\n        element.fundamental_current^2 +\n        element.harmonic_current^2\n        )\n        safety_factor: 1.25\n        constraint circuit_power_quality:\n        where:\n        element.type == \"branch_circuit\"\n        element.serves_sensitive_equipment == True\n        require:\n        electrical.voltage_thd(element) <= 5.0  # 5% max\n        electrical.current_thd(element) <= 20.0  # 20% max\n    must:\n        element.has_simultaneous_disconnect == True\n        element.disconnect_type in [\"handle_tie\", \"multipole_breaker\"]\n        element.neutral_switching_prohibited == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.4\"\n        constraint circuit_voltage_drop_limits:\n        where:\n        element.type in [\"branch_circuit\", \"feeder\"]\n        require:\n        electrical.voltage_drop_percentage(element) <= 3.0  # 3% max\n        if element.type == \"branch_circuit\":\n        electrical.total_voltage_drop(element.feeder, element) <= 5.0  # 5% max\n        safety_factor: 1.0\n        constraint conductor_temperature_derating:\n        where:\n        element.type == \"conductor\"\n        element.ambient_temperature > 30.celsius\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.temperature_correction_factor(element.ambient_temperature)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint conductor_bundling_derating:\n        where:\n        element.type == \"conductor\"\n        element.bundled_conductor_count > 3\n        require:\n        element.adjusted_ampacity = element.base_ampacity *\n        electrical.bundling_adjustment_factor(element.bundled_conductor_count)\n        element.adjusted_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint harmonic_current_effects:\n        where:\n        element.type == \"neutral_conductor\"\n        element.serves_nonlinear_loads == True\n        require:\n        element.neutral_current <= element.ampacity\n        element.effective_current = sqrt(\n        element.fundamental_current^2 +\n        element.harmonic_current^2\n        )\n        safety_factor: 1.25\n        constraint circuit_power_quality:\n        where:\n        element.type == \"branch_circuit\"\n        element.serves_sensitive_equipment == True\n        require:\n        electrical.voltage_thd(element) <= 5.0  # 5% max\n        electrical.current_thd(element) <= 20.0  # 20% max\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch36-NEC.210.4\"", "rule_name": "multiwire_circuit_requirements"}
{"type": "bcl_to_physics", "input": "rule multiwire_circuit_requirements with constraints: ambient_temperature", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.Ch36-NEC.210.4", "rule_name": "multiwire_circuit_requirements"}
{"type": "bcl_completion", "input": "rule multiwire_circuit_requirements:\n    where:\n        element.type == \"multiwire_branch_circuit\"\n    # Complete this rule", "output": "rule multiwire_circuit_requirements:\n    where:\n        element.type == \"multiwire_branch_circuit\"\n        must:\n        element.has_simultaneous_disconnect == True\n        element.disconnect_type in [\"handle_tie\", \"multipole_breaker\"]\n        element.neutral_switching_prohibited == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.4\"\n        constraint circuit_voltage_drop_limits:\n        where:\n        element.type in [\"branch_circuit\", \"feeder\"]\n        require:\n        electrical.voltage_drop_percentage(element) <= 3.0  # 3% max\n        if element.type == \"branch_circuit\":\n        electrical.total_voltage_drop(element.feeder, element) <= 5.0  # 5% max\n        safety_factor: 1.0\n        constraint conductor_temperature_derating:\n        where:\n        element.type == \"conductor\"\n        element.ambient_temperature > 30.celsius\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.temperature_correction_factor(element.ambient_temperature)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint conductor_bundling_derating:\n        where:\n        element.type == \"conductor\"\n        element.bundled_conductor_count > 3\n        require:\n        element.adjusted_ampacity = element.base_ampacity *\n        electrical.bundling_adjustment_factor(element.bundled_conductor_count)\n        element.adjusted_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint harmonic_current_effects:\n        where:\n        element.type == \"neutral_conductor\"\n        element.serves_nonlinear_loads == True\n        require:\n        element.neutral_current <= element.ampacity\n        element.effective_current = sqrt(\n        element.fundamental_current^2 +\n        element.harmonic_current^2\n        )\n        safety_factor: 1.25\n        constraint circuit_power_quality:\n        where:\n        element.type == \"branch_circuit\"\n        element.serves_sensitive_equipment == True\n        require:\n        electrical.voltage_thd(element) <= 5.0  # 5% max\n        electrical.current_thd(element) <= 20.0  # 20% max\n    must:\n        element.has_simultaneous_disconnect == True\n        element.disconnect_type in [\"handle_tie\", \"multipole_breaker\"]\n        element.neutral_switching_prohibited == True\n        reference: \"FL.Residential.2023.Ch36-NEC.210.4\"\n        constraint circuit_voltage_drop_limits:\n        where:\n        element.type in [\"branch_circuit\", \"feeder\"]\n        require:\n        electrical.voltage_drop_percentage(element) <= 3.0  # 3% max\n        if element.type == \"branch_circuit\":\n        electrical.total_voltage_drop(element.feeder, element) <= 5.0  # 5% max\n        safety_factor: 1.0\n        constraint conductor_temperature_derating:\n        where:\n        element.type == \"conductor\"\n        element.ambient_temperature > 30.celsius\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.temperature_correction_factor(element.ambient_temperature)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint conductor_bundling_derating:\n        where:\n        element.type == \"conductor\"\n        element.bundled_conductor_count > 3\n        require:\n        element.adjusted_ampacity = element.base_ampacity *\n        electrical.bundling_adjustment_factor(element.bundled_conductor_count)\n        element.adjusted_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint harmonic_current_effects:\n        where:\n        element.type == \"neutral_conductor\"\n        element.serves_nonlinear_loads == True\n        require:\n        element.neutral_current <= element.ampacity\n        element.effective_current = sqrt(\n        element.fundamental_current^2 +\n        element.harmonic_current^2\n        )\n        safety_factor: 1.25\n        constraint circuit_power_quality:\n        where:\n        element.type == \"branch_circuit\"\n        element.serves_sensitive_equipment == True\n        require:\n        electrical.voltage_thd(element) <= 5.0  # 5% max\n        electrical.current_thd(element) <= 20.0  # 20% max\n    safety_factor: 1.0\n    reference: \"FL.Residential.2023.Ch36-NEC.210.4\"", "rule_name": "multiwire_circuit_requirements"}
{"type": "safety_factor_reasoning", "input": "For multiwire_circuit_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.Ch36-NEC.210.4.", "rule_name": "multiwire_circuit_requirements", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for wiring method selection: When element.type == \"wiring_method\" and element.location == \"dwelling_unit\", it is required that element.method in [ and \"nonmetallic_sheathed_cable\",  # NM/Romex", "output": "rule wiring_method_selection:\n    where:\n        element.type == \"wiring_method\"\n        element.location == \"dwelling_unit\"\n        must:\n        element.method in [\n        \"nonmetallic_sheathed_cable\",  # NM/Romex\n        \"armored_cable\",               # AC\n        \"metal_clad_cable\",           # MC\n        \"electrical_metallic_tubing\",  # EMT\n        \"rigid_pvc_conduit\",          # PVC\n        \"electrical_nonmetallic_tubing\" # ENT\n        ]\n        element.is_listed == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300\"\n    must:\n        element.method in [\n        \"nonmetallic_sheathed_cable\",  # NM/Romex\n        \"armored_cable\",               # AC\n        \"metal_clad_cable\",           # MC\n        \"electrical_metallic_tubing\",  # EMT\n        \"rigid_pvc_conduit\",          # PVC\n        \"electrical_nonmetallic_tubing\" # ENT\n        ]\n        element.is_listed == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300\"\n    reference: \"FL.Residential.2023.Ch37-NEC.300\"", "rule_name": "wiring_method_selection"}
{"type": "bcl_to_physics", "input": "rule wiring_method_selection with conditions: element.method in [, \"nonmetallic_sheathed_cable\",  # NM/Romex", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.300", "rule_name": "wiring_method_selection"}
{"type": "bcl_completion", "input": "rule wiring_method_selection:\n    where:\n        element.type == \"wiring_method\"\n    # Complete this rule", "output": "rule wiring_method_selection:\n    where:\n        element.type == \"wiring_method\"\n        element.location == \"dwelling_unit\"\n        must:\n        element.method in [\n        \"nonmetallic_sheathed_cable\",  # NM/Romex\n        \"armored_cable\",               # AC\n        \"metal_clad_cable\",           # MC\n        \"electrical_metallic_tubing\",  # EMT\n        \"rigid_pvc_conduit\",          # PVC\n        \"electrical_nonmetallic_tubing\" # ENT\n        ]\n        element.is_listed == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300\"\n    must:\n        element.method in [\n        \"nonmetallic_sheathed_cable\",  # NM/Romex\n        \"armored_cable\",               # AC\n        \"metal_clad_cable\",           # MC\n        \"electrical_metallic_tubing\",  # EMT\n        \"rigid_pvc_conduit\",          # PVC\n        \"electrical_nonmetallic_tubing\" # ENT\n        ]\n        element.is_listed == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300\"\n    reference: \"FL.Residential.2023.Ch37-NEC.300\"", "rule_name": "wiring_method_selection"}
{"type": "legal_to_bcl", "input": "Requirement for conductor identification: When element.type == \"conductor\" and must:, it is required that if element.function == \"grounded_conductor\": and element.insulation_color in [\"white\", \"gray\", \"white_stripes\"]", "output": "rule conductor_identification:\n    where:\n        element.type == \"conductor\"\n        must:\n        if element.function == \"grounded_conductor\":\n        element.insulation_color in [\"white\", \"gray\", \"white_stripes\"]\n        elif element.function == \"equipment_grounding\":\n        element.insulation_color in [\"green\", \"green_yellow_stripe\", \"bare\"]\n        elif element.function == \"ungrounded\" and element.voltage > 50:\n        element.insulation_color not in [\"white\", \"gray\", \"green\"]\n        reference: \"FL.Residential.2023.Ch37-NEC.200.6\"\n    must:\n        if element.function == \"grounded_conductor\":\n        element.insulation_color in [\"white\", \"gray\", \"white_stripes\"]\n        elif element.function == \"equipment_grounding\":\n        element.insulation_color in [\"green\", \"green_yellow_stripe\", \"bare\"]\n        elif element.function == \"ungrounded\" and element.voltage > 50:\n        element.insulation_color not in [\"white\", \"gray\", \"green\"]\n        reference: \"FL.Residential.2023.Ch37-NEC.200.6\"\n    reference: \"FL.Residential.2023.Ch37-NEC.200.6\"", "rule_name": "conductor_identification"}
{"type": "bcl_to_physics", "input": "rule conductor_identification with conditions: if element.function == \"grounded_conductor\":, element.insulation_color in [\"white\", \"gray\", \"white_stripes\"]", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.200.6", "rule_name": "conductor_identification"}
{"type": "bcl_completion", "input": "rule conductor_identification:\n    where:\n        element.type == \"conductor\"\n    # Complete this rule", "output": "rule conductor_identification:\n    where:\n        element.type == \"conductor\"\n        must:\n        if element.function == \"grounded_conductor\":\n        element.insulation_color in [\"white\", \"gray\", \"white_stripes\"]\n        elif element.function == \"equipment_grounding\":\n        element.insulation_color in [\"green\", \"green_yellow_stripe\", \"bare\"]\n        elif element.function == \"ungrounded\" and element.voltage > 50:\n        element.insulation_color not in [\"white\", \"gray\", \"green\"]\n        reference: \"FL.Residential.2023.Ch37-NEC.200.6\"\n    must:\n        if element.function == \"grounded_conductor\":\n        element.insulation_color in [\"white\", \"gray\", \"white_stripes\"]\n        elif element.function == \"equipment_grounding\":\n        element.insulation_color in [\"green\", \"green_yellow_stripe\", \"bare\"]\n        elif element.function == \"ungrounded\" and element.voltage > 50:\n        element.insulation_color not in [\"white\", \"gray\", \"green\"]\n        reference: \"FL.Residential.2023.Ch37-NEC.200.6\"\n    reference: \"FL.Residential.2023.Ch37-NEC.200.6\"", "rule_name": "conductor_identification"}
{"type": "legal_to_bcl", "input": "Requirement for nm cable permitted uses: When element.type == \"nonmetallic_sheathed_cable\" and must:, it is required that element.building_type in [\"one_family\", \"two_family\", \"multifamily\"] and element.location in [\"dry_location\", \"concealed_spaces\"]", "output": "rule nm_cable_permitted_uses:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n        must:\n        element.building_type in [\"one_family\", \"two_family\", \"multifamily\"]\n        element.location in [\"dry_location\", \"concealed_spaces\"]\n        element.location not in [\"wet_location\", \"damp_location\"]\n        if element.building_type == \"multifamily\":\n        element.building_height <= 3.stories\n        reference: \"FL.Residential.2023.Ch37-NEC.334.10\"\n    must:\n        element.building_type in [\"one_family\", \"two_family\", \"multifamily\"]\n        element.location in [\"dry_location\", \"concealed_spaces\"]\n        element.location not in [\"wet_location\", \"damp_location\"]\n        if element.building_type == \"multifamily\":\n        element.building_height <= 3.stories\n        reference: \"FL.Residential.2023.Ch37-NEC.334.10\"\n    reference: \"FL.Residential.2023.Ch37-NEC.334.10\"", "rule_name": "nm_cable_permitted_uses"}
{"type": "bcl_to_physics", "input": "rule nm_cable_permitted_uses with constraints: building_height", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.334.10", "rule_name": "nm_cable_permitted_uses"}
{"type": "bcl_completion", "input": "rule nm_cable_permitted_uses:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n    # Complete this rule", "output": "rule nm_cable_permitted_uses:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n        must:\n        element.building_type in [\"one_family\", \"two_family\", \"multifamily\"]\n        element.location in [\"dry_location\", \"concealed_spaces\"]\n        element.location not in [\"wet_location\", \"damp_location\"]\n        if element.building_type == \"multifamily\":\n        element.building_height <= 3.stories\n        reference: \"FL.Residential.2023.Ch37-NEC.334.10\"\n    must:\n        element.building_type in [\"one_family\", \"two_family\", \"multifamily\"]\n        element.location in [\"dry_location\", \"concealed_spaces\"]\n        element.location not in [\"wet_location\", \"damp_location\"]\n        if element.building_type == \"multifamily\":\n        element.building_height <= 3.stories\n        reference: \"FL.Residential.2023.Ch37-NEC.334.10\"\n    reference: \"FL.Residential.2023.Ch37-NEC.334.10\"", "rule_name": "nm_cable_permitted_uses"}
{"type": "legal_to_bcl", "input": "Requirement for nm cable protection: When element.type == \"nonmetallic_sheathed_cable\" and must:, it is required that if element.passes_through_framing and distance.to_edge(element) < 1.25.inches: and element.has_steel_plate_protection == True", "output": "rule nm_cable_protection:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n        must:\n        if element.passes_through_framing and distance.to_edge(element) < 1.25.inches:\n        element.has_steel_plate_protection == True\n        element.steel_plate_thickness >= 1/16.inch\n        element.protected_from_physical_damage == True\n        reference: \"FL.Residential.2023.Ch37-NEC.334.17\"\n    must:\n        if element.passes_through_framing and distance.to_edge(element) < 1.25.inches:\n        element.has_steel_plate_protection == True\n        element.steel_plate_thickness >= 1/16.inch\n        element.protected_from_physical_damage == True\n        reference: \"FL.Residential.2023.Ch37-NEC.334.17\"\n    reference: \"FL.Residential.2023.Ch37-NEC.334.17\"", "rule_name": "nm_cable_protection"}
{"type": "bcl_to_physics", "input": "rule nm_cable_protection with conditions: if element.passes_through_framing and distance.to_edge(element) < 1.25.inches:, element.has_steel_plate_protection == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.334.17", "rule_name": "nm_cable_protection"}
{"type": "bcl_completion", "input": "rule nm_cable_protection:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n    # Complete this rule", "output": "rule nm_cable_protection:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n        must:\n        if element.passes_through_framing and distance.to_edge(element) < 1.25.inches:\n        element.has_steel_plate_protection == True\n        element.steel_plate_thickness >= 1/16.inch\n        element.protected_from_physical_damage == True\n        reference: \"FL.Residential.2023.Ch37-NEC.334.17\"\n    must:\n        if element.passes_through_framing and distance.to_edge(element) < 1.25.inches:\n        element.has_steel_plate_protection == True\n        element.steel_plate_thickness >= 1/16.inch\n        element.protected_from_physical_damage == True\n        reference: \"FL.Residential.2023.Ch37-NEC.334.17\"\n    reference: \"FL.Residential.2023.Ch37-NEC.334.17\"", "rule_name": "nm_cable_protection"}
{"type": "legal_to_bcl", "input": "Requirement for nm cable support: When element.type == \"nonmetallic_sheathed_cable\" and must:, it is required that element.support_spacing <= 4.5.feet and element.support_distance_from_box <= 12.inches", "output": "rule nm_cable_support:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n        must:\n        element.support_spacing <= 4.5.feet\n        element.support_distance_from_box <= 12.inches\n        if element.location == \"concealed_horizontal_run\":\n        element.support_spacing <= 6.feet  # If through framing\n        reference: \"FL.Residential.2023.Ch37-NEC.334.30\"\n    must:\n        element.support_spacing <= 4.5.feet\n        element.support_distance_from_box <= 12.inches\n        if element.location == \"concealed_horizontal_run\":\n        element.support_spacing <= 6.feet  # If through framing\n        reference: \"FL.Residential.2023.Ch37-NEC.334.30\"\n    reference: \"FL.Residential.2023.Ch37-NEC.334.30\"", "rule_name": "nm_cable_support"}
{"type": "bcl_to_physics", "input": "rule nm_cable_support with constraints: support_spacing, support_distance_from_box", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.334.30", "rule_name": "nm_cable_support"}
{"type": "bcl_completion", "input": "rule nm_cable_support:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n    # Complete this rule", "output": "rule nm_cable_support:\n    where:\n        element.type == \"nonmetallic_sheathed_cable\"\n        must:\n        element.support_spacing <= 4.5.feet\n        element.support_distance_from_box <= 12.inches\n        if element.location == \"concealed_horizontal_run\":\n        element.support_spacing <= 6.feet  # If through framing\n        reference: \"FL.Residential.2023.Ch37-NEC.334.30\"\n    must:\n        element.support_spacing <= 4.5.feet\n        element.support_distance_from_box <= 12.inches\n        if element.location == \"concealed_horizontal_run\":\n        element.support_spacing <= 6.feet  # If through framing\n        reference: \"FL.Residential.2023.Ch37-NEC.334.30\"\n    reference: \"FL.Residential.2023.Ch37-NEC.334.30\"", "rule_name": "nm_cable_support"}
{"type": "legal_to_bcl", "input": "Requirement for ac mc cable uses: When element.type in [\"armored_cable\", \"metal_clad_cable\"] and must:, it is required that element.suitable_for_location == True and if element.type == \"metal_clad_cable\" and element.listed_for_wet_location:", "output": "rule ac_mc_cable_uses:\n    where:\n        element.type in [\"armored_cable\", \"metal_clad_cable\"]\n        must:\n        element.suitable_for_location == True\n        if element.type == \"metal_clad_cable\" and element.listed_for_wet_location:\n        element.permitted_in_wet_location == True\n        reference: \"FL.Residential.2023.Ch37-NEC.320.10\"\n    must:\n        element.suitable_for_location == True\n        if element.type == \"metal_clad_cable\" and element.listed_for_wet_location:\n        element.permitted_in_wet_location == True\n        reference: \"FL.Residential.2023.Ch37-NEC.320.10\"\n    reference: \"FL.Residential.2023.Ch37-NEC.320.10\"", "rule_name": "ac_mc_cable_uses"}
{"type": "bcl_to_physics", "input": "rule ac_mc_cable_uses with conditions: element.suitable_for_location == True, if element.type == \"metal_clad_cable\" and element.listed_for_wet_location:", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.320.10", "rule_name": "ac_mc_cable_uses"}
{"type": "bcl_completion", "input": "rule ac_mc_cable_uses:\n    where:\n        element.type in [\"armored_cable\", \"metal_clad_cable\"]\n    # Complete this rule", "output": "rule ac_mc_cable_uses:\n    where:\n        element.type in [\"armored_cable\", \"metal_clad_cable\"]\n        must:\n        element.suitable_for_location == True\n        if element.type == \"metal_clad_cable\" and element.listed_for_wet_location:\n        element.permitted_in_wet_location == True\n        reference: \"FL.Residential.2023.Ch37-NEC.320.10\"\n    must:\n        element.suitable_for_location == True\n        if element.type == \"metal_clad_cable\" and element.listed_for_wet_location:\n        element.permitted_in_wet_location == True\n        reference: \"FL.Residential.2023.Ch37-NEC.320.10\"\n    reference: \"FL.Residential.2023.Ch37-NEC.320.10\"", "rule_name": "ac_mc_cable_uses"}
{"type": "legal_to_bcl", "input": "Requirement for ac mc cable bending: When element.type in [\"armored_cable\", \"metal_clad_cable\"] and must:, it is required that element.bending_radius >= 5 * element.cable_diameter and if element.has_smooth_sheath:", "output": "rule ac_mc_cable_bending:\n    where:\n        element.type in [\"armored_cable\", \"metal_clad_cable\"]\n        must:\n        element.bending_radius >= 5 * element.cable_diameter\n        if element.has_smooth_sheath:\n        element.bending_radius >= 10 * element.cable_diameter\n        reference: \"FL.Residential.2023.Ch37-NEC.320.24\"\n    must:\n        element.bending_radius >= 5 * element.cable_diameter\n        if element.has_smooth_sheath:\n        element.bending_radius >= 10 * element.cable_diameter\n        reference: \"FL.Residential.2023.Ch37-NEC.320.24\"\n    reference: \"FL.Residential.2023.Ch37-NEC.320.24\"", "rule_name": "ac_mc_cable_bending"}
{"type": "bcl_to_physics", "input": "rule ac_mc_cable_bending with conditions: element.bending_radius >= 5 * element.cable_diameter, if element.has_smooth_sheath:", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.320.24", "rule_name": "ac_mc_cable_bending"}
{"type": "bcl_completion", "input": "rule ac_mc_cable_bending:\n    where:\n        element.type in [\"armored_cable\", \"metal_clad_cable\"]\n    # Complete this rule", "output": "rule ac_mc_cable_bending:\n    where:\n        element.type in [\"armored_cable\", \"metal_clad_cable\"]\n        must:\n        element.bending_radius >= 5 * element.cable_diameter\n        if element.has_smooth_sheath:\n        element.bending_radius >= 10 * element.cable_diameter\n        reference: \"FL.Residential.2023.Ch37-NEC.320.24\"\n    must:\n        element.bending_radius >= 5 * element.cable_diameter\n        if element.has_smooth_sheath:\n        element.bending_radius >= 10 * element.cable_diameter\n        reference: \"FL.Residential.2023.Ch37-NEC.320.24\"\n    reference: \"FL.Residential.2023.Ch37-NEC.320.24\"", "rule_name": "ac_mc_cable_bending"}
{"type": "legal_to_bcl", "input": "Requirement for conduit fill limits: When element.type in [\"conduit\", \"tubing\"] and must:, it is required that if element.conductor_count == 1: and element.fill_percentage <= 53", "output": "rule conduit_fill_limits:\n    where:\n        element.type in [\"conduit\", \"tubing\"]\n        must:\n        if element.conductor_count == 1:\n        element.fill_percentage <= 53\n        elif element.conductor_count == 2:\n        element.fill_percentage <= 31\n        elif element.conductor_count >= 3:\n        element.fill_percentage <= 40\n        element.jam_ratio <= 3.0\n        reference: \"FL.Residential.2023.Ch37-NEC.Chapter_9\"\n    must:\n        if element.conductor_count == 1:\n        element.fill_percentage <= 53\n        elif element.conductor_count == 2:\n        element.fill_percentage <= 31\n        elif element.conductor_count >= 3:\n        element.fill_percentage <= 40\n        element.jam_ratio <= 3.0\n        reference: \"FL.Residential.2023.Ch37-NEC.Chapter_9\"\n    reference: \"FL.Residential.2023.Ch37-NEC.Chapter_9\"", "rule_name": "conduit_fill_limits"}
{"type": "bcl_to_physics", "input": "rule conduit_fill_limits with constraints: jam_ratio", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.Chapter_9", "rule_name": "conduit_fill_limits"}
{"type": "bcl_completion", "input": "rule conduit_fill_limits:\n    where:\n        element.type in [\"conduit\", \"tubing\"]\n    # Complete this rule", "output": "rule conduit_fill_limits:\n    where:\n        element.type in [\"conduit\", \"tubing\"]\n        must:\n        if element.conductor_count == 1:\n        element.fill_percentage <= 53\n        elif element.conductor_count == 2:\n        element.fill_percentage <= 31\n        elif element.conductor_count >= 3:\n        element.fill_percentage <= 40\n        element.jam_ratio <= 3.0\n        reference: \"FL.Residential.2023.Ch37-NEC.Chapter_9\"\n    must:\n        if element.conductor_count == 1:\n        element.fill_percentage <= 53\n        elif element.conductor_count == 2:\n        element.fill_percentage <= 31\n        elif element.conductor_count >= 3:\n        element.fill_percentage <= 40\n        element.jam_ratio <= 3.0\n        reference: \"FL.Residential.2023.Ch37-NEC.Chapter_9\"\n    reference: \"FL.Residential.2023.Ch37-NEC.Chapter_9\"", "rule_name": "conduit_fill_limits"}
{"type": "legal_to_bcl", "input": "Requirement for conduit support spacing: When element.type == \"conduit\" and must:, it is required that if element.conduit_type == \"EMT\": and element.support_spacing <= 10.feet", "output": "rule conduit_support_spacing:\n    where:\n        element.type == \"conduit\"\n        must:\n        if element.conduit_type == \"EMT\":\n        element.support_spacing <= 10.feet\n        element.support_from_box <= 3.feet\n        elif element.conduit_type == \"rigid_pvc\":\n        element.support_spacing <= electrical.pvc_support_spacing(element.size)\n        element.support_from_box <= 3.feet\n        reference: \"FL.Residential.2023.Ch37-NEC.358.30\"\n    must:\n        if element.conduit_type == \"EMT\":\n        element.support_spacing <= 10.feet\n        element.support_from_box <= 3.feet\n        elif element.conduit_type == \"rigid_pvc\":\n        element.support_spacing <= electrical.pvc_support_spacing(element.size)\n        element.support_from_box <= 3.feet\n        reference: \"FL.Residential.2023.Ch37-NEC.358.30\"\n    reference: \"FL.Residential.2023.Ch37-NEC.358.30\"", "rule_name": "conduit_support_spacing"}
{"type": "bcl_to_physics", "input": "rule conduit_support_spacing with constraints: support_spacing, support_from_box", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.358.30", "rule_name": "conduit_support_spacing"}
{"type": "bcl_completion", "input": "rule conduit_support_spacing:\n    where:\n        element.type == \"conduit\"\n    # Complete this rule", "output": "rule conduit_support_spacing:\n    where:\n        element.type == \"conduit\"\n        must:\n        if element.conduit_type == \"EMT\":\n        element.support_spacing <= 10.feet\n        element.support_from_box <= 3.feet\n        elif element.conduit_type == \"rigid_pvc\":\n        element.support_spacing <= electrical.pvc_support_spacing(element.size)\n        element.support_from_box <= 3.feet\n        reference: \"FL.Residential.2023.Ch37-NEC.358.30\"\n    must:\n        if element.conduit_type == \"EMT\":\n        element.support_spacing <= 10.feet\n        element.support_from_box <= 3.feet\n        elif element.conduit_type == \"rigid_pvc\":\n        element.support_spacing <= electrical.pvc_support_spacing(element.size)\n        element.support_from_box <= 3.feet\n        reference: \"FL.Residential.2023.Ch37-NEC.358.30\"\n    reference: \"FL.Residential.2023.Ch37-NEC.358.30\"", "rule_name": "conduit_support_spacing"}
{"type": "legal_to_bcl", "input": "Requirement for underground cable depth: When element.type == \"underground_wiring\" and element.location == \"residential\", it is required that if element.wiring_method == \"direct_burial_cable\": and element.burial_depth >= 24.inches", "output": "rule underground_cable_depth:\n    where:\n        element.type == \"underground_wiring\"\n        element.location == \"residential\"\n        must:\n        if element.wiring_method == \"direct_burial_cable\":\n        element.burial_depth >= 24.inches\n        elif element.wiring_method == \"rigid_metal_conduit\":\n        element.burial_depth >= 6.inches\n        elif element.wiring_method == \"rigid_pvc_conduit\":\n        element.burial_depth >= 18.inches\n        if element.under_driveway:\n        element.burial_depth >= element.minimum_depth + 6.inches\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5\"\n    must:\n        if element.wiring_method == \"direct_burial_cable\":\n        element.burial_depth >= 24.inches\n        elif element.wiring_method == \"rigid_metal_conduit\":\n        element.burial_depth >= 6.inches\n        elif element.wiring_method == \"rigid_pvc_conduit\":\n        element.burial_depth >= 18.inches\n        if element.under_driveway:\n        element.burial_depth >= element.minimum_depth + 6.inches\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5\"\n    reference: \"FL.Residential.2023.Ch37-NEC.300.5\"", "rule_name": "underground_cable_depth"}
{"type": "bcl_to_physics", "input": "rule underground_cable_depth with constraints: burial_depth, burial_depth", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.300.5", "rule_name": "underground_cable_depth"}
{"type": "bcl_completion", "input": "rule underground_cable_depth:\n    where:\n        element.type == \"underground_wiring\"\n    # Complete this rule", "output": "rule underground_cable_depth:\n    where:\n        element.type == \"underground_wiring\"\n        element.location == \"residential\"\n        must:\n        if element.wiring_method == \"direct_burial_cable\":\n        element.burial_depth >= 24.inches\n        elif element.wiring_method == \"rigid_metal_conduit\":\n        element.burial_depth >= 6.inches\n        elif element.wiring_method == \"rigid_pvc_conduit\":\n        element.burial_depth >= 18.inches\n        if element.under_driveway:\n        element.burial_depth >= element.minimum_depth + 6.inches\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5\"\n    must:\n        if element.wiring_method == \"direct_burial_cable\":\n        element.burial_depth >= 24.inches\n        elif element.wiring_method == \"rigid_metal_conduit\":\n        element.burial_depth >= 6.inches\n        elif element.wiring_method == \"rigid_pvc_conduit\":\n        element.burial_depth >= 18.inches\n        if element.under_driveway:\n        element.burial_depth >= element.minimum_depth + 6.inches\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5\"\n    reference: \"FL.Residential.2023.Ch37-NEC.300.5\"", "rule_name": "underground_cable_depth"}
{"type": "legal_to_bcl", "input": "Requirement for underground cable protection: When element.type == \"underground_cable\" and must:, it is required that if element.burial_depth < 24.inches: and element.has_warning_ribbon == True", "output": "rule underground_cable_protection:\n    where:\n        element.type == \"underground_cable\"\n        must:\n        if element.burial_depth < 24.inches:\n        element.has_warning_ribbon == True\n        element.ribbon_depth <= 12.inches  # Below grade\n        element.has_conduit_protection_to_8ft_above_grade == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5(D)\"\n    must:\n        if element.burial_depth < 24.inches:\n        element.has_warning_ribbon == True\n        element.ribbon_depth <= 12.inches  # Below grade\n        element.has_conduit_protection_to_8ft_above_grade == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5(D)\"\n    reference: \"FL.Residential.2023.Ch37-NEC.300.5(D)\"", "rule_name": "underground_cable_protection"}
{"type": "bcl_to_physics", "input": "rule underground_cable_protection with constraints: burial_depth, ribbon_depth", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.Ch37-NEC.300.5(D)", "rule_name": "underground_cable_protection"}
{"type": "bcl_completion", "input": "rule underground_cable_protection:\n    where:\n        element.type == \"underground_cable\"\n    # Complete this rule", "output": "rule underground_cable_protection:\n    where:\n        element.type == \"underground_cable\"\n        must:\n        if element.burial_depth < 24.inches:\n        element.has_warning_ribbon == True\n        element.ribbon_depth <= 12.inches  # Below grade\n        element.has_conduit_protection_to_8ft_above_grade == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5(D)\"\n    must:\n        if element.burial_depth < 24.inches:\n        element.has_warning_ribbon == True\n        element.ribbon_depth <= 12.inches  # Below grade\n        element.has_conduit_protection_to_8ft_above_grade == True\n        reference: \"FL.Residential.2023.Ch37-NEC.300.5(D)\"\n    reference: \"FL.Residential.2023.Ch37-NEC.300.5(D)\"", "rule_name": "underground_cable_protection"}
{"type": "legal_to_bcl", "input": "Requirement for outlet box fill: When element.type == \"outlet_box\" and must:, it is required that element.total_conductor_volume <= element.box_volume and element.conductor_volume = sum(", "output": "rule outlet_box_fill:\n    where:\n        element.type == \"outlet_box\"\n        must:\n        element.total_conductor_volume <= element.box_volume\n        element.conductor_volume = sum(\n        element.conductor_count * electrical.conductor_volume(size)\n        for size in element.conductor_sizes\n        )\n        reference: \"FL.Residential.2023.Ch37-NEC.314.16\"\n        constraint cable_pulling_tension:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.installation_method == \"pulled\"\n        require:\n        mechanical.pulling_tension(element) <= min(\n        element.conductor_strength * 0.08,  # 8% of tensile strength\n        element.insulation_damage_threshold\n        )\n        safety_factor: 1.5\n        constraint conduit_thermal_expansion:\n        where:\n        element.type == \"pvc_conduit\"\n        element.length > 10.feet\n        require:\n        element.has_expansion_fitting == True or\n        element.installation_allows_movement == True\n        thermal.expansion_length(element) <= element.expansion_capacity\n        safety_factor: 1.2\n        constraint cable_ampacity_bundling:\n        where:\n        element.type == \"cable\"\n        element.bundled_count > 2\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.bundling_factor(element.bundled_count)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint bend_radius_stress:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.has_bends == True\n        require:\n        mechanical.bending_stress(element) <= element.conductor_yield_strength * 0.5\n        element.bend_radius >= element.minimum_bend_radius\n        safety_factor: 2.0\n        constraint underground_thermal_performance:\n        where:\n        element.type == \"underground_cable\"\n        require:\n        thermal.cable_temperature(\n        element.current,\n        element.earth_thermal_resistivity,\n        element.burial_depth\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint box_heat_dissipation:\n        where:\n        element.type == \"outlet_box\"\n        element.contains_splices == True\n        require:\n        thermal.box_temperature_rise(\n        element.splice_count,\n        element.current,\n        element.box_volume\n        ) <= 30.celsius  # Above ambient\n    must:\n        element.total_conductor_volume <= element.box_volume\n        element.conductor_volume = sum(\n        element.conductor_count * electrical.conductor_volume(size)\n        for size in element.conductor_sizes\n        )\n        reference: \"FL.Residential.2023.Ch37-NEC.314.16\"\n        constraint cable_pulling_tension:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.installation_method == \"pulled\"\n        require:\n        mechanical.pulling_tension(element) <= min(\n        element.conductor_strength * 0.08,  # 8% of tensile strength\n        element.insulation_damage_threshold\n        )\n        safety_factor: 1.5\n        constraint conduit_thermal_expansion:\n        where:\n        element.type == \"pvc_conduit\"\n        element.length > 10.feet\n        require:\n        element.has_expansion_fitting == True or\n        element.installation_allows_movement == True\n        thermal.expansion_length(element) <= element.expansion_capacity\n        safety_factor: 1.2\n        constraint cable_ampacity_bundling:\n        where:\n        element.type == \"cable\"\n        element.bundled_count > 2\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.bundling_factor(element.bundled_count)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint bend_radius_stress:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.has_bends == True\n        require:\n        mechanical.bending_stress(element) <= element.conductor_yield_strength * 0.5\n        element.bend_radius >= element.minimum_bend_radius\n        safety_factor: 2.0\n        constraint underground_thermal_performance:\n        where:\n        element.type == \"underground_cable\"\n        require:\n        thermal.cable_temperature(\n        element.current,\n        element.earth_thermal_resistivity,\n        element.burial_depth\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint box_heat_dissipation:\n        where:\n        element.type == \"outlet_box\"\n        element.contains_splices == True\n        require:\n        thermal.box_temperature_rise(\n        element.splice_count,\n        element.current,\n        element.box_volume\n        ) <= 30.celsius  # Above ambient\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.Ch37-NEC.314.16\"", "rule_name": "outlet_box_fill"}
{"type": "bcl_to_physics", "input": "rule outlet_box_fill with constraints: length, thermal.expansion_length(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.Ch37-NEC.314.16", "rule_name": "outlet_box_fill"}
{"type": "bcl_completion", "input": "rule outlet_box_fill:\n    where:\n        element.type == \"outlet_box\"\n    # Complete this rule", "output": "rule outlet_box_fill:\n    where:\n        element.type == \"outlet_box\"\n        must:\n        element.total_conductor_volume <= element.box_volume\n        element.conductor_volume = sum(\n        element.conductor_count * electrical.conductor_volume(size)\n        for size in element.conductor_sizes\n        )\n        reference: \"FL.Residential.2023.Ch37-NEC.314.16\"\n        constraint cable_pulling_tension:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.installation_method == \"pulled\"\n        require:\n        mechanical.pulling_tension(element) <= min(\n        element.conductor_strength * 0.08,  # 8% of tensile strength\n        element.insulation_damage_threshold\n        )\n        safety_factor: 1.5\n        constraint conduit_thermal_expansion:\n        where:\n        element.type == \"pvc_conduit\"\n        element.length > 10.feet\n        require:\n        element.has_expansion_fitting == True or\n        element.installation_allows_movement == True\n        thermal.expansion_length(element) <= element.expansion_capacity\n        safety_factor: 1.2\n        constraint cable_ampacity_bundling:\n        where:\n        element.type == \"cable\"\n        element.bundled_count > 2\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.bundling_factor(element.bundled_count)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint bend_radius_stress:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.has_bends == True\n        require:\n        mechanical.bending_stress(element) <= element.conductor_yield_strength * 0.5\n        element.bend_radius >= element.minimum_bend_radius\n        safety_factor: 2.0\n        constraint underground_thermal_performance:\n        where:\n        element.type == \"underground_cable\"\n        require:\n        thermal.cable_temperature(\n        element.current,\n        element.earth_thermal_resistivity,\n        element.burial_depth\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint box_heat_dissipation:\n        where:\n        element.type == \"outlet_box\"\n        element.contains_splices == True\n        require:\n        thermal.box_temperature_rise(\n        element.splice_count,\n        element.current,\n        element.box_volume\n        ) <= 30.celsius  # Above ambient\n    must:\n        element.total_conductor_volume <= element.box_volume\n        element.conductor_volume = sum(\n        element.conductor_count * electrical.conductor_volume(size)\n        for size in element.conductor_sizes\n        )\n        reference: \"FL.Residential.2023.Ch37-NEC.314.16\"\n        constraint cable_pulling_tension:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.installation_method == \"pulled\"\n        require:\n        mechanical.pulling_tension(element) <= min(\n        element.conductor_strength * 0.08,  # 8% of tensile strength\n        element.insulation_damage_threshold\n        )\n        safety_factor: 1.5\n        constraint conduit_thermal_expansion:\n        where:\n        element.type == \"pvc_conduit\"\n        element.length > 10.feet\n        require:\n        element.has_expansion_fitting == True or\n        element.installation_allows_movement == True\n        thermal.expansion_length(element) <= element.expansion_capacity\n        safety_factor: 1.2\n        constraint cable_ampacity_bundling:\n        where:\n        element.type == \"cable\"\n        element.bundled_count > 2\n        require:\n        element.derated_ampacity = element.base_ampacity *\n        electrical.bundling_factor(element.bundled_count)\n        element.derated_ampacity >= element.circuit_load\n        safety_factor: 1.0\n        constraint bend_radius_stress:\n        where:\n        element.type in [\"cable\", \"conductor\"]\n        element.has_bends == True\n        require:\n        mechanical.bending_stress(element) <= element.conductor_yield_strength * 0.5\n        element.bend_radius >= element.minimum_bend_radius\n        safety_factor: 2.0\n        constraint underground_thermal_performance:\n        where:\n        element.type == \"underground_cable\"\n        require:\n        thermal.cable_temperature(\n        element.current,\n        element.earth_thermal_resistivity,\n        element.burial_depth\n        ) <= element.insulation_rating\n        safety_factor: 1.25\n        constraint box_heat_dissipation:\n        where:\n        element.type == \"outlet_box\"\n        element.contains_splices == True\n        require:\n        thermal.box_temperature_rise(\n        element.splice_count,\n        element.current,\n        element.box_volume\n        ) <= 30.celsius  # Above ambient\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.Ch37-NEC.314.16\"", "rule_name": "outlet_box_fill"}
{"type": "safety_factor_reasoning", "input": "For outlet_box_fill rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.Ch37-NEC.314.16.", "rule_name": "outlet_box_fill", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for hvac equipment access: When element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"] and must:, it is required that element.has_maintenance_access == True and element.clearance_for_cleaning >= element.manufacturer_required_clearance", "output": "rule hvac_equipment_access:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n        must:\n        element.has_maintenance_access == True\n        element.clearance_for_cleaning >= element.manufacturer_required_clearance\n        element.clearance_for_filter_replacement >= element.filter_dimensions + 6.inches\n        element.clearance_for_component_replacement >= element.largest_component_dimension\n        reference: \"FL.Residential.2023.M1401.2\"\n    must:\n        element.has_maintenance_access == True\n        element.clearance_for_cleaning >= element.manufacturer_required_clearance\n        element.clearance_for_filter_replacement >= element.filter_dimensions + 6.inches\n        element.clearance_for_component_replacement >= element.largest_component_dimension\n        reference: \"FL.Residential.2023.M1401.2\"\n    reference: \"FL.Residential.2023.M1401.2\"", "rule_name": "hvac_equipment_access"}
{"type": "bcl_to_physics", "input": "rule hvac_equipment_access with conditions: element.has_maintenance_access == True, element.clearance_for_cleaning >= element.manufacturer_required_clearance", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1401.2", "rule_name": "hvac_equipment_access"}
{"type": "bcl_completion", "input": "rule hvac_equipment_access:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n    # Complete this rule", "output": "rule hvac_equipment_access:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n        must:\n        element.has_maintenance_access == True\n        element.clearance_for_cleaning >= element.manufacturer_required_clearance\n        element.clearance_for_filter_replacement >= element.filter_dimensions + 6.inches\n        element.clearance_for_component_replacement >= element.largest_component_dimension\n        reference: \"FL.Residential.2023.M1401.2\"\n    must:\n        element.has_maintenance_access == True\n        element.clearance_for_cleaning >= element.manufacturer_required_clearance\n        element.clearance_for_filter_replacement >= element.filter_dimensions + 6.inches\n        element.clearance_for_component_replacement >= element.largest_component_dimension\n        reference: \"FL.Residential.2023.M1401.2\"\n    reference: \"FL.Residential.2023.M1401.2\"", "rule_name": "hvac_equipment_access"}
{"type": "legal_to_bcl", "input": "Requirement for hvac equipment sizing: When element.type in [\"heating_equipment\", \"cooling_equipment\"] and must:, it is required that element.sizing_method in [\"ACCA_Manual_S\", \"approved_methodology\"] and element.load_calculation_method in [\"ACCA_Manual_J\", \"approved_methodology\"]", "output": "rule hvac_equipment_sizing:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        must:\n        element.sizing_method in [\"ACCA_Manual_S\", \"approved_methodology\"]\n        element.load_calculation_method in [\"ACCA_Manual_J\", \"approved_methodology\"]\n        element.capacity >= element.calculated_load\n        element.capacity <= element.calculated_load * 1.15  # Max 15% oversizing\n        reference: \"FL.Residential.2023.M1401.3\"\n    must:\n        element.sizing_method in [\"ACCA_Manual_S\", \"approved_methodology\"]\n        element.load_calculation_method in [\"ACCA_Manual_J\", \"approved_methodology\"]\n        element.capacity >= element.calculated_load\n        element.capacity <= element.calculated_load * 1.15  # Max 15% oversizing\n        reference: \"FL.Residential.2023.M1401.3\"\n    reference: \"FL.Residential.2023.M1401.3\"", "rule_name": "hvac_equipment_sizing"}
{"type": "bcl_to_physics", "input": "rule hvac_equipment_sizing with conditions: element.sizing_method in [\"ACCA_Manual_S\", \"approved_methodology\"], element.load_calculation_method in [\"ACCA_Manual_J\", \"approved_methodology\"]", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1401.3", "rule_name": "hvac_equipment_sizing"}
{"type": "bcl_completion", "input": "rule hvac_equipment_sizing:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n    # Complete this rule", "output": "rule hvac_equipment_sizing:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        must:\n        element.sizing_method in [\"ACCA_Manual_S\", \"approved_methodology\"]\n        element.load_calculation_method in [\"ACCA_Manual_J\", \"approved_methodology\"]\n        element.capacity >= element.calculated_load\n        element.capacity <= element.calculated_load * 1.15  # Max 15% oversizing\n        reference: \"FL.Residential.2023.M1401.3\"\n    must:\n        element.sizing_method in [\"ACCA_Manual_S\", \"approved_methodology\"]\n        element.load_calculation_method in [\"ACCA_Manual_J\", \"approved_methodology\"]\n        element.capacity >= element.calculated_load\n        element.capacity <= element.calculated_load * 1.15  # Max 15% oversizing\n        reference: \"FL.Residential.2023.M1401.3\"\n    reference: \"FL.Residential.2023.M1401.3\"", "rule_name": "hvac_equipment_sizing"}
{"type": "legal_to_bcl", "input": "Requirement for hvac multistage equipment sizing: When element.type in [\"heating_equipment\", \"cooling_equipment\"] and element.technology in [\"multistage\", \"variable_refrigerant_flow\"], it is required that element.calculated_load >= element.manufacturer_min_capacity and element.calculated_load <= element.manufacturer_max_capacity", "output": "rule hvac_multistage_equipment_sizing:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        element.technology in [\"multistage\", \"variable_refrigerant_flow\"]\n        must:\n        element.calculated_load >= element.manufacturer_min_capacity\n        element.calculated_load <= element.manufacturer_max_capacity\n        reference: \"FL.Residential.2023.M1401.3\"\n    must:\n        element.calculated_load >= element.manufacturer_min_capacity\n        element.calculated_load <= element.manufacturer_max_capacity\n        reference: \"FL.Residential.2023.M1401.3\"\n    reference: \"FL.Residential.2023.M1401.3\"", "rule_name": "hvac_multistage_equipment_sizing"}
{"type": "bcl_to_physics", "input": "rule hvac_multistage_equipment_sizing with conditions: element.calculated_load >= element.manufacturer_min_capacity, element.calculated_load <= element.manufacturer_max_capacity", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.M1401.3", "rule_name": "hvac_multistage_equipment_sizing"}
{"type": "bcl_completion", "input": "rule hvac_multistage_equipment_sizing:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n    # Complete this rule", "output": "rule hvac_multistage_equipment_sizing:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        element.technology in [\"multistage\", \"variable_refrigerant_flow\"]\n        must:\n        element.calculated_load >= element.manufacturer_min_capacity\n        element.calculated_load <= element.manufacturer_max_capacity\n        reference: \"FL.Residential.2023.M1401.3\"\n    must:\n        element.calculated_load >= element.manufacturer_min_capacity\n        element.calculated_load <= element.manufacturer_max_capacity\n        reference: \"FL.Residential.2023.M1401.3\"\n    reference: \"FL.Residential.2023.M1401.3\"", "rule_name": "hvac_multistage_equipment_sizing"}
{"type": "legal_to_bcl", "input": "Requirement for hvac exterior installation: When element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"] and element.location == \"outdoor\", it is required that element.is_listed_for_outdoor == True and element.support.prevents_excessive_vibration == True", "output": "rule hvac_exterior_installation:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n        element.location == \"outdoor\"\n        must:\n        element.is_listed_for_outdoor == True\n        element.support.prevents_excessive_vibration == True\n        element.foundation.prevents_settlement == True\n        reference: \"FL.Residential.2023.M1401.4\"\n    must:\n        element.is_listed_for_outdoor == True\n        element.support.prevents_excessive_vibration == True\n        element.foundation.prevents_settlement == True\n        reference: \"FL.Residential.2023.M1401.4\"\n    reference: \"FL.Residential.2023.M1401.4\"", "rule_name": "hvac_exterior_installation"}
{"type": "bcl_to_physics", "input": "rule hvac_exterior_installation with conditions: element.is_listed_for_outdoor == True, element.support.prevents_excessive_vibration == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1401.4", "rule_name": "hvac_exterior_installation"}
{"type": "bcl_completion", "input": "rule hvac_exterior_installation:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n    # Complete this rule", "output": "rule hvac_exterior_installation:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n        element.location == \"outdoor\"\n        must:\n        element.is_listed_for_outdoor == True\n        element.support.prevents_excessive_vibration == True\n        element.foundation.prevents_settlement == True\n        reference: \"FL.Residential.2023.M1401.4\"\n    must:\n        element.is_listed_for_outdoor == True\n        element.support.prevents_excessive_vibration == True\n        element.foundation.prevents_settlement == True\n        reference: \"FL.Residential.2023.M1401.4\"\n    reference: \"FL.Residential.2023.M1401.4\"", "rule_name": "hvac_exterior_installation"}
{"type": "legal_to_bcl", "input": "Requirement for hvac flood hazard elevation: When element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"] and element.location.is_flood_hazard_area == True, it is required that element.elevation >= element.location.base_flood_elevation + 1.0.feet and safety_factor: 1.2", "output": "rule hvac_flood_hazard_elevation:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n        element.location.is_flood_hazard_area == True\n        must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M1401.5\"\n    must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M1401.5\"\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.M1401.5\"", "rule_name": "hvac_flood_hazard_elevation"}
{"type": "bcl_to_physics", "input": "rule hvac_flood_hazard_elevation with conditions: element.elevation >= element.location.base_flood_elevation + 1.0.feet, safety_factor: 1.2", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Residential.2023.M1401.5", "rule_name": "hvac_flood_hazard_elevation"}
{"type": "bcl_completion", "input": "rule hvac_flood_hazard_elevation:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n    # Complete this rule", "output": "rule hvac_flood_hazard_elevation:\n    where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\", \"hvac_appliance\"]\n        element.location.is_flood_hazard_area == True\n        must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M1401.5\"\n    must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M1401.5\"\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.M1401.5\"", "rule_name": "hvac_flood_hazard_elevation"}
{"type": "safety_factor_reasoning", "input": "For hvac_flood_hazard_elevation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.M1401.5.", "rule_name": "hvac_flood_hazard_elevation", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for furnace clearances: When element.type == \"central_furnace\" and must:, it is required that element.clearances_comply_with_listing == True and element.clearances_per_manufacturer_instructions == True", "output": "rule furnace_clearances:\n    where:\n        element.type == \"central_furnace\"\n        must:\n        element.clearances_comply_with_listing == True\n        element.clearances_per_manufacturer_instructions == True\n        reference: \"FL.Residential.2023.M1402.2\"\n    must:\n        element.clearances_comply_with_listing == True\n        element.clearances_per_manufacturer_instructions == True\n        reference: \"FL.Residential.2023.M1402.2\"\n    reference: \"FL.Residential.2023.M1402.2\"", "rule_name": "furnace_clearances"}
{"type": "bcl_to_physics", "input": "rule furnace_clearances with conditions: element.clearances_comply_with_listing == True, element.clearances_per_manufacturer_instructions == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1402.2", "rule_name": "furnace_clearances"}
{"type": "bcl_completion", "input": "rule furnace_clearances:\n    where:\n        element.type == \"central_furnace\"\n    # Complete this rule", "output": "rule furnace_clearances:\n    where:\n        element.type == \"central_furnace\"\n        must:\n        element.clearances_comply_with_listing == True\n        element.clearances_per_manufacturer_instructions == True\n        reference: \"FL.Residential.2023.M1402.2\"\n    must:\n        element.clearances_comply_with_listing == True\n        element.clearances_per_manufacturer_instructions == True\n        reference: \"FL.Residential.2023.M1402.2\"\n    reference: \"FL.Residential.2023.M1402.2\"", "rule_name": "furnace_clearances"}
{"type": "legal_to_bcl", "input": "Requirement for furnace combustion air: When element.type == \"central_furnace\" and element.fuel_type in [\"oil\", \"gas\"], it is required that element.combustion_air_complies_with_chapter_17 == True and element.combustion_air_opening_clearance >= 6.inches", "output": "rule furnace_combustion_air:\n    where:\n        element.type == \"central_furnace\"\n        element.fuel_type in [\"oil\", \"gas\"]\n        must:\n        element.combustion_air_complies_with_chapter_17 == True\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Residential.2023.M1402.3\"\n    must:\n        element.combustion_air_complies_with_chapter_17 == True\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Residential.2023.M1402.3\"\n    reference: \"FL.Residential.2023.M1402.3\"", "rule_name": "furnace_combustion_air"}
{"type": "bcl_to_physics", "input": "rule furnace_combustion_air with constraints: combustion_air_opening_clearance", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1402.3", "rule_name": "furnace_combustion_air"}
{"type": "bcl_completion", "input": "rule furnace_combustion_air:\n    where:\n        element.type == \"central_furnace\"\n    # Complete this rule", "output": "rule furnace_combustion_air:\n    where:\n        element.type == \"central_furnace\"\n        element.fuel_type in [\"oil\", \"gas\"]\n        must:\n        element.combustion_air_complies_with_chapter_17 == True\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Residential.2023.M1402.3\"\n    must:\n        element.combustion_air_complies_with_chapter_17 == True\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Residential.2023.M1402.3\"\n    reference: \"FL.Residential.2023.M1402.3\"", "rule_name": "furnace_combustion_air"}
{"type": "legal_to_bcl", "input": "Requirement for radiant panel wood framing: When element.type == \"radiant_heating_panel\" and element.mounting_surface == \"wood_framing\", it is required that element.orientation == \"parallel_to_framing\" and element.is_secured_to_framing == True", "output": "rule radiant_panel_wood_framing:\n    where:\n        element.type == \"radiant_heating_panel\"\n        element.mounting_surface == \"wood_framing\"\n        must:\n        element.orientation == \"parallel_to_framing\"\n        element.is_secured_to_framing == True\n        element.fastener_location == \"unheated_portion\"\n        element.fastener_clearance_from_element >= 0.25.inches\n        reference: \"FL.Residential.2023.M1406.3\"\n    must:\n        element.orientation == \"parallel_to_framing\"\n        element.is_secured_to_framing == True\n        element.fastener_location == \"unheated_portion\"\n        element.fastener_clearance_from_element >= 0.25.inches\n        reference: \"FL.Residential.2023.M1406.3\"\n    reference: \"FL.Residential.2023.M1406.3\"", "rule_name": "radiant_panel_wood_framing"}
{"type": "bcl_to_physics", "input": "rule radiant_panel_wood_framing with constraints: fastener_clearance_from_element", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1406.3", "rule_name": "radiant_panel_wood_framing"}
{"type": "bcl_completion", "input": "rule radiant_panel_wood_framing:\n    where:\n        element.type == \"radiant_heating_panel\"\n    # Complete this rule", "output": "rule radiant_panel_wood_framing:\n    where:\n        element.type == \"radiant_heating_panel\"\n        element.mounting_surface == \"wood_framing\"\n        must:\n        element.orientation == \"parallel_to_framing\"\n        element.is_secured_to_framing == True\n        element.fastener_location == \"unheated_portion\"\n        element.fastener_clearance_from_element >= 0.25.inches\n        reference: \"FL.Residential.2023.M1406.3\"\n    must:\n        element.orientation == \"parallel_to_framing\"\n        element.is_secured_to_framing == True\n        element.fastener_location == \"unheated_portion\"\n        element.fastener_clearance_from_element >= 0.25.inches\n        reference: \"FL.Residential.2023.M1406.3\"\n    reference: \"FL.Residential.2023.M1406.3\"", "rule_name": "radiant_panel_wood_framing"}
{"type": "legal_to_bcl", "input": "Requirement for radiant panel concrete masonry: When element.type == \"radiant_heating_system\" and element.installation_medium in [\"concrete\", \"masonry\"], it is required that element.is_identified_for_installation == True and element.is_secured_per_manufacturer == True", "output": "rule radiant_panel_concrete_masonry:\n    where:\n        element.type == \"radiant_heating_system\"\n        element.installation_medium in [\"concrete\", \"masonry\"]\n        must:\n        element.is_identified_for_installation == True\n        element.is_secured_per_manufacturer == True\n        element.bridges_expansion_joints == False or element.has_expansion_protection == True\n        reference: \"FL.Residential.2023.M1406.4\"\n    must:\n        element.is_identified_for_installation == True\n        element.is_secured_per_manufacturer == True\n        element.bridges_expansion_joints == False or element.has_expansion_protection == True\n        reference: \"FL.Residential.2023.M1406.4\"\n    reference: \"FL.Residential.2023.M1406.4\"", "rule_name": "radiant_panel_concrete_masonry"}
{"type": "bcl_to_physics", "input": "rule radiant_panel_concrete_masonry with conditions: element.is_identified_for_installation == True, element.is_secured_per_manufacturer == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1406.4", "rule_name": "radiant_panel_concrete_masonry"}
{"type": "bcl_completion", "input": "rule radiant_panel_concrete_masonry:\n    where:\n        element.type == \"radiant_heating_system\"\n    # Complete this rule", "output": "rule radiant_panel_concrete_masonry:\n    where:\n        element.type == \"radiant_heating_system\"\n        element.installation_medium in [\"concrete\", \"masonry\"]\n        must:\n        element.is_identified_for_installation == True\n        element.is_secured_per_manufacturer == True\n        element.bridges_expansion_joints == False or element.has_expansion_protection == True\n        reference: \"FL.Residential.2023.M1406.4\"\n    must:\n        element.is_identified_for_installation == True\n        element.is_secured_per_manufacturer == True\n        element.bridges_expansion_joints == False or element.has_expansion_protection == True\n        reference: \"FL.Residential.2023.M1406.4\"\n    reference: \"FL.Residential.2023.M1406.4\"", "rule_name": "radiant_panel_concrete_masonry"}
{"type": "legal_to_bcl", "input": "Requirement for duct heater fire safety: When element.type == \"electric_duct_heater\" and must:, it is required that element.creates_fire_hazard == False and if element.zero_clearance_rating == False:", "output": "rule duct_heater_fire_safety:\n    where:\n        element.type == \"electric_duct_heater\"\n        must:\n        element.creates_fire_hazard == False\n        if element.zero_clearance_rating == False:\n        element.duct_interrupted_for_clearance == True\n        element.clearance == element.manufacturer_required_clearance\n        reference: \"FL.Residential.2023.M1407.2\"\n    must:\n        element.creates_fire_hazard == False\n        if element.zero_clearance_rating == False:\n        element.duct_interrupted_for_clearance == True\n        element.clearance == element.manufacturer_required_clearance\n        reference: \"FL.Residential.2023.M1407.2\"\n    reference: \"FL.Residential.2023.M1407.2\"", "rule_name": "duct_heater_fire_safety"}
{"type": "bcl_to_physics", "input": "rule duct_heater_fire_safety with conditions: element.creates_fire_hazard == False, if element.zero_clearance_rating == False:", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1407.2", "rule_name": "duct_heater_fire_safety"}
{"type": "bcl_completion", "input": "rule duct_heater_fire_safety:\n    where:\n        element.type == \"electric_duct_heater\"\n    # Complete this rule", "output": "rule duct_heater_fire_safety:\n    where:\n        element.type == \"electric_duct_heater\"\n        must:\n        element.creates_fire_hazard == False\n        if element.zero_clearance_rating == False:\n        element.duct_interrupted_for_clearance == True\n        element.clearance == element.manufacturer_required_clearance\n        reference: \"FL.Residential.2023.M1407.2\"\n    must:\n        element.creates_fire_hazard == False\n        if element.zero_clearance_rating == False:\n        element.duct_interrupted_for_clearance == True\n        element.clearance == element.manufacturer_required_clearance\n        reference: \"FL.Residential.2023.M1407.2\"\n    reference: \"FL.Residential.2023.M1407.2\"", "rule_name": "duct_heater_fire_safety"}
{"type": "legal_to_bcl", "input": "Requirement for duct heater heat pump compatibility: When element.type == \"electric_duct_heater\" and element.distance_to_heat_pump_or_ac < 4.feet, it is required that element.is_listed_for_heat_pump_installation == True and element.heat_pump.is_listed_for_duct_heater == True", "output": "rule duct_heater_heat_pump_compatibility:\n    where:\n        element.type == \"electric_duct_heater\"\n        element.distance_to_heat_pump_or_ac < 4.feet\n        must:\n        element.is_listed_for_heat_pump_installation == True\n        element.heat_pump.is_listed_for_duct_heater == True\n        reference: \"FL.Residential.2023.M1407.3\"\n    must:\n        element.is_listed_for_heat_pump_installation == True\n        element.heat_pump.is_listed_for_duct_heater == True\n        reference: \"FL.Residential.2023.M1407.3\"\n    reference: \"FL.Residential.2023.M1407.3\"", "rule_name": "duct_heater_heat_pump_compatibility"}
{"type": "bcl_to_physics", "input": "rule duct_heater_heat_pump_compatibility with constraints: distance_to_heat_pump_or_ac", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1407.3", "rule_name": "duct_heater_heat_pump_compatibility"}
{"type": "bcl_completion", "input": "rule duct_heater_heat_pump_compatibility:\n    where:\n        element.type == \"electric_duct_heater\"\n    # Complete this rule", "output": "rule duct_heater_heat_pump_compatibility:\n    where:\n        element.type == \"electric_duct_heater\"\n        element.distance_to_heat_pump_or_ac < 4.feet\n        must:\n        element.is_listed_for_heat_pump_installation == True\n        element.heat_pump.is_listed_for_duct_heater == True\n        reference: \"FL.Residential.2023.M1407.3\"\n    must:\n        element.is_listed_for_heat_pump_installation == True\n        element.heat_pump.is_listed_for_duct_heater == True\n        reference: \"FL.Residential.2023.M1407.3\"\n    reference: \"FL.Residential.2023.M1407.3\"", "rule_name": "duct_heater_heat_pump_compatibility"}
{"type": "legal_to_bcl", "input": "Requirement for duct heater fan interlock: When element.type == \"electric_duct_heater\" and must:, it is required that element.has_fan_interlock == True and element.prevents_operation_without_fan == True", "output": "rule duct_heater_fan_interlock:\n    where:\n        element.type == \"electric_duct_heater\"\n        must:\n        element.has_fan_interlock == True\n        element.prevents_operation_without_fan == True\n        reference: \"FL.Residential.2023.M1407.5\"\n    must:\n        element.has_fan_interlock == True\n        element.prevents_operation_without_fan == True\n        reference: \"FL.Residential.2023.M1407.5\"\n    reference: \"FL.Residential.2023.M1407.5\"", "rule_name": "duct_heater_fan_interlock"}
{"type": "bcl_to_physics", "input": "rule duct_heater_fan_interlock with conditions: element.has_fan_interlock == True, element.prevents_operation_without_fan == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M1407.5", "rule_name": "duct_heater_fan_interlock"}
{"type": "bcl_completion", "input": "rule duct_heater_fan_interlock:\n    where:\n        element.type == \"electric_duct_heater\"\n    # Complete this rule", "output": "rule duct_heater_fan_interlock:\n    where:\n        element.type == \"electric_duct_heater\"\n        must:\n        element.has_fan_interlock == True\n        element.prevents_operation_without_fan == True\n        reference: \"FL.Residential.2023.M1407.5\"\n    must:\n        element.has_fan_interlock == True\n        element.prevents_operation_without_fan == True\n        reference: \"FL.Residential.2023.M1407.5\"\n    reference: \"FL.Residential.2023.M1407.5\"", "rule_name": "duct_heater_fan_interlock"}
{"type": "legal_to_bcl", "input": "Requirement for floor furnace register clearances: When element.type == \"floor_furnace\" and must:, it is required that element.floor_register_distance_from_wall >= 6.inches and element.wall_register_distance_from_corner >= 6.inches", "output": "rule floor_furnace_register_clearances:\n    where:\n        element.type == \"floor_furnace\"\n        must:\n        element.floor_register_distance_from_wall >= 6.inches\n        element.wall_register_distance_from_corner >= 6.inches\n        element.register_distance_from_doors >= 12.inches\n        element.register_distance_from_combustibles >= 12.inches\n        element.register_below_projecting_combustibles >= 5.feet\n        reference: \"FL.Residential.2023.M1408.3\"\n        constraint hvac_load_calculation_accuracy:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        thermal.calculated_load(element) == sum(\n        thermal.envelope_load(element.building),\n        thermal.infiltration_load(element.building),\n        thermal.ventilation_load(element.building),\n        thermal.internal_gains(element.building)\n        )\n        safety_factor: 1.1\n        constraint hvac_airflow_capacity:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        flow.air_volume_rate(element) >= thermal.required_airflow(\n        element.capacity,\n        element.temperature_rise\n        )\n        safety_factor: 1.1\n        constraint radiant_panel_heat_distribution:\n        where:\n        element.type == \"radiant_heating_panel\"\n        require:\n        thermal.surface_temperature_variation(element) <= 10.degrees_f\n        element.max_surface_temperature <= 120.degrees_f  # For occupied spaces\n        safety_factor: 1.2\n        constraint duct_heater_temperature_rise:\n        where:\n        element.type == \"electric_duct_heater\"\n        require:\n        thermal.air_temperature_rise(\n        element.heat_output,\n        element.airflow_rate\n        ) <= element.max_temperature_rise\n        safety_factor: 1.2\n        constraint furnace_combustion_air_adequacy:\n        where:\n        element.type == \"central_furnace\"\n        element.fuel_type in [\"oil\", \"gas\"]\n        require:\n        flow.combustion_air_rate(element) >= thermal.required_combustion_air(\n        element.btu_input,\n        element.altitude_correction\n        )\n        safety_factor: 1.5\n        constraint equipment_vibration_isolation:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        element.location == \"outdoor\"\n        require:\n        structural.vibration_transmission(element) <= safety.max_vibration_level\n        element.support.natural_frequency != element.operating_frequency\n    must:\n        element.floor_register_distance_from_wall >= 6.inches\n        element.wall_register_distance_from_corner >= 6.inches\n        element.register_distance_from_doors >= 12.inches\n        element.register_distance_from_combustibles >= 12.inches\n        element.register_below_projecting_combustibles >= 5.feet\n        reference: \"FL.Residential.2023.M1408.3\"\n        constraint hvac_load_calculation_accuracy:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        thermal.calculated_load(element) == sum(\n        thermal.envelope_load(element.building),\n        thermal.infiltration_load(element.building),\n        thermal.ventilation_load(element.building),\n        thermal.internal_gains(element.building)\n        )\n        safety_factor: 1.1\n        constraint hvac_airflow_capacity:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        flow.air_volume_rate(element) >= thermal.required_airflow(\n        element.capacity,\n        element.temperature_rise\n        )\n        safety_factor: 1.1\n        constraint radiant_panel_heat_distribution:\n        where:\n        element.type == \"radiant_heating_panel\"\n        require:\n        thermal.surface_temperature_variation(element) <= 10.degrees_f\n        element.max_surface_temperature <= 120.degrees_f  # For occupied spaces\n        safety_factor: 1.2\n        constraint duct_heater_temperature_rise:\n        where:\n        element.type == \"electric_duct_heater\"\n        require:\n        thermal.air_temperature_rise(\n        element.heat_output,\n        element.airflow_rate\n        ) <= element.max_temperature_rise\n        safety_factor: 1.2\n        constraint furnace_combustion_air_adequacy:\n        where:\n        element.type == \"central_furnace\"\n        element.fuel_type in [\"oil\", \"gas\"]\n        require:\n        flow.combustion_air_rate(element) >= thermal.required_combustion_air(\n        element.btu_input,\n        element.altitude_correction\n        )\n        safety_factor: 1.5\n        constraint equipment_vibration_isolation:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        element.location == \"outdoor\"\n        require:\n        structural.vibration_transmission(element) <= safety.max_vibration_level\n        element.support.natural_frequency != element.operating_frequency\n    safety_factor: 1.1\n    reference: \"FL.Residential.2023.M1408.3\"", "rule_name": "floor_furnace_register_clearances"}
{"type": "bcl_to_physics", "input": "rule floor_furnace_register_clearances with constraints: floor_register_distance_from_wall, wall_register_distance_from_corner", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.M1408.3", "rule_name": "floor_furnace_register_clearances"}
{"type": "bcl_completion", "input": "rule floor_furnace_register_clearances:\n    where:\n        element.type == \"floor_furnace\"\n    # Complete this rule", "output": "rule floor_furnace_register_clearances:\n    where:\n        element.type == \"floor_furnace\"\n        must:\n        element.floor_register_distance_from_wall >= 6.inches\n        element.wall_register_distance_from_corner >= 6.inches\n        element.register_distance_from_doors >= 12.inches\n        element.register_distance_from_combustibles >= 12.inches\n        element.register_below_projecting_combustibles >= 5.feet\n        reference: \"FL.Residential.2023.M1408.3\"\n        constraint hvac_load_calculation_accuracy:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        thermal.calculated_load(element) == sum(\n        thermal.envelope_load(element.building),\n        thermal.infiltration_load(element.building),\n        thermal.ventilation_load(element.building),\n        thermal.internal_gains(element.building)\n        )\n        safety_factor: 1.1\n        constraint hvac_airflow_capacity:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        flow.air_volume_rate(element) >= thermal.required_airflow(\n        element.capacity,\n        element.temperature_rise\n        )\n        safety_factor: 1.1\n        constraint radiant_panel_heat_distribution:\n        where:\n        element.type == \"radiant_heating_panel\"\n        require:\n        thermal.surface_temperature_variation(element) <= 10.degrees_f\n        element.max_surface_temperature <= 120.degrees_f  # For occupied spaces\n        safety_factor: 1.2\n        constraint duct_heater_temperature_rise:\n        where:\n        element.type == \"electric_duct_heater\"\n        require:\n        thermal.air_temperature_rise(\n        element.heat_output,\n        element.airflow_rate\n        ) <= element.max_temperature_rise\n        safety_factor: 1.2\n        constraint furnace_combustion_air_adequacy:\n        where:\n        element.type == \"central_furnace\"\n        element.fuel_type in [\"oil\", \"gas\"]\n        require:\n        flow.combustion_air_rate(element) >= thermal.required_combustion_air(\n        element.btu_input,\n        element.altitude_correction\n        )\n        safety_factor: 1.5\n        constraint equipment_vibration_isolation:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        element.location == \"outdoor\"\n        require:\n        structural.vibration_transmission(element) <= safety.max_vibration_level\n        element.support.natural_frequency != element.operating_frequency\n    must:\n        element.floor_register_distance_from_wall >= 6.inches\n        element.wall_register_distance_from_corner >= 6.inches\n        element.register_distance_from_doors >= 12.inches\n        element.register_distance_from_combustibles >= 12.inches\n        element.register_below_projecting_combustibles >= 5.feet\n        reference: \"FL.Residential.2023.M1408.3\"\n        constraint hvac_load_calculation_accuracy:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        thermal.calculated_load(element) == sum(\n        thermal.envelope_load(element.building),\n        thermal.infiltration_load(element.building),\n        thermal.ventilation_load(element.building),\n        thermal.internal_gains(element.building)\n        )\n        safety_factor: 1.1\n        constraint hvac_airflow_capacity:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        require:\n        flow.air_volume_rate(element) >= thermal.required_airflow(\n        element.capacity,\n        element.temperature_rise\n        )\n        safety_factor: 1.1\n        constraint radiant_panel_heat_distribution:\n        where:\n        element.type == \"radiant_heating_panel\"\n        require:\n        thermal.surface_temperature_variation(element) <= 10.degrees_f\n        element.max_surface_temperature <= 120.degrees_f  # For occupied spaces\n        safety_factor: 1.2\n        constraint duct_heater_temperature_rise:\n        where:\n        element.type == \"electric_duct_heater\"\n        require:\n        thermal.air_temperature_rise(\n        element.heat_output,\n        element.airflow_rate\n        ) <= element.max_temperature_rise\n        safety_factor: 1.2\n        constraint furnace_combustion_air_adequacy:\n        where:\n        element.type == \"central_furnace\"\n        element.fuel_type in [\"oil\", \"gas\"]\n        require:\n        flow.combustion_air_rate(element) >= thermal.required_combustion_air(\n        element.btu_input,\n        element.altitude_correction\n        )\n        safety_factor: 1.5\n        constraint equipment_vibration_isolation:\n        where:\n        element.type in [\"heating_equipment\", \"cooling_equipment\"]\n        element.location == \"outdoor\"\n        require:\n        structural.vibration_transmission(element) <= safety.max_vibration_level\n        element.support.natural_frequency != element.operating_frequency\n    safety_factor: 1.1\n    reference: \"FL.Residential.2023.M1408.3\"", "rule_name": "floor_furnace_register_clearances"}
{"type": "safety_factor_reasoning", "input": "For floor_furnace_register_clearances rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.M1408.3.", "rule_name": "floor_furnace_register_clearances", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for vent connector materials: When connector.type == \"vent_connector\" and location NOT IN [\"attic\", \"unconditioned_space\"], it is required that material.type IN [ and \"type_b_vent\",", "output": "rule vent_connector_materials:\n    where:\n        connector.type == \"vent_connector\"\n        location NOT IN [\"attic\", \"unconditioned_space\"]\n        appliance.category == 1 OR appliance.has_draft_hood == true\n        must:\n        material.type IN [\n        \"type_b_vent\",\n        \"type_l_vent\",\n        \"galvanized_steel\",\n        \"aluminum_sheet\",\n        \"stainless_steel\",\n        \"smooth_interior_metal_pipe\",\n        \"listed_vent_connector\"\n        ]\n        if material.type == \"galvanized_steel\":\n        material.thickness >= 0.018.inches\n        if material.type == \"aluminum_sheet\":\n        material.alloy IN [\"1100\", \"3003\", \"equivalent\"]\n        material.thickness >= 0.027.inches\n        if material.type == \"stainless_steel\":\n        material.thickness >= 0.012.inches\n        connector.insulated == false OR connector.listed_insulated == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.2.3\"\n    must:\n        material.type IN [\n        \"type_b_vent\",\n        \"type_l_vent\",\n        \"galvanized_steel\",\n        \"aluminum_sheet\",\n        \"stainless_steel\",\n        \"smooth_interior_metal_pipe\",\n        \"listed_vent_connector\"\n        ]\n        if material.type == \"galvanized_steel\":\n        material.thickness >= 0.018.inches\n        if material.type == \"aluminum_sheet\":\n        material.alloy IN [\"1100\", \"3003\", \"equivalent\"]\n        material.thickness >= 0.027.inches\n        if material.type == \"stainless_steel\":\n        material.thickness >= 0.012.inches\n        connector.insulated == false OR connector.listed_insulated == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.2.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.FuelGas.503.10.2.3\"", "rule_name": "vent_connector_materials"}
{"type": "bcl_to_physics", "input": "rule vent_connector_materials with constraints: thickness, thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.2.3", "rule_name": "vent_connector_materials"}
{"type": "bcl_completion", "input": "rule vent_connector_materials:\n    where:\n        connector.type == \"vent_connector\"\n    # Complete this rule", "output": "rule vent_connector_materials:\n    where:\n        connector.type == \"vent_connector\"\n        location NOT IN [\"attic\", \"unconditioned_space\"]\n        appliance.category == 1 OR appliance.has_draft_hood == true\n        must:\n        material.type IN [\n        \"type_b_vent\",\n        \"type_l_vent\",\n        \"galvanized_steel\",\n        \"aluminum_sheet\",\n        \"stainless_steel\",\n        \"smooth_interior_metal_pipe\",\n        \"listed_vent_connector\"\n        ]\n        if material.type == \"galvanized_steel\":\n        material.thickness >= 0.018.inches\n        if material.type == \"aluminum_sheet\":\n        material.alloy IN [\"1100\", \"3003\", \"equivalent\"]\n        material.thickness >= 0.027.inches\n        if material.type == \"stainless_steel\":\n        material.thickness >= 0.012.inches\n        connector.insulated == false OR connector.listed_insulated == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.2.3\"\n    must:\n        material.type IN [\n        \"type_b_vent\",\n        \"type_l_vent\",\n        \"galvanized_steel\",\n        \"aluminum_sheet\",\n        \"stainless_steel\",\n        \"smooth_interior_metal_pipe\",\n        \"listed_vent_connector\"\n        ]\n        if material.type == \"galvanized_steel\":\n        material.thickness >= 0.018.inches\n        if material.type == \"aluminum_sheet\":\n        material.alloy IN [\"1100\", \"3003\", \"equivalent\"]\n        material.thickness >= 0.027.inches\n        if material.type == \"stainless_steel\":\n        material.thickness >= 0.012.inches\n        connector.insulated == false OR connector.listed_insulated == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.2.3\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.FuelGas.503.10.2.3\"", "rule_name": "vent_connector_materials"}
{"type": "safety_factor_reasoning", "input": "For vent_connector_materials rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.FuelGas.503.10.2.3.", "rule_name": "vent_connector_materials", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for low heat connector thickness: When appliance.type == \"low_heat\" and appliance.use == \"nonresidential\", it is required that connector.material IN [\"factory_built_chimney\", \"steel_pipe\"] and if connector.diameter < 6.inches:", "output": "rule low_heat_connector_thickness:\n    where:\n        appliance.type == \"low_heat\"\n        appliance.use == \"nonresidential\"\n        must:\n        connector.material IN [\"factory_built_chimney\", \"steel_pipe\"]\n        if connector.diameter < 6.inches:\n        connector.thickness >= 0.019.inches\n        elif connector.diameter < 10.inches:\n        connector.thickness >= 0.023.inches\n        elif connector.diameter <= 12.inches:\n        connector.thickness >= 0.029.inches\n        elif connector.diameter <= 16.inches:\n        connector.thickness >= 0.034.inches\n        else:\n        connector.thickness >= 0.056.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.2.4\"\n    must:\n        connector.material IN [\"factory_built_chimney\", \"steel_pipe\"]\n        if connector.diameter < 6.inches:\n        connector.thickness >= 0.019.inches\n        elif connector.diameter < 10.inches:\n        connector.thickness >= 0.023.inches\n        elif connector.diameter <= 12.inches:\n        connector.thickness >= 0.029.inches\n        elif connector.diameter <= 16.inches:\n        connector.thickness >= 0.034.inches\n        else:\n        connector.thickness >= 0.056.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.2.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.10.2.4\"", "rule_name": "low_heat_connector_thickness"}
{"type": "bcl_to_physics", "input": "rule low_heat_connector_thickness with constraints: diameter, thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.2.4", "rule_name": "low_heat_connector_thickness"}
{"type": "bcl_completion", "input": "rule low_heat_connector_thickness:\n    where:\n        appliance.type == \"low_heat\"\n    # Complete this rule", "output": "rule low_heat_connector_thickness:\n    where:\n        appliance.type == \"low_heat\"\n        appliance.use == \"nonresidential\"\n        must:\n        connector.material IN [\"factory_built_chimney\", \"steel_pipe\"]\n        if connector.diameter < 6.inches:\n        connector.thickness >= 0.019.inches\n        elif connector.diameter < 10.inches:\n        connector.thickness >= 0.023.inches\n        elif connector.diameter <= 12.inches:\n        connector.thickness >= 0.029.inches\n        elif connector.diameter <= 16.inches:\n        connector.thickness >= 0.034.inches\n        else:\n        connector.thickness >= 0.056.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.2.4\"\n    must:\n        connector.material IN [\"factory_built_chimney\", \"steel_pipe\"]\n        if connector.diameter < 6.inches:\n        connector.thickness >= 0.019.inches\n        elif connector.diameter < 10.inches:\n        connector.thickness >= 0.023.inches\n        elif connector.diameter <= 12.inches:\n        connector.thickness >= 0.029.inches\n        elif connector.diameter <= 16.inches:\n        connector.thickness >= 0.034.inches\n        else:\n        connector.thickness >= 0.056.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.2.4\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.10.2.4\"", "rule_name": "low_heat_connector_thickness"}
{"type": "safety_factor_reasoning", "input": "For low_heat_connector_thickness rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.FuelGas.503.10.2.4.", "rule_name": "low_heat_connector_thickness", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for medium heat connector requirements: When appliance.type == \"medium_heat\" and must:, it is required that connector.material IN [\"factory_built_medium_heat_chimney\", \"steel\"] and if connector.area <= 154.square_inches:", "output": "rule medium_heat_connector_requirements:\n    where:\n        appliance.type == \"medium_heat\"\n        must:\n        connector.material IN [\"factory_built_medium_heat_chimney\", \"steel\"]\n        if connector.area <= 154.square_inches:\n        connector.thickness >= 0.053.inches\n        elif connector.area <= 201.square_inches:\n        connector.thickness >= 0.067.inches\n        elif connector.area <= 254.square_inches:\n        connector.thickness >= 0.093.inches\n        else:\n        connector.thickness >= 0.123.inches\n        if vent_gas.temperature > 1000.fahrenheit:\n        lining.type == \"medium_duty_fire_brick\"\n        lining.conforms_to == \"ASTM_C64_Type_F\"\n        if connector.diameter <= 18.inches:\n        lining.thickness >= 2.5.inches\n        else:\n        lining.thickness >= 4.5.inches\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.FuelGas.503.10.2.5\"\n    must:\n        connector.material IN [\"factory_built_medium_heat_chimney\", \"steel\"]\n        if connector.area <= 154.square_inches:\n        connector.thickness >= 0.053.inches\n        elif connector.area <= 201.square_inches:\n        connector.thickness >= 0.067.inches\n        elif connector.area <= 254.square_inches:\n        connector.thickness >= 0.093.inches\n        else:\n        connector.thickness >= 0.123.inches\n        if vent_gas.temperature > 1000.fahrenheit:\n        lining.type == \"medium_duty_fire_brick\"\n        lining.conforms_to == \"ASTM_C64_Type_F\"\n        if connector.diameter <= 18.inches:\n        lining.thickness >= 2.5.inches\n        else:\n        lining.thickness >= 4.5.inches\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.FuelGas.503.10.2.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.FuelGas.503.10.2.5\"", "rule_name": "medium_heat_connector_requirements"}
{"type": "bcl_to_physics", "input": "rule medium_heat_connector_requirements with constraints: area, thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Code.2024.FuelGas.503.10.2.5", "rule_name": "medium_heat_connector_requirements"}
{"type": "bcl_completion", "input": "rule medium_heat_connector_requirements:\n    where:\n        appliance.type == \"medium_heat\"\n    # Complete this rule", "output": "rule medium_heat_connector_requirements:\n    where:\n        appliance.type == \"medium_heat\"\n        must:\n        connector.material IN [\"factory_built_medium_heat_chimney\", \"steel\"]\n        if connector.area <= 154.square_inches:\n        connector.thickness >= 0.053.inches\n        elif connector.area <= 201.square_inches:\n        connector.thickness >= 0.067.inches\n        elif connector.area <= 254.square_inches:\n        connector.thickness >= 0.093.inches\n        else:\n        connector.thickness >= 0.123.inches\n        if vent_gas.temperature > 1000.fahrenheit:\n        lining.type == \"medium_duty_fire_brick\"\n        lining.conforms_to == \"ASTM_C64_Type_F\"\n        if connector.diameter <= 18.inches:\n        lining.thickness >= 2.5.inches\n        else:\n        lining.thickness >= 4.5.inches\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.FuelGas.503.10.2.5\"\n    must:\n        connector.material IN [\"factory_built_medium_heat_chimney\", \"steel\"]\n        if connector.area <= 154.square_inches:\n        connector.thickness >= 0.053.inches\n        elif connector.area <= 201.square_inches:\n        connector.thickness >= 0.067.inches\n        elif connector.area <= 254.square_inches:\n        connector.thickness >= 0.093.inches\n        else:\n        connector.thickness >= 0.123.inches\n        if vent_gas.temperature > 1000.fahrenheit:\n        lining.type == \"medium_duty_fire_brick\"\n        lining.conforms_to == \"ASTM_C64_Type_F\"\n        if connector.diameter <= 18.inches:\n        lining.thickness >= 2.5.inches\n        else:\n        lining.thickness >= 4.5.inches\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.FuelGas.503.10.2.5\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.FuelGas.503.10.2.5\"", "rule_name": "medium_heat_connector_requirements"}
{"type": "safety_factor_reasoning", "input": "For medium_heat_connector_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.FuelGas.503.10.2.5.", "rule_name": "medium_heat_connector_requirements", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for vent connector sizing: When connector.serves_appliance == true and must:, it is required that if appliance.draft_hood_count == 1: and connector.sized_per_section_504 == true", "output": "rule vent_connector_sizing:\n    where:\n        connector.serves_appliance == true\n        must:\n        if appliance.draft_hood_count == 1:\n        connector.sized_per_section_504 == true\n        if appliance.draft_hood_count > 1:\n        manifold.area >= sum(draft_hood.outlet_area for draft_hood in appliance.draft_hoods)\n        connector.rise >= 12.inches\n        if appliances.count > 1 AND connector.type == \"common\":\n        connector.location == \"highest_available_level\"\n        connector.sized_per_section_504 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.3\"\n    must:\n        if appliance.draft_hood_count == 1:\n        connector.sized_per_section_504 == true\n        if appliance.draft_hood_count > 1:\n        manifold.area >= sum(draft_hood.outlet_area for draft_hood in appliance.draft_hoods)\n        connector.rise >= 12.inches\n        if appliances.count > 1 AND connector.type == \"common\":\n        connector.location == \"highest_available_level\"\n        connector.sized_per_section_504 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.10.3\"", "rule_name": "vent_connector_sizing"}
{"type": "bcl_to_physics", "input": "rule vent_connector_sizing with constraints: rise", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.3", "rule_name": "vent_connector_sizing"}
{"type": "bcl_completion", "input": "rule vent_connector_sizing:\n    where:\n        connector.serves_appliance == true\n    # Complete this rule", "output": "rule vent_connector_sizing:\n    where:\n        connector.serves_appliance == true\n        must:\n        if appliance.draft_hood_count == 1:\n        connector.sized_per_section_504 == true\n        if appliance.draft_hood_count > 1:\n        manifold.area >= sum(draft_hood.outlet_area for draft_hood in appliance.draft_hoods)\n        connector.rise >= 12.inches\n        if appliances.count > 1 AND connector.type == \"common\":\n        connector.location == \"highest_available_level\"\n        connector.sized_per_section_504 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.3\"\n    must:\n        if appliance.draft_hood_count == 1:\n        connector.sized_per_section_504 == true\n        if appliance.draft_hood_count > 1:\n        manifold.area >= sum(draft_hood.outlet_area for draft_hood in appliance.draft_hoods)\n        connector.rise >= 12.inches\n        if appliances.count > 1 AND connector.type == \"common\":\n        connector.location == \"highest_available_level\"\n        connector.sized_per_section_504 == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.10.3\"", "rule_name": "vent_connector_sizing"}
{"type": "safety_factor_reasoning", "input": "For vent_connector_sizing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.FuelGas.503.10.3.", "rule_name": "vent_connector_sizing", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for vent connector clearances: When connector.type == \"vent_connector\" and must:, it is required that if connector.material == \"type_b\" AND appliance.listed_for_type_b == true: and clearance_to_combustibles >= manufacturer.listed_clearance", "output": "rule vent_connector_clearances:\n    where:\n        connector.type == \"vent_connector\"\n        must:\n        if connector.material == \"type_b\" AND appliance.listed_for_type_b == true:\n        clearance_to_combustibles >= manufacturer.listed_clearance\n        elif connector.material == \"single_wall_metal\":\n        if appliance.has_draft_hood == true:\n        clearance_to_combustibles >= 6.inches\n        elif appliance.type == \"residential\" AND appliance.has_conversion_burner == true:\n        clearance_to_combustibles >= 9.inches\n        elif appliance.heat_category == \"medium\":\n        clearance_to_combustibles >= 36.inches\n        else:\n        clearance_to_combustibles >= 18.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.5\"\n    must:\n        if connector.material == \"type_b\" AND appliance.listed_for_type_b == true:\n        clearance_to_combustibles >= manufacturer.listed_clearance\n        elif connector.material == \"single_wall_metal\":\n        if appliance.has_draft_hood == true:\n        clearance_to_combustibles >= 6.inches\n        elif appliance.type == \"residential\" AND appliance.has_conversion_burner == true:\n        clearance_to_combustibles >= 9.inches\n        elif appliance.heat_category == \"medium\":\n        clearance_to_combustibles >= 36.inches\n        else:\n        clearance_to_combustibles >= 18.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.FuelGas.503.10.5\"", "rule_name": "vent_connector_clearances"}
{"type": "bcl_to_physics", "input": "rule vent_connector_clearances with constraints: clearance_to_combustibles, clearance_to_combustibles", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.5", "rule_name": "vent_connector_clearances"}
{"type": "bcl_completion", "input": "rule vent_connector_clearances:\n    where:\n        connector.type == \"vent_connector\"\n    # Complete this rule", "output": "rule vent_connector_clearances:\n    where:\n        connector.type == \"vent_connector\"\n        must:\n        if connector.material == \"type_b\" AND appliance.listed_for_type_b == true:\n        clearance_to_combustibles >= manufacturer.listed_clearance\n        elif connector.material == \"single_wall_metal\":\n        if appliance.has_draft_hood == true:\n        clearance_to_combustibles >= 6.inches\n        elif appliance.type == \"residential\" AND appliance.has_conversion_burner == true:\n        clearance_to_combustibles >= 9.inches\n        elif appliance.heat_category == \"medium\":\n        clearance_to_combustibles >= 36.inches\n        else:\n        clearance_to_combustibles >= 18.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.5\"\n    must:\n        if connector.material == \"type_b\" AND appliance.listed_for_type_b == true:\n        clearance_to_combustibles >= manufacturer.listed_clearance\n        elif connector.material == \"single_wall_metal\":\n        if appliance.has_draft_hood == true:\n        clearance_to_combustibles >= 6.inches\n        elif appliance.type == \"residential\" AND appliance.has_conversion_burner == true:\n        clearance_to_combustibles >= 9.inches\n        elif appliance.heat_category == \"medium\":\n        clearance_to_combustibles >= 36.inches\n        else:\n        clearance_to_combustibles >= 18.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.FuelGas.503.10.5\"", "rule_name": "vent_connector_clearances"}
{"type": "safety_factor_reasoning", "input": "For vent_connector_clearances rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.FuelGas.503.10.5.", "rule_name": "vent_connector_clearances", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for vent connector slope: When connector.type == \"vent_connector\" and connector.not_mechanical_draft == true, it is required that connector.slope >= 0.25.inches_per_foot and connector.has_dips == false", "output": "rule vent_connector_slope:\n    where:\n        connector.type == \"vent_connector\"\n        connector.not_mechanical_draft == true\n        must:\n        connector.slope >= 0.25.inches_per_foot\n        connector.has_dips == false\n        connector.has_sags == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.FuelGas.503.10.8\"\n    must:\n        connector.slope >= 0.25.inches_per_foot\n        connector.has_dips == false\n        connector.has_sags == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.FuelGas.503.10.8\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.FuelGas.503.10.8\"", "rule_name": "vent_connector_slope"}
{"type": "bcl_to_physics", "input": "rule vent_connector_slope with constraints: slope", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.8", "rule_name": "vent_connector_slope"}
{"type": "bcl_completion", "input": "rule vent_connector_slope:\n    where:\n        connector.type == \"vent_connector\"\n    # Complete this rule", "output": "rule vent_connector_slope:\n    where:\n        connector.type == \"vent_connector\"\n        connector.not_mechanical_draft == true\n        must:\n        connector.slope >= 0.25.inches_per_foot\n        connector.has_dips == false\n        connector.has_sags == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.FuelGas.503.10.8\"\n    must:\n        connector.slope >= 0.25.inches_per_foot\n        connector.has_dips == false\n        connector.has_sags == false\n        safety_factor: 1.1\n        reference: \"FL.Code.2024.FuelGas.503.10.8\"\n    safety_factor: 1.1\n    reference: \"FL.Code.2024.FuelGas.503.10.8\"", "rule_name": "vent_connector_slope"}
{"type": "safety_factor_reasoning", "input": "For vent_connector_slope rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.FuelGas.503.10.8.", "rule_name": "vent_connector_slope", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for vent connector length: When connector.type == \"vent_connector\" and system.type != \"engineered\", it is required that if connector.type == \"single_wall\": and connector.horizontal_length <= chimney.height * 0.75", "output": "rule vent_connector_length:\n    where:\n        connector.type == \"vent_connector\"\n        system.type != \"engineered\"\n        must:\n        if connector.type == \"single_wall\":\n        connector.horizontal_length <= chimney.height * 0.75\n        elif connector.type == \"type_b_double_wall\":\n        connector.horizontal_length <= chimney.height * 1.0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.9\"\n    must:\n        if connector.type == \"single_wall\":\n        connector.horizontal_length <= chimney.height * 0.75\n        elif connector.type == \"type_b_double_wall\":\n        connector.horizontal_length <= chimney.height * 1.0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.9\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.10.9\"", "rule_name": "vent_connector_length"}
{"type": "bcl_to_physics", "input": "rule vent_connector_length with conditions: if connector.type == \"single_wall\":, connector.horizontal_length <= chimney.height * 0.75", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.9", "rule_name": "vent_connector_length"}
{"type": "bcl_completion", "input": "rule vent_connector_length:\n    where:\n        connector.type == \"vent_connector\"\n    # Complete this rule", "output": "rule vent_connector_length:\n    where:\n        connector.type == \"vent_connector\"\n        system.type != \"engineered\"\n        must:\n        if connector.type == \"single_wall\":\n        connector.horizontal_length <= chimney.height * 0.75\n        elif connector.type == \"type_b_double_wall\":\n        connector.horizontal_length <= chimney.height * 1.0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.9\"\n    must:\n        if connector.type == \"single_wall\":\n        connector.horizontal_length <= chimney.height * 0.75\n        elif connector.type == \"type_b_double_wall\":\n        connector.horizontal_length <= chimney.height * 1.0\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.10.9\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.10.9\"", "rule_name": "vent_connector_length"}
{"type": "safety_factor_reasoning", "input": "For vent_connector_length rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.FuelGas.503.10.9.", "rule_name": "vent_connector_length", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for multiple appliance connection: When vent.serves_multiple_appliances == true and must:, it is required that smaller_connector.entry_level == \"highest_consistent_with_clearance\" and if appliance.category == 1:", "output": "rule multiple_appliance_connection:\n    where:\n        vent.serves_multiple_appliances == true\n        must:\n        smaller_connector.entry_level == \"highest_consistent_with_clearance\"\n        if appliance.category == 1:\n        connection_to_positive_pressure == false\n        if openings.count > 1:\n        openings.at_different_levels == true OR\n        connector.angle_to_vertical <= 45.degrees\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.4\"\n    must:\n        smaller_connector.entry_level == \"highest_consistent_with_clearance\"\n        if appliance.category == 1:\n        connection_to_positive_pressure == false\n        if openings.count > 1:\n        openings.at_different_levels == true OR\n        connector.angle_to_vertical <= 45.degrees\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.FuelGas.503.10.4\"", "rule_name": "multiple_appliance_connection"}
{"type": "bcl_to_physics", "input": "rule multiple_appliance_connection with constraints: angle_to_vertical", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.10.4", "rule_name": "multiple_appliance_connection"}
{"type": "bcl_completion", "input": "rule multiple_appliance_connection:\n    where:\n        vent.serves_multiple_appliances == true\n    # Complete this rule", "output": "rule multiple_appliance_connection:\n    where:\n        vent.serves_multiple_appliances == true\n        must:\n        smaller_connector.entry_level == \"highest_consistent_with_clearance\"\n        if appliance.category == 1:\n        connection_to_positive_pressure == false\n        if openings.count > 1:\n        openings.at_different_levels == true OR\n        connector.angle_to_vertical <= 45.degrees\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.4\"\n    must:\n        smaller_connector.entry_level == \"highest_consistent_with_clearance\"\n        if appliance.category == 1:\n        connection_to_positive_pressure == false\n        if openings.count > 1:\n        openings.at_different_levels == true OR\n        connector.angle_to_vertical <= 45.degrees\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.FuelGas.503.10.4\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.FuelGas.503.10.4\"", "rule_name": "multiple_appliance_connection"}
{"type": "safety_factor_reasoning", "input": "For multiple_appliance_connection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.FuelGas.503.10.4.", "rule_name": "multiple_appliance_connection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for draft hood requirements: When appliance.vented == true and appliance.type NOT IN [, it is required that draft_hood.installed == true and draft_hood.as_supplied_by_manufacturer == true", "output": "rule draft_hood_requirements:\n    where:\n        appliance.vented == true\n        appliance.type NOT IN [\n        \"dual_oven_combination\",\n        \"direct_vent\",\n        \"fan_assisted\",\n        \"requires_chimney_draft\",\n        \"high_input_boiler\",\n        \"power_burner\",\n        \"forced_venting\"\n        ]\n        must:\n        draft_hood.installed == true\n        draft_hood.as_supplied_by_manufacturer == true\n        draft_hood.no_alterations == true\n        if draft_hood.manufacturer_supplied == false:\n        draft_hood.listed_or_approved == true\n        draft_hood.size == appliance.flue_collar_size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.1\"\n    must:\n        draft_hood.installed == true\n        draft_hood.as_supplied_by_manufacturer == true\n        draft_hood.no_alterations == true\n        if draft_hood.manufacturer_supplied == false:\n        draft_hood.listed_or_approved == true\n        draft_hood.size == appliance.flue_collar_size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.12.1\"", "rule_name": "draft_hood_requirements"}
{"type": "bcl_to_physics", "input": "rule draft_hood_requirements with conditions: draft_hood.installed == true, draft_hood.as_supplied_by_manufacturer == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.FuelGas.503.12.1", "rule_name": "draft_hood_requirements"}
{"type": "bcl_completion", "input": "rule draft_hood_requirements:\n    where:\n        appliance.vented == true\n    # Complete this rule", "output": "rule draft_hood_requirements:\n    where:\n        appliance.vented == true\n        appliance.type NOT IN [\n        \"dual_oven_combination\",\n        \"direct_vent\",\n        \"fan_assisted\",\n        \"requires_chimney_draft\",\n        \"high_input_boiler\",\n        \"power_burner\",\n        \"forced_venting\"\n        ]\n        must:\n        draft_hood.installed == true\n        draft_hood.as_supplied_by_manufacturer == true\n        draft_hood.no_alterations == true\n        if draft_hood.manufacturer_supplied == false:\n        draft_hood.listed_or_approved == true\n        draft_hood.size == appliance.flue_collar_size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.1\"\n    must:\n        draft_hood.installed == true\n        draft_hood.as_supplied_by_manufacturer == true\n        draft_hood.no_alterations == true\n        if draft_hood.manufacturer_supplied == false:\n        draft_hood.listed_or_approved == true\n        draft_hood.size == appliance.flue_collar_size\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.12.1\"", "rule_name": "draft_hood_requirements"}
{"type": "safety_factor_reasoning", "input": "For draft_hood_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.FuelGas.503.12.1.", "rule_name": "draft_hood_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for draft hood location: When component.type IN [\"draft_hood\", \"barometric_draft_regulator\"] and must:, it is required that location.room == appliance.room and pressure_difference(component.location, combustion_air_supply) == 0", "output": "rule draft_hood_location:\n    where:\n        component.type IN [\"draft_hood\", \"barometric_draft_regulator\"]\n        must:\n        location.room == appliance.room\n        pressure_difference(component.location, combustion_air_supply) == 0\n        relief_opening.clearance_to_surfaces >= 6.inches\n        relief_opening.unobstructed == true\n        relief_opening.accessible_for_checking == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.5\"\n        constraint vent_flow_capacity:\n        where:\n        vent.installed == true\n        must:\n        draft_pressure = flow.stack_effect_pressure(\n        vent.height,\n        vent_gas.temperature,\n        ambient.temperature\n        )\n        total_resistance = sum(\n        flow.pressure_drop_darcy(\n        segment.friction_factor,\n        segment.length,\n        segment.diameter,\n        gas_velocity,\n        gas_density\n        ) for segment in vent.segments\n        )\n        draft_pressure > total_resistance + appliance.required_draft\n        safety_factor: 1.3\n        constraint connector_temperature_limits:\n        where:\n        connector.type == \"vent_connector\"\n        must:\n        wall_temperature = thermal.heat_transfer_conduction(\n        gas_temperature,\n        ambient_temperature,\n        connector.thickness,\n        connector.thermal_conductivity\n        )\n        wall_temperature < material.maximum_temperature * 0.8\n        surface_temperature_at_clearance = calculate_surface_temp(\n        wall_temperature,\n        clearance_distance,\n        ambient_conditions\n        )\n        surface_temperature_at_clearance < combustible_ignition_temperature * 0.5\n        safety_factor: 1.5\n        constraint common_vent_sizing:\n        where:\n        vent.serves_multiple == true\n        must:\n        vent.area >= sum(appliance.required_vent_area for appliance in connected_appliances)\n        gas_velocity = total_flow_rate / vent.area\n        reynolds_number = flow.reynolds_number(gas_velocity, vent.diameter, gas_viscosity)\n        if appliances.all_natural_draft:\n        reynolds_number < 2300  # Laminar flow\n        else:\n        reynolds_number < 10000  # Controlled turbulent\n        safety_factor: 1.2\n        constraint drainage_and_condensation:\n        where:\n        connector.installed == true\n        must:\n        slope_angle = atan(connector.slope)\n        condensate_flow_velocity = sqrt(2 * gravity * sin(slope_angle) * hydraulic_radius)\n        condensate_drainage_rate > condensation_rate(\n        vent_gas.temperature,\n        vent_gas.dewpoint,\n        connector.surface_temperature\n        )\n        safety_factor: 1.3\n        constraint draft_hood_dilution:\n        where:\n        draft_hood.installed == true\n        must:\n        dilution_ratio = relief_opening.area / flue_collar.area\n        dilution_ratio >= 0.75  # Typical requirement\n        relief_opening_velocity = spillage_flow / relief_opening.area\n        relief_opening_velocity < 50.fpm  # Prevent spillage sensing\n    must:\n        location.room == appliance.room\n        pressure_difference(component.location, combustion_air_supply) == 0\n        relief_opening.clearance_to_surfaces >= 6.inches\n        relief_opening.unobstructed == true\n        relief_opening.accessible_for_checking == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.5\"\n        constraint vent_flow_capacity:\n        where:\n        vent.installed == true\n        must:\n        draft_pressure = flow.stack_effect_pressure(\n        vent.height,\n        vent_gas.temperature,\n        ambient.temperature\n        )\n        total_resistance = sum(\n        flow.pressure_drop_darcy(\n        segment.friction_factor,\n        segment.length,\n        segment.diameter,\n        gas_velocity,\n        gas_density\n        ) for segment in vent.segments\n        )\n        draft_pressure > total_resistance + appliance.required_draft\n        safety_factor: 1.3\n        constraint connector_temperature_limits:\n        where:\n        connector.type == \"vent_connector\"\n        must:\n        wall_temperature = thermal.heat_transfer_conduction(\n        gas_temperature,\n        ambient_temperature,\n        connector.thickness,\n        connector.thermal_conductivity\n        )\n        wall_temperature < material.maximum_temperature * 0.8\n        surface_temperature_at_clearance = calculate_surface_temp(\n        wall_temperature,\n        clearance_distance,\n        ambient_conditions\n        )\n        surface_temperature_at_clearance < combustible_ignition_temperature * 0.5\n        safety_factor: 1.5\n        constraint common_vent_sizing:\n        where:\n        vent.serves_multiple == true\n        must:\n        vent.area >= sum(appliance.required_vent_area for appliance in connected_appliances)\n        gas_velocity = total_flow_rate / vent.area\n        reynolds_number = flow.reynolds_number(gas_velocity, vent.diameter, gas_viscosity)\n        if appliances.all_natural_draft:\n        reynolds_number < 2300  # Laminar flow\n        else:\n        reynolds_number < 10000  # Controlled turbulent\n        safety_factor: 1.2\n        constraint drainage_and_condensation:\n        where:\n        connector.installed == true\n        must:\n        slope_angle = atan(connector.slope)\n        condensate_flow_velocity = sqrt(2 * gravity * sin(slope_angle) * hydraulic_radius)\n        condensate_drainage_rate > condensation_rate(\n        vent_gas.temperature,\n        vent_gas.dewpoint,\n        connector.surface_temperature\n        )\n        safety_factor: 1.3\n        constraint draft_hood_dilution:\n        where:\n        draft_hood.installed == true\n        must:\n        dilution_ratio = relief_opening.area / flue_collar.area\n        dilution_ratio >= 0.75  # Typical requirement\n        relief_opening_velocity = spillage_flow / relief_opening.area\n        relief_opening_velocity < 50.fpm  # Prevent spillage sensing\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.12.5\"", "rule_name": "draft_hood_location"}
{"type": "bcl_to_physics", "input": "rule draft_hood_location with constraints: clearance_to_surfaces, dilution_ratio", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.FuelGas.503.12.5", "rule_name": "draft_hood_location"}
{"type": "bcl_completion", "input": "rule draft_hood_location:\n    where:\n        component.type IN [\"draft_hood\", \"barometric_draft_regulator\"]\n    # Complete this rule", "output": "rule draft_hood_location:\n    where:\n        component.type IN [\"draft_hood\", \"barometric_draft_regulator\"]\n        must:\n        location.room == appliance.room\n        pressure_difference(component.location, combustion_air_supply) == 0\n        relief_opening.clearance_to_surfaces >= 6.inches\n        relief_opening.unobstructed == true\n        relief_opening.accessible_for_checking == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.5\"\n        constraint vent_flow_capacity:\n        where:\n        vent.installed == true\n        must:\n        draft_pressure = flow.stack_effect_pressure(\n        vent.height,\n        vent_gas.temperature,\n        ambient.temperature\n        )\n        total_resistance = sum(\n        flow.pressure_drop_darcy(\n        segment.friction_factor,\n        segment.length,\n        segment.diameter,\n        gas_velocity,\n        gas_density\n        ) for segment in vent.segments\n        )\n        draft_pressure > total_resistance + appliance.required_draft\n        safety_factor: 1.3\n        constraint connector_temperature_limits:\n        where:\n        connector.type == \"vent_connector\"\n        must:\n        wall_temperature = thermal.heat_transfer_conduction(\n        gas_temperature,\n        ambient_temperature,\n        connector.thickness,\n        connector.thermal_conductivity\n        )\n        wall_temperature < material.maximum_temperature * 0.8\n        surface_temperature_at_clearance = calculate_surface_temp(\n        wall_temperature,\n        clearance_distance,\n        ambient_conditions\n        )\n        surface_temperature_at_clearance < combustible_ignition_temperature * 0.5\n        safety_factor: 1.5\n        constraint common_vent_sizing:\n        where:\n        vent.serves_multiple == true\n        must:\n        vent.area >= sum(appliance.required_vent_area for appliance in connected_appliances)\n        gas_velocity = total_flow_rate / vent.area\n        reynolds_number = flow.reynolds_number(gas_velocity, vent.diameter, gas_viscosity)\n        if appliances.all_natural_draft:\n        reynolds_number < 2300  # Laminar flow\n        else:\n        reynolds_number < 10000  # Controlled turbulent\n        safety_factor: 1.2\n        constraint drainage_and_condensation:\n        where:\n        connector.installed == true\n        must:\n        slope_angle = atan(connector.slope)\n        condensate_flow_velocity = sqrt(2 * gravity * sin(slope_angle) * hydraulic_radius)\n        condensate_drainage_rate > condensation_rate(\n        vent_gas.temperature,\n        vent_gas.dewpoint,\n        connector.surface_temperature\n        )\n        safety_factor: 1.3\n        constraint draft_hood_dilution:\n        where:\n        draft_hood.installed == true\n        must:\n        dilution_ratio = relief_opening.area / flue_collar.area\n        dilution_ratio >= 0.75  # Typical requirement\n        relief_opening_velocity = spillage_flow / relief_opening.area\n        relief_opening_velocity < 50.fpm  # Prevent spillage sensing\n    must:\n        location.room == appliance.room\n        pressure_difference(component.location, combustion_air_supply) == 0\n        relief_opening.clearance_to_surfaces >= 6.inches\n        relief_opening.unobstructed == true\n        relief_opening.accessible_for_checking == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.FuelGas.503.12.5\"\n        constraint vent_flow_capacity:\n        where:\n        vent.installed == true\n        must:\n        draft_pressure = flow.stack_effect_pressure(\n        vent.height,\n        vent_gas.temperature,\n        ambient.temperature\n        )\n        total_resistance = sum(\n        flow.pressure_drop_darcy(\n        segment.friction_factor,\n        segment.length,\n        segment.diameter,\n        gas_velocity,\n        gas_density\n        ) for segment in vent.segments\n        )\n        draft_pressure > total_resistance + appliance.required_draft\n        safety_factor: 1.3\n        constraint connector_temperature_limits:\n        where:\n        connector.type == \"vent_connector\"\n        must:\n        wall_temperature = thermal.heat_transfer_conduction(\n        gas_temperature,\n        ambient_temperature,\n        connector.thickness,\n        connector.thermal_conductivity\n        )\n        wall_temperature < material.maximum_temperature * 0.8\n        surface_temperature_at_clearance = calculate_surface_temp(\n        wall_temperature,\n        clearance_distance,\n        ambient_conditions\n        )\n        surface_temperature_at_clearance < combustible_ignition_temperature * 0.5\n        safety_factor: 1.5\n        constraint common_vent_sizing:\n        where:\n        vent.serves_multiple == true\n        must:\n        vent.area >= sum(appliance.required_vent_area for appliance in connected_appliances)\n        gas_velocity = total_flow_rate / vent.area\n        reynolds_number = flow.reynolds_number(gas_velocity, vent.diameter, gas_viscosity)\n        if appliances.all_natural_draft:\n        reynolds_number < 2300  # Laminar flow\n        else:\n        reynolds_number < 10000  # Controlled turbulent\n        safety_factor: 1.2\n        constraint drainage_and_condensation:\n        where:\n        connector.installed == true\n        must:\n        slope_angle = atan(connector.slope)\n        condensate_flow_velocity = sqrt(2 * gravity * sin(slope_angle) * hydraulic_radius)\n        condensate_drainage_rate > condensation_rate(\n        vent_gas.temperature,\n        vent_gas.dewpoint,\n        connector.surface_temperature\n        )\n        safety_factor: 1.3\n        constraint draft_hood_dilution:\n        where:\n        draft_hood.installed == true\n        must:\n        dilution_ratio = relief_opening.area / flue_collar.area\n        dilution_ratio >= 0.75  # Typical requirement\n        relief_opening_velocity = spillage_flow / relief_opening.area\n        relief_opening_velocity < 50.fpm  # Prevent spillage sensing\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.FuelGas.503.12.5\"", "rule_name": "draft_hood_location"}
{"type": "safety_factor_reasoning", "input": "For draft_hood_location rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.FuelGas.503.12.5.", "rule_name": "draft_hood_location", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for boiler installation clearance: When element.type == \"boiler\" and must:, it is required that element.clearance_from_combustibles >= element.manufacturer_required_clearance and safety_factor: 1.5", "output": "rule boiler_installation_clearance:\n    where:\n        element.type == \"boiler\"\n        must:\n        element.clearance_from_combustibles >= element.manufacturer_required_clearance\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2001.2\"\n    must:\n        element.clearance_from_combustibles >= element.manufacturer_required_clearance\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2001.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.M2001.2\"", "rule_name": "boiler_installation_clearance"}
{"type": "bcl_to_physics", "input": "rule boiler_installation_clearance with conditions: element.clearance_from_combustibles >= element.manufacturer_required_clearance, safety_factor: 1.5", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Residential.2023.M2001.2", "rule_name": "boiler_installation_clearance"}
{"type": "bcl_completion", "input": "rule boiler_installation_clearance:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule boiler_installation_clearance:\n    where:\n        element.type == \"boiler\"\n        must:\n        element.clearance_from_combustibles >= element.manufacturer_required_clearance\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2001.2\"\n    must:\n        element.clearance_from_combustibles >= element.manufacturer_required_clearance\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2001.2\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.M2001.2\"", "rule_name": "boiler_installation_clearance"}
{"type": "safety_factor_reasoning", "input": "For boiler_installation_clearance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.M2001.2.", "rule_name": "boiler_installation_clearance", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for boiler shutoff valves: When element.type == \"boiler\" and element.system_type != \"single_low_pressure_steam\", it is required that element.has_supply_shutoff_valve == True and element.has_return_shutoff_valve == True", "output": "rule boiler_shutoff_valves:\n    where:\n        element.type == \"boiler\"\n        element.system_type != \"single_low_pressure_steam\"\n        must:\n        element.has_supply_shutoff_valve == True\n        element.has_return_shutoff_valve == True\n        reference: \"FL.Residential.2023.M2001.3\"\n    must:\n        element.has_supply_shutoff_valve == True\n        element.has_return_shutoff_valve == True\n        reference: \"FL.Residential.2023.M2001.3\"\n    reference: \"FL.Residential.2023.M2001.3\"", "rule_name": "boiler_shutoff_valves"}
{"type": "bcl_to_physics", "input": "rule boiler_shutoff_valves with conditions: element.has_supply_shutoff_valve == True, element.has_return_shutoff_valve == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M2001.3", "rule_name": "boiler_shutoff_valves"}
{"type": "bcl_completion", "input": "rule boiler_shutoff_valves:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule boiler_shutoff_valves:\n    where:\n        element.type == \"boiler\"\n        element.system_type != \"single_low_pressure_steam\"\n        must:\n        element.has_supply_shutoff_valve == True\n        element.has_return_shutoff_valve == True\n        reference: \"FL.Residential.2023.M2001.3\"\n    must:\n        element.has_supply_shutoff_valve == True\n        element.has_return_shutoff_valve == True\n        reference: \"FL.Residential.2023.M2001.3\"\n    reference: \"FL.Residential.2023.M2001.3\"", "rule_name": "boiler_shutoff_valves"}
{"type": "legal_to_bcl", "input": "Requirement for boiler flood resistant installation: When element.type == \"boiler\" and element.location.is_flood_hazard_area == True, it is required that element.elevation >= element.location.base_flood_elevation + 1.0.feet and safety_factor: 1.2", "output": "rule boiler_flood_resistant_installation:\n    where:\n        element.type == \"boiler\"\n        element.location.is_flood_hazard_area == True\n        must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M2001.4\"\n    must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M2001.4\"\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.M2001.4\"", "rule_name": "boiler_flood_resistant_installation"}
{"type": "bcl_to_physics", "input": "rule boiler_flood_resistant_installation with conditions: element.elevation >= element.location.base_flood_elevation + 1.0.feet, safety_factor: 1.2", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Residential.2023.M2001.4", "rule_name": "boiler_flood_resistant_installation"}
{"type": "bcl_completion", "input": "rule boiler_flood_resistant_installation:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule boiler_flood_resistant_installation:\n    where:\n        element.type == \"boiler\"\n        element.location.is_flood_hazard_area == True\n        must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M2001.4\"\n    must:\n        element.elevation >= element.location.base_flood_elevation + 1.0.feet\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.M2001.4\"\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.M2001.4\"", "rule_name": "boiler_flood_resistant_installation"}
{"type": "safety_factor_reasoning", "input": "For boiler_flood_resistant_installation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.M2001.4.", "rule_name": "boiler_flood_resistant_installation", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for hot water boiler gauges: When element.type == \"boiler\" and element.boiler_type == \"hot_water\", it is required that element.has_pressure_gauge == True and element.has_temperature_gauge == True", "output": "rule hot_water_boiler_gauges:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type == \"hot_water\"\n        must:\n        element.has_pressure_gauge == True\n        element.has_temperature_gauge == True\n        element.pressure_gauge_range.includes(element.normal_operating_pressure)\n        element.temperature_gauge_range.includes(element.normal_operating_temperature)\n        reference: \"FL.Residential.2023.M2002.2\"\n    must:\n        element.has_pressure_gauge == True\n        element.has_temperature_gauge == True\n        element.pressure_gauge_range.includes(element.normal_operating_pressure)\n        element.temperature_gauge_range.includes(element.normal_operating_temperature)\n        reference: \"FL.Residential.2023.M2002.2\"\n    reference: \"FL.Residential.2023.M2002.2\"", "rule_name": "hot_water_boiler_gauges"}
{"type": "bcl_to_physics", "input": "rule hot_water_boiler_gauges with conditions: element.has_pressure_gauge == True, element.has_temperature_gauge == True", "output": "This rule ensures safety through physics-based validation. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.M2002.2", "rule_name": "hot_water_boiler_gauges"}
{"type": "bcl_completion", "input": "rule hot_water_boiler_gauges:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule hot_water_boiler_gauges:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type == \"hot_water\"\n        must:\n        element.has_pressure_gauge == True\n        element.has_temperature_gauge == True\n        element.pressure_gauge_range.includes(element.normal_operating_pressure)\n        element.temperature_gauge_range.includes(element.normal_operating_temperature)\n        reference: \"FL.Residential.2023.M2002.2\"\n    must:\n        element.has_pressure_gauge == True\n        element.has_temperature_gauge == True\n        element.pressure_gauge_range.includes(element.normal_operating_pressure)\n        element.temperature_gauge_range.includes(element.normal_operating_temperature)\n        reference: \"FL.Residential.2023.M2002.2\"\n    reference: \"FL.Residential.2023.M2002.2\"", "rule_name": "hot_water_boiler_gauges"}
{"type": "legal_to_bcl", "input": "Requirement for steam boiler gauges: When element.type == \"boiler\" and element.boiler_type == \"steam\", it is required that element.has_water_gauge_glass == True and element.has_pressure_gauge == True", "output": "rule steam_boiler_gauges:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type == \"steam\"\n        must:\n        element.has_water_gauge_glass == True\n        element.has_pressure_gauge == True\n        abs(element.water_gauge_glass_midpoint - element.normal_water_level) < 2.inches\n        reference: \"FL.Residential.2023.M2002.3\"\n    must:\n        element.has_water_gauge_glass == True\n        element.has_pressure_gauge == True\n        abs(element.water_gauge_glass_midpoint - element.normal_water_level) < 2.inches\n        reference: \"FL.Residential.2023.M2002.3\"\n    reference: \"FL.Residential.2023.M2002.3\"", "rule_name": "steam_boiler_gauges"}
{"type": "bcl_to_physics", "input": "rule steam_boiler_gauges with conditions: element.has_water_gauge_glass == True, element.has_pressure_gauge == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M2002.3", "rule_name": "steam_boiler_gauges"}
{"type": "bcl_completion", "input": "rule steam_boiler_gauges:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule steam_boiler_gauges:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type == \"steam\"\n        must:\n        element.has_water_gauge_glass == True\n        element.has_pressure_gauge == True\n        abs(element.water_gauge_glass_midpoint - element.normal_water_level) < 2.inches\n        reference: \"FL.Residential.2023.M2002.3\"\n    must:\n        element.has_water_gauge_glass == True\n        element.has_pressure_gauge == True\n        abs(element.water_gauge_glass_midpoint - element.normal_water_level) < 2.inches\n        reference: \"FL.Residential.2023.M2002.3\"\n    reference: \"FL.Residential.2023.M2002.3\"", "rule_name": "steam_boiler_gauges"}
{"type": "legal_to_bcl", "input": "Requirement for boiler pressure relief valve: When element.type == \"boiler\" and must:, it is required that element.has_pressure_relief_valve == True and element.pressure_relief_valve.capacity >= thermal.relief_capacity(", "output": "rule boiler_pressure_relief_valve:\n    where:\n        element.type == \"boiler\"\n        must:\n        element.has_pressure_relief_valve == True\n        element.pressure_relief_valve.capacity >= thermal.relief_capacity(\n        element.btu_input,\n        element.heating_surface_area\n        )\n        element.pressure_relief_valve.set_pressure == element.maximum_allowable_working_pressure\n        element.pressure_relief_discharge.terminates_within_floor_distance <= 18.inches\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2002.4\"\n    must:\n        element.has_pressure_relief_valve == True\n        element.pressure_relief_valve.capacity >= thermal.relief_capacity(\n        element.btu_input,\n        element.heating_surface_area\n        )\n        element.pressure_relief_valve.set_pressure == element.maximum_allowable_working_pressure\n        element.pressure_relief_discharge.terminates_within_floor_distance <= 18.inches\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2002.4\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.M2002.4\"", "rule_name": "boiler_pressure_relief_valve"}
{"type": "bcl_to_physics", "input": "rule boiler_pressure_relief_valve with constraints: terminates_within_floor_distance", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Residential.2023.M2002.4", "rule_name": "boiler_pressure_relief_valve"}
{"type": "bcl_completion", "input": "rule boiler_pressure_relief_valve:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule boiler_pressure_relief_valve:\n    where:\n        element.type == \"boiler\"\n        must:\n        element.has_pressure_relief_valve == True\n        element.pressure_relief_valve.capacity >= thermal.relief_capacity(\n        element.btu_input,\n        element.heating_surface_area\n        )\n        element.pressure_relief_valve.set_pressure == element.maximum_allowable_working_pressure\n        element.pressure_relief_discharge.terminates_within_floor_distance <= 18.inches\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2002.4\"\n    must:\n        element.has_pressure_relief_valve == True\n        element.pressure_relief_valve.capacity >= thermal.relief_capacity(\n        element.btu_input,\n        element.heating_surface_area\n        )\n        element.pressure_relief_valve.set_pressure == element.maximum_allowable_working_pressure\n        element.pressure_relief_discharge.terminates_within_floor_distance <= 18.inches\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2002.4\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.M2002.4\"", "rule_name": "boiler_pressure_relief_valve"}
{"type": "safety_factor_reasoning", "input": "For boiler_pressure_relief_valve rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.M2002.4.", "rule_name": "boiler_pressure_relief_valve", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for boiler low water cutoff: When element.type == \"boiler\" and element.boiler_type in [\"steam\", \"hot_water\"], it is required that element.has_low_water_cutoff == True and element.low_water_cutoff.stops_combustion_on_low_water == True", "output": "rule boiler_low_water_cutoff:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type in [\"steam\", \"hot_water\"]\n        not (element.requires_forced_circulation and element.has_flow_sensing_control)\n        must:\n        element.has_low_water_cutoff == True\n        element.low_water_cutoff.stops_combustion_on_low_water == True\n        reference: \"FL.Residential.2023.M2002.5\"\n    must:\n        element.has_low_water_cutoff == True\n        element.low_water_cutoff.stops_combustion_on_low_water == True\n        reference: \"FL.Residential.2023.M2002.5\"\n    reference: \"FL.Residential.2023.M2002.5\"", "rule_name": "boiler_low_water_cutoff"}
{"type": "bcl_to_physics", "input": "rule boiler_low_water_cutoff with conditions: element.has_low_water_cutoff == True, element.low_water_cutoff.stops_combustion_on_low_water == True", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.M2002.5", "rule_name": "boiler_low_water_cutoff"}
{"type": "bcl_completion", "input": "rule boiler_low_water_cutoff:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule boiler_low_water_cutoff:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type in [\"steam\", \"hot_water\"]\n        not (element.requires_forced_circulation and element.has_flow_sensing_control)\n        must:\n        element.has_low_water_cutoff == True\n        element.low_water_cutoff.stops_combustion_on_low_water == True\n        reference: \"FL.Residential.2023.M2002.5\"\n    must:\n        element.has_low_water_cutoff == True\n        element.low_water_cutoff.stops_combustion_on_low_water == True\n        reference: \"FL.Residential.2023.M2002.5\"\n    reference: \"FL.Residential.2023.M2002.5\"", "rule_name": "boiler_low_water_cutoff"}
{"type": "legal_to_bcl", "input": "Requirement for hot water boiler expansion tank: When element.type == \"boiler\" and element.boiler_type == \"hot_water\", it is required that element.has_expansion_tank == True and reference: \"FL.Residential.2023.M2003.1\"", "output": "rule hot_water_boiler_expansion_tank:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type == \"hot_water\"\n        must:\n        element.has_expansion_tank == True\n        reference: \"FL.Residential.2023.M2003.1\"\n    must:\n        element.has_expansion_tank == True\n        reference: \"FL.Residential.2023.M2003.1\"\n    reference: \"FL.Residential.2023.M2003.1\"", "rule_name": "hot_water_boiler_expansion_tank"}
{"type": "bcl_to_physics", "input": "rule hot_water_boiler_expansion_tank with conditions: element.has_expansion_tank == True, reference: \"FL.Residential.2023.M2003.1\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M2003.1", "rule_name": "hot_water_boiler_expansion_tank"}
{"type": "bcl_completion", "input": "rule hot_water_boiler_expansion_tank:\n    where:\n        element.type == \"boiler\"\n    # Complete this rule", "output": "rule hot_water_boiler_expansion_tank:\n    where:\n        element.type == \"boiler\"\n        element.boiler_type == \"hot_water\"\n        must:\n        element.has_expansion_tank == True\n        reference: \"FL.Residential.2023.M2003.1\"\n    must:\n        element.has_expansion_tank == True\n        reference: \"FL.Residential.2023.M2003.1\"\n    reference: \"FL.Residential.2023.M2003.1\"", "rule_name": "hot_water_boiler_expansion_tank"}
{"type": "legal_to_bcl", "input": "Requirement for expansion tank support: When element.type == \"expansion_tank\" and element.tank_type == \"nonpressurized\", it is required that structural.support_capacity(element.support) >= 2.0 * water.density * element.volume and element.is_securely_fastened == True", "output": "rule expansion_tank_support:\n    where:\n        element.type == \"expansion_tank\"\n        element.tank_type == \"nonpressurized\"\n        must:\n        structural.support_capacity(element.support) >= 2.0 * water.density * element.volume\n        element.is_securely_fastened == True\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.M2003.1\"\n    must:\n        structural.support_capacity(element.support) >= 2.0 * water.density * element.volume\n        element.is_securely_fastened == True\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.M2003.1\"\n    safety_factor: 2.0\n    reference: \"FL.Residential.2023.M2003.1\"", "rule_name": "expansion_tank_support"}
{"type": "bcl_to_physics", "input": "rule expansion_tank_support with constraints: structural.support_capacity(element.support)", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Residential.2023.M2003.1", "rule_name": "expansion_tank_support"}
{"type": "bcl_completion", "input": "rule expansion_tank_support:\n    where:\n        element.type == \"expansion_tank\"\n    # Complete this rule", "output": "rule expansion_tank_support:\n    where:\n        element.type == \"expansion_tank\"\n        element.tank_type == \"nonpressurized\"\n        must:\n        structural.support_capacity(element.support) >= 2.0 * water.density * element.volume\n        element.is_securely_fastened == True\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.M2003.1\"\n    must:\n        structural.support_capacity(element.support) >= 2.0 * water.density * element.volume\n        element.is_securely_fastened == True\n        safety_factor: 2.0\n        reference: \"FL.Residential.2023.M2003.1\"\n    safety_factor: 2.0\n    reference: \"FL.Residential.2023.M2003.1\"", "rule_name": "expansion_tank_support"}
{"type": "safety_factor_reasoning", "input": "For expansion_tank_support rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.M2003.1.", "rule_name": "expansion_tank_support", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for pressurized expansion tank capacity: When element.type == \"expansion_tank\" and element.tank_type == \"pressurized\", it is required that element.test_pressure_rating >= 2.5 * element.system.allowable_working_pressure and element.volume >= thermal.expansion_tank_volume(", "output": "rule pressurized_expansion_tank_capacity:\n    where:\n        element.type == \"expansion_tank\"\n        element.tank_type == \"pressurized\"\n        must:\n        element.test_pressure_rating >= 2.5 * element.system.allowable_working_pressure\n        element.volume >= thermal.expansion_tank_volume(\n        element.system.water_volume,\n        element.system.temperature_range,\n        element.system.pressure_range\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2003.1.1\"\n    must:\n        element.test_pressure_rating >= 2.5 * element.system.allowable_working_pressure\n        element.volume >= thermal.expansion_tank_volume(\n        element.system.water_volume,\n        element.system.temperature_range,\n        element.system.pressure_range\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2003.1.1\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.M2003.1.1\"", "rule_name": "pressurized_expansion_tank_capacity"}
{"type": "bcl_to_physics", "input": "rule pressurized_expansion_tank_capacity with constraints: test_pressure_rating", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.M2003.1.1", "rule_name": "pressurized_expansion_tank_capacity"}
{"type": "bcl_completion", "input": "rule pressurized_expansion_tank_capacity:\n    where:\n        element.type == \"expansion_tank\"\n    # Complete this rule", "output": "rule pressurized_expansion_tank_capacity:\n    where:\n        element.type == \"expansion_tank\"\n        element.tank_type == \"pressurized\"\n        must:\n        element.test_pressure_rating >= 2.5 * element.system.allowable_working_pressure\n        element.volume >= thermal.expansion_tank_volume(\n        element.system.water_volume,\n        element.system.temperature_range,\n        element.system.pressure_range\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2003.1.1\"\n    must:\n        element.test_pressure_rating >= 2.5 * element.system.allowable_working_pressure\n        element.volume >= thermal.expansion_tank_volume(\n        element.system.water_volume,\n        element.system.temperature_range,\n        element.system.pressure_range\n        )\n        safety_factor: 1.5\n        reference: \"FL.Residential.2023.M2003.1.1\"\n    safety_factor: 1.5\n    reference: \"FL.Residential.2023.M2003.1.1\"", "rule_name": "pressurized_expansion_tank_capacity"}
{"type": "safety_factor_reasoning", "input": "For pressurized_expansion_tank_capacity rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Residential.2023.M2003.1.1.", "rule_name": "pressurized_expansion_tank_capacity", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for water heater prohibited locations: When element.type == \"water_heater\" and element.fuel_type != \"electric\", it is required that element.location.room_type != \"storage_closet\" and if element.location.room_type in [\"bedroom\", \"bathroom\"] and element.vent_type != \"direct_vent\":", "output": "rule water_heater_prohibited_locations:\n    where:\n        element.type == \"water_heater\"\n        element.fuel_type != \"electric\"\n        must:\n        element.location.room_type != \"storage_closet\"\n        if element.location.room_type in [\"bedroom\", \"bathroom\"] and element.vent_type != \"direct_vent\":\n        element.has_sealed_enclosure == True\n        element.combustion_air_source != \"living_space\"\n        reference: \"FL.Residential.2023.M2005.2\"\n    must:\n        element.location.room_type != \"storage_closet\"\n        if element.location.room_type in [\"bedroom\", \"bathroom\"] and element.vent_type != \"direct_vent\":\n        element.has_sealed_enclosure == True\n        element.combustion_air_source != \"living_space\"\n        reference: \"FL.Residential.2023.M2005.2\"\n    reference: \"FL.Residential.2023.M2005.2\"", "rule_name": "water_heater_prohibited_locations"}
{"type": "bcl_to_physics", "input": "rule water_heater_prohibited_locations with conditions: element.location.room_type != \"storage_closet\", if element.location.room_type in [\"bedroom\", \"bathroom\"] and element.vent_type != \"direct_vent\":", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M2005.2", "rule_name": "water_heater_prohibited_locations"}
{"type": "bcl_completion", "input": "rule water_heater_prohibited_locations:\n    where:\n        element.type == \"water_heater\"\n    # Complete this rule", "output": "rule water_heater_prohibited_locations:\n    where:\n        element.type == \"water_heater\"\n        element.fuel_type != \"electric\"\n        must:\n        element.location.room_type != \"storage_closet\"\n        if element.location.room_type in [\"bedroom\", \"bathroom\"] and element.vent_type != \"direct_vent\":\n        element.has_sealed_enclosure == True\n        element.combustion_air_source != \"living_space\"\n        reference: \"FL.Residential.2023.M2005.2\"\n    must:\n        element.location.room_type != \"storage_closet\"\n        if element.location.room_type in [\"bedroom\", \"bathroom\"] and element.vent_type != \"direct_vent\":\n        element.has_sealed_enclosure == True\n        element.combustion_air_source != \"living_space\"\n        reference: \"FL.Residential.2023.M2005.2\"\n    reference: \"FL.Residential.2023.M2005.2\"", "rule_name": "water_heater_prohibited_locations"}
{"type": "legal_to_bcl", "input": "Requirement for water heater attic access: When element.type == \"water_heater\" and element.location.space_type in [\"attic\", \"crawl_space\"], it is required that element.access_path.room.ventilation_complies_with_code == True and reference: \"FL.Residential.2023.M2005.2.1\"", "output": "rule water_heater_attic_access:\n    where:\n        element.type == \"water_heater\"\n        element.location.space_type in [\"attic\", \"crawl_space\"]\n        element.access_path.through_room_type in [\"bedroom\", \"bathroom\", \"closet\"]\n        must:\n        element.access_path.room.ventilation_complies_with_code == True\n        reference: \"FL.Residential.2023.M2005.2.1\"\n    must:\n        element.access_path.room.ventilation_complies_with_code == True\n        reference: \"FL.Residential.2023.M2005.2.1\"\n    reference: \"FL.Residential.2023.M2005.2.1\"", "rule_name": "water_heater_attic_access"}
{"type": "bcl_to_physics", "input": "rule water_heater_attic_access with conditions: element.access_path.room.ventilation_complies_with_code == True, reference: \"FL.Residential.2023.M2005.2.1\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.M2005.2.1", "rule_name": "water_heater_attic_access"}
{"type": "bcl_completion", "input": "rule water_heater_attic_access:\n    where:\n        element.type == \"water_heater\"\n    # Complete this rule", "output": "rule water_heater_attic_access:\n    where:\n        element.type == \"water_heater\"\n        element.location.space_type in [\"attic\", \"crawl_space\"]\n        element.access_path.through_room_type in [\"bedroom\", \"bathroom\", \"closet\"]\n        must:\n        element.access_path.room.ventilation_complies_with_code == True\n        reference: \"FL.Residential.2023.M2005.2.1\"\n    must:\n        element.access_path.room.ventilation_complies_with_code == True\n        reference: \"FL.Residential.2023.M2005.2.1\"\n    reference: \"FL.Residential.2023.M2005.2.1\"", "rule_name": "water_heater_attic_access"}
{"type": "legal_to_bcl", "input": "Requirement for pool heater temperature relief: When element.type == \"pool_heater\" and must:, it is required that element.has_temperature_relief_valve == True and reference: \"FL.Residential.2023.M2006.3\"", "output": "rule pool_heater_temperature_relief:\n    where:\n        element.type == \"pool_heater\"\n        must:\n        element.has_temperature_relief_valve == True\n        reference: \"FL.Residential.2023.M2006.3\"\n    must:\n        element.has_temperature_relief_valve == True\n        reference: \"FL.Residential.2023.M2006.3\"\n    reference: \"FL.Residential.2023.M2006.3\"", "rule_name": "pool_heater_temperature_relief"}
{"type": "bcl_to_physics", "input": "rule pool_heater_temperature_relief with conditions: element.has_temperature_relief_valve == True, reference: \"FL.Residential.2023.M2006.3\"", "output": "This rule ensures safety through physics-based validation. Temperature constraints ensure thermal safety and material integrity. Reference: FL.Residential.2023.M2006.3", "rule_name": "pool_heater_temperature_relief"}
{"type": "bcl_completion", "input": "rule pool_heater_temperature_relief:\n    where:\n        element.type == \"pool_heater\"\n    # Complete this rule", "output": "rule pool_heater_temperature_relief:\n    where:\n        element.type == \"pool_heater\"\n        must:\n        element.has_temperature_relief_valve == True\n        reference: \"FL.Residential.2023.M2006.3\"\n    must:\n        element.has_temperature_relief_valve == True\n        reference: \"FL.Residential.2023.M2006.3\"\n    reference: \"FL.Residential.2023.M2006.3\"", "rule_name": "pool_heater_temperature_relief"}
{"type": "legal_to_bcl", "input": "Requirement for pool heater bypass valve: When element.type == \"pool_heater\" and element.has_integral_bypass == False, it is required that element.has_bypass_line == True and element.has_bypass_valve == True", "output": "rule pool_heater_bypass_valve:\n    where:\n        element.type == \"pool_heater\"\n        element.has_integral_bypass == False\n        must:\n        element.has_bypass_line == True\n        element.has_bypass_valve == True\n        element.bypass_connects_inlet_to_outlet == True\n        reference: \"FL.Residential.2023.M2006.4\"\n        constraint boiler_thermal_efficiency:\n        where:\n        element.type == \"boiler\"\n        require:\n        thermal.efficiency(element) >= 0.80  # 80% minimum efficiency\n        safety_factor: 1.1\n        constraint water_heater_recovery_rate:\n        where:\n        element.type == \"water_heater\"\n        require:\n        thermal.recovery_rate(\n        element.btu_input,\n        element.tank_volume,\n        element.temperature_rise\n        ) >= element.required_recovery_rate\n        safety_factor: 1.2\n        constraint expansion_tank_thermal_capacity:\n        where:\n        element.type == \"expansion_tank\"\n        require:\n        element.volume >= water.thermal_expansion_volume(\n        element.system.water_volume,\n        element.system.temperature_delta,\n        water.expansion_coefficient\n        )\n        safety_factor: 1.5\n        constraint pressure_relief_flow_capacity:\n        where:\n        element.type == \"pressure_relief_valve\"\n        require:\n        flow.relief_capacity(element) >= thermal.steam_generation_rate(\n        element.boiler.btu_input,\n        water.latent_heat_vaporization\n        )\n        safety_factor: 1.5\n        constraint pool_heater_flow_balance:\n        where:\n        element.type == \"pool_heater\"\n        require:\n        element.flow_rate >= element.minimum_flow_rate\n        element.flow_rate <= element.maximum_flow_rate\n    must:\n        element.has_bypass_line == True\n        element.has_bypass_valve == True\n        element.bypass_connects_inlet_to_outlet == True\n        reference: \"FL.Residential.2023.M2006.4\"\n        constraint boiler_thermal_efficiency:\n        where:\n        element.type == \"boiler\"\n        require:\n        thermal.efficiency(element) >= 0.80  # 80% minimum efficiency\n        safety_factor: 1.1\n        constraint water_heater_recovery_rate:\n        where:\n        element.type == \"water_heater\"\n        require:\n        thermal.recovery_rate(\n        element.btu_input,\n        element.tank_volume,\n        element.temperature_rise\n        ) >= element.required_recovery_rate\n        safety_factor: 1.2\n        constraint expansion_tank_thermal_capacity:\n        where:\n        element.type == \"expansion_tank\"\n        require:\n        element.volume >= water.thermal_expansion_volume(\n        element.system.water_volume,\n        element.system.temperature_delta,\n        water.expansion_coefficient\n        )\n        safety_factor: 1.5\n        constraint pressure_relief_flow_capacity:\n        where:\n        element.type == \"pressure_relief_valve\"\n        require:\n        flow.relief_capacity(element) >= thermal.steam_generation_rate(\n        element.boiler.btu_input,\n        water.latent_heat_vaporization\n        )\n        safety_factor: 1.5\n        constraint pool_heater_flow_balance:\n        where:\n        element.type == \"pool_heater\"\n        require:\n        element.flow_rate >= element.minimum_flow_rate\n        element.flow_rate <= element.maximum_flow_rate\n    safety_factor: 1.1\n    reference: \"FL.Residential.2023.M2006.4\"", "rule_name": "pool_heater_bypass_valve"}
{"type": "bcl_to_physics", "input": "rule pool_heater_bypass_valve with constraints: flow.relief_capacity(element), thermal.efficiency(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.M2006.4", "rule_name": "pool_heater_bypass_valve"}
{"type": "bcl_completion", "input": "rule pool_heater_bypass_valve:\n    where:\n        element.type == \"pool_heater\"\n    # Complete this rule", "output": "rule pool_heater_bypass_valve:\n    where:\n        element.type == \"pool_heater\"\n        element.has_integral_bypass == False\n        must:\n        element.has_bypass_line == True\n        element.has_bypass_valve == True\n        element.bypass_connects_inlet_to_outlet == True\n        reference: \"FL.Residential.2023.M2006.4\"\n        constraint boiler_thermal_efficiency:\n        where:\n        element.type == \"boiler\"\n        require:\n        thermal.efficiency(element) >= 0.80  # 80% minimum efficiency\n        safety_factor: 1.1\n        constraint water_heater_recovery_rate:\n        where:\n        element.type == \"water_heater\"\n        require:\n        thermal.recovery_rate(\n        element.btu_input,\n        element.tank_volume,\n        element.temperature_rise\n        ) >= element.required_recovery_rate\n        safety_factor: 1.2\n        constraint expansion_tank_thermal_capacity:\n        where:\n        element.type == \"expansion_tank\"\n        require:\n        element.volume >= water.thermal_expansion_volume(\n        element.system.water_volume,\n        element.system.temperature_delta,\n        water.expansion_coefficient\n        )\n        safety_factor: 1.5\n        constraint pressure_relief_flow_capacity:\n        where:\n        element.type == \"pressure_relief_valve\"\n        require:\n        flow.relief_capacity(element) >= thermal.steam_generation_rate(\n        element.boiler.btu_input,\n        water.latent_heat_vaporization\n        )\n        safety_factor: 1.5\n        constraint pool_heater_flow_balance:\n        where:\n        element.type == \"pool_heater\"\n        require:\n        element.flow_rate >= element.minimum_flow_rate\n        element.flow_rate <= element.maximum_flow_rate\n    must:\n        element.has_bypass_line == True\n        element.has_bypass_valve == True\n        element.bypass_connects_inlet_to_outlet == True\n        reference: \"FL.Residential.2023.M2006.4\"\n        constraint boiler_thermal_efficiency:\n        where:\n        element.type == \"boiler\"\n        require:\n        thermal.efficiency(element) >= 0.80  # 80% minimum efficiency\n        safety_factor: 1.1\n        constraint water_heater_recovery_rate:\n        where:\n        element.type == \"water_heater\"\n        require:\n        thermal.recovery_rate(\n        element.btu_input,\n        element.tank_volume,\n        element.temperature_rise\n        ) >= element.required_recovery_rate\n        safety_factor: 1.2\n        constraint expansion_tank_thermal_capacity:\n        where:\n        element.type == \"expansion_tank\"\n        require:\n        element.volume >= water.thermal_expansion_volume(\n        element.system.water_volume,\n        element.system.temperature_delta,\n        water.expansion_coefficient\n        )\n        safety_factor: 1.5\n        constraint pressure_relief_flow_capacity:\n        where:\n        element.type == \"pressure_relief_valve\"\n        require:\n        flow.relief_capacity(element) >= thermal.steam_generation_rate(\n        element.boiler.btu_input,\n        water.latent_heat_vaporization\n        )\n        safety_factor: 1.5\n        constraint pool_heater_flow_balance:\n        where:\n        element.type == \"pool_heater\"\n        require:\n        element.flow_rate >= element.minimum_flow_rate\n        element.flow_rate <= element.maximum_flow_rate\n    safety_factor: 1.1\n    reference: \"FL.Residential.2023.M2006.4\"", "rule_name": "pool_heater_bypass_valve"}
{"type": "safety_factor_reasoning", "input": "For pool_heater_bypass_valve rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.M2006.4.", "rule_name": "pool_heater_bypass_valve", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for freeze protection requirement: When system.type == \"DWV\" and system.above_grade == true, it is required that protection IN [\"insulation\", \"heat\", \"both\"] and safety_factor: 1.5", "output": "rule freeze_protection_requirement:\n    where:\n        system.type == \"DWV\"\n        system.above_grade == true\n        component != \"vent_terminal\"\n        location IN [\"outside_building\", \"attic\", \"crawl_space\", \"outside_wall\"]\n        climate.winter_design_temp <= 32.fahrenheit\n        must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.2\"\n    must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.2\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.30.P3001.2\"", "rule_name": "freeze_protection_requirement"}
{"type": "bcl_to_physics", "input": "rule freeze_protection_requirement with constraints: winter_design_temp", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3001.2", "rule_name": "freeze_protection_requirement"}
{"type": "bcl_completion", "input": "rule freeze_protection_requirement:\n    where:\n        system.type == \"DWV\"\n    # Complete this rule", "output": "rule freeze_protection_requirement:\n    where:\n        system.type == \"DWV\"\n        system.above_grade == true\n        component != \"vent_terminal\"\n        location IN [\"outside_building\", \"attic\", \"crawl_space\", \"outside_wall\"]\n        climate.winter_design_temp <= 32.fahrenheit\n        must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.2\"\n    must:\n        protection IN [\"insulation\", \"heat\", \"both\"]\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.2\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.30.P3001.2\"", "rule_name": "freeze_protection_requirement"}
{"type": "safety_factor_reasoning", "input": "For freeze_protection_requirement rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.30.P3001.2.", "rule_name": "freeze_protection_requirement", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for flood resistant installation: When location.in_flood_hazard_area == true and system.type IN [\"drainage\", \"waste\", \"vent\"], it is required that installation.prevents_floodwater_infiltration == true and installation.prevents_discharge_to_floodwater == true", "output": "rule flood_resistant_installation:\n    where:\n        location.in_flood_hazard_area == true\n        system.type IN [\"drainage\", \"waste\", \"vent\"]\n        must:\n        installation.prevents_floodwater_infiltration == true\n        installation.prevents_discharge_to_floodwater == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.3\"\n    must:\n        installation.prevents_floodwater_infiltration == true\n        installation.prevents_discharge_to_floodwater == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.30.P3001.3\"", "rule_name": "flood_resistant_installation"}
{"type": "bcl_to_physics", "input": "rule flood_resistant_installation with conditions: installation.prevents_floodwater_infiltration == true, installation.prevents_discharge_to_floodwater == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3001.3", "rule_name": "flood_resistant_installation"}
{"type": "bcl_completion", "input": "rule flood_resistant_installation:\n    where:\n        location.in_flood_hazard_area == true\n    # Complete this rule", "output": "rule flood_resistant_installation:\n    where:\n        location.in_flood_hazard_area == true\n        system.type IN [\"drainage\", \"waste\", \"vent\"]\n        must:\n        installation.prevents_floodwater_infiltration == true\n        installation.prevents_discharge_to_floodwater == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.3\"\n    must:\n        installation.prevents_floodwater_infiltration == true\n        installation.prevents_discharge_to_floodwater == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3001.3\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.30.P3001.3\"", "rule_name": "flood_resistant_installation"}
{"type": "safety_factor_reasoning", "input": "For flood_resistant_installation rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.30.P3001.3.", "rule_name": "flood_resistant_installation", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for galvanized pipe restrictions: When pipe.material IN [\"galvanized_wrought_iron\", \"galvanized_steel\"] and pipe.system == \"DWV\", it is required that pipe.underground == false and height_above_ground >= 6.inches", "output": "rule galvanized_pipe_restrictions:\n    where:\n        pipe.material IN [\"galvanized_wrought_iron\", \"galvanized_steel\"]\n        pipe.system == \"DWV\"\n        must:\n        pipe.underground == false\n        height_above_ground >= 6.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.1\"\n    must:\n        pipe.underground == false\n        height_above_ground >= 6.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3002.1\"", "rule_name": "galvanized_pipe_restrictions"}
{"type": "bcl_to_physics", "input": "rule galvanized_pipe_restrictions with constraints: height_above_ground", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.1", "rule_name": "galvanized_pipe_restrictions"}
{"type": "bcl_completion", "input": "rule galvanized_pipe_restrictions:\n    where:\n        pipe.material IN [\"galvanized_wrought_iron\", \"galvanized_steel\"]\n    # Complete this rule", "output": "rule galvanized_pipe_restrictions:\n    where:\n        pipe.material IN [\"galvanized_wrought_iron\", \"galvanized_steel\"]\n        pipe.system == \"DWV\"\n        must:\n        pipe.underground == false\n        height_above_ground >= 6.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.1\"\n    must:\n        pipe.underground == false\n        height_above_ground >= 6.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3002.1\"", "rule_name": "galvanized_pipe_restrictions"}
{"type": "safety_factor_reasoning", "input": "For galvanized_pipe_restrictions rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3002.1.", "rule_name": "galvanized_pipe_restrictions", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for plastic pipe expansion: When pipe.material == \"plastic\" and pipe.system == \"DWV\", it is required that thermal_expansion_allowance.provided == true and thermal_contraction_allowance.provided == true", "output": "rule plastic_pipe_expansion:\n    where:\n        pipe.material == \"plastic\"\n        pipe.system == \"DWV\"\n        must:\n        thermal_expansion_allowance.provided == true\n        thermal_contraction_allowance.provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.1\"\n    must:\n        thermal_expansion_allowance.provided == true\n        thermal_contraction_allowance.provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.1\"", "rule_name": "plastic_pipe_expansion"}
{"type": "bcl_to_physics", "input": "rule plastic_pipe_expansion with conditions: thermal_expansion_allowance.provided == true, thermal_contraction_allowance.provided == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.1", "rule_name": "plastic_pipe_expansion"}
{"type": "bcl_completion", "input": "rule plastic_pipe_expansion:\n    where:\n        pipe.material == \"plastic\"\n    # Complete this rule", "output": "rule plastic_pipe_expansion:\n    where:\n        pipe.material == \"plastic\"\n        pipe.system == \"DWV\"\n        must:\n        thermal_expansion_allowance.provided == true\n        thermal_contraction_allowance.provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.1\"\n    must:\n        thermal_expansion_allowance.provided == true\n        thermal_contraction_allowance.provided == true\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.1\"", "rule_name": "plastic_pipe_expansion"}
{"type": "safety_factor_reasoning", "input": "For plastic_pipe_expansion rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3002.1.", "rule_name": "plastic_pipe_expansion", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for building sewer near water service: When pipe.type == \"building_sewer\" and water_service.nearby == true, it is required that proximity.complies_with == \"Section_P2905.4.1\" and safety_factor: 2.0", "output": "rule building_sewer_near_water_service:\n    where:\n        pipe.type == \"building_sewer\"\n        water_service.nearby == true\n        must:\n        proximity.complies_with == \"Section_P2905.4.1\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3002.2.1\"\n    must:\n        proximity.complies_with == \"Section_P2905.4.1\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3002.2.1\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.30.P3002.2.1\"", "rule_name": "building_sewer_near_water_service"}
{"type": "bcl_to_physics", "input": "rule building_sewer_near_water_service with conditions: proximity.complies_with == \"Section_P2905.4.1\", safety_factor: 2.0", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.2.1", "rule_name": "building_sewer_near_water_service"}
{"type": "bcl_completion", "input": "rule building_sewer_near_water_service:\n    where:\n        pipe.type == \"building_sewer\"\n    # Complete this rule", "output": "rule building_sewer_near_water_service:\n    where:\n        pipe.type == \"building_sewer\"\n        water_service.nearby == true\n        must:\n        proximity.complies_with == \"Section_P2905.4.1\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3002.2.1\"\n    must:\n        proximity.complies_with == \"Section_P2905.4.1\"\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3002.2.1\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.30.P3002.2.1\"", "rule_name": "building_sewer_near_water_service"}
{"type": "safety_factor_reasoning", "input": "For building_sewer_near_water_service rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.30.P3002.2.1.", "rule_name": "building_sewer_near_water_service", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for drainage fitting requirements: When fitting.system == \"drainage\" and must:, it is required that interior_waterway.smooth == true and interior_waterway.diameter == pipe.diameter", "output": "rule drainage_fitting_requirements:\n    where:\n        fitting.system == \"drainage\"\n        must:\n        interior_waterway.smooth == true\n        interior_waterway.diameter == pipe.diameter\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_reductions == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        fitting.maintains_slope >= 0.25.inches_per_foot  # 2% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.3.1\"\n    must:\n        interior_waterway.smooth == true\n        interior_waterway.diameter == pipe.diameter\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_reductions == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        fitting.maintains_slope >= 0.25.inches_per_foot  # 2% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.3.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.3.1\"", "rule_name": "drainage_fitting_requirements"}
{"type": "bcl_to_physics", "input": "rule drainage_fitting_requirements with constraints: maintains_slope", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.3.1", "rule_name": "drainage_fitting_requirements"}
{"type": "bcl_completion", "input": "rule drainage_fitting_requirements:\n    where:\n        fitting.system == \"drainage\"\n    # Complete this rule", "output": "rule drainage_fitting_requirements:\n    where:\n        fitting.system == \"drainage\"\n        must:\n        interior_waterway.smooth == true\n        interior_waterway.diameter == pipe.diameter\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_reductions == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        fitting.maintains_slope >= 0.25.inches_per_foot  # 2% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.3.1\"\n    must:\n        interior_waterway.smooth == true\n        interior_waterway.diameter == pipe.diameter\n        fitting.has_ledges == false\n        fitting.has_shoulders == false\n        fitting.has_reductions == false\n        if fitting.threaded == true:\n        fitting.type == \"recessed_drainage\"\n        fitting.maintains_slope >= 0.25.inches_per_foot  # 2% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.3.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.3.1\"", "rule_name": "drainage_fitting_requirements"}
{"type": "safety_factor_reasoning", "input": "For drainage_fitting_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3002.3.1.", "rule_name": "drainage_fitting_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sheet lead weight: When material.type == \"sheet_lead\" and must:, it is required that if application == \"vent_terminal_flashing\": and weight >= 3.pounds_per_sqft", "output": "rule sheet_lead_weight:\n    where:\n        material.type == \"sheet_lead\"\n        must:\n        if application == \"vent_terminal_flashing\":\n        weight >= 3.pounds_per_sqft\n        elif application == \"prefab_vent_flashing\":\n        weight >= 2.5.pounds_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.1\"\n    must:\n        if application == \"vent_terminal_flashing\":\n        weight >= 3.pounds_per_sqft\n        elif application == \"prefab_vent_flashing\":\n        weight >= 2.5.pounds_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.4.1\"", "rule_name": "sheet_lead_weight"}
{"type": "bcl_to_physics", "input": "rule sheet_lead_weight with constraints: weight, weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.4.1", "rule_name": "sheet_lead_weight"}
{"type": "bcl_completion", "input": "rule sheet_lead_weight:\n    where:\n        material.type == \"sheet_lead\"\n    # Complete this rule", "output": "rule sheet_lead_weight:\n    where:\n        material.type == \"sheet_lead\"\n        must:\n        if application == \"vent_terminal_flashing\":\n        weight >= 3.pounds_per_sqft\n        elif application == \"prefab_vent_flashing\":\n        weight >= 2.5.pounds_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.1\"\n    must:\n        if application == \"vent_terminal_flashing\":\n        weight >= 3.pounds_per_sqft\n        elif application == \"prefab_vent_flashing\":\n        weight >= 2.5.pounds_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.4.1\"", "rule_name": "sheet_lead_weight"}
{"type": "safety_factor_reasoning", "input": "For sheet_lead_weight rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3002.4.1.", "rule_name": "sheet_lead_weight", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for lead bend trap thickness: When component.type IN [\"lead_bend\", \"lead_trap\"] and must:, it is required that wall_thickness >= 0.125.inches  # 1/8 inch and safety_factor: 1.3", "output": "rule lead_bend_trap_thickness:\n    where:\n        component.type IN [\"lead_bend\", \"lead_trap\"]\n        must:\n        wall_thickness >= 0.125.inches  # 1/8 inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.4.2\"\n    must:\n        wall_thickness >= 0.125.inches  # 1/8 inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.4.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3002.4.2\"", "rule_name": "lead_bend_trap_thickness"}
{"type": "bcl_to_physics", "input": "rule lead_bend_trap_thickness with constraints: wall_thickness", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.4.2", "rule_name": "lead_bend_trap_thickness"}
{"type": "bcl_completion", "input": "rule lead_bend_trap_thickness:\n    where:\n        component.type IN [\"lead_bend\", \"lead_trap\"]\n    # Complete this rule", "output": "rule lead_bend_trap_thickness:\n    where:\n        component.type IN [\"lead_bend\", \"lead_trap\"]\n        must:\n        wall_thickness >= 0.125.inches  # 1/8 inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.4.2\"\n    must:\n        wall_thickness >= 0.125.inches  # 1/8 inch\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3002.4.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3002.4.2\"", "rule_name": "lead_bend_trap_thickness"}
{"type": "safety_factor_reasoning", "input": "For lead_bend_trap_thickness rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3002.4.2.", "rule_name": "lead_bend_trap_thickness", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for sheet copper weight: When material.type == \"sheet_copper\" and must:, it is required that if application == \"general_use\": and weight >= 12.ounces_per_sqft", "output": "rule sheet_copper_weight:\n    where:\n        material.type == \"sheet_copper\"\n        must:\n        if application == \"general_use\":\n        weight >= 12.ounces_per_sqft\n        elif application == \"vent_pipe_flashing\":\n        weight >= 8.ounces_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.3\"\n    must:\n        if application == \"general_use\":\n        weight >= 12.ounces_per_sqft\n        elif application == \"vent_pipe_flashing\":\n        weight >= 8.ounces_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.4.3\"", "rule_name": "sheet_copper_weight"}
{"type": "bcl_to_physics", "input": "rule sheet_copper_weight with constraints: weight, weight", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3002.4.3", "rule_name": "sheet_copper_weight"}
{"type": "bcl_completion", "input": "rule sheet_copper_weight:\n    where:\n        material.type == \"sheet_copper\"\n    # Complete this rule", "output": "rule sheet_copper_weight:\n    where:\n        material.type == \"sheet_copper\"\n        must:\n        if application == \"general_use\":\n        weight >= 12.ounces_per_sqft\n        elif application == \"vent_pipe_flashing\":\n        weight >= 8.ounces_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.3\"\n    must:\n        if application == \"general_use\":\n        weight >= 12.ounces_per_sqft\n        elif application == \"vent_pipe_flashing\":\n        weight >= 8.ounces_per_sqft\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3002.4.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3002.4.3\"", "rule_name": "sheet_copper_weight"}
{"type": "safety_factor_reasoning", "input": "For sheet_copper_weight rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3002.4.3.", "rule_name": "sheet_copper_weight", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for joint tightness: When joint.system == \"DWV\" and must:, it is required that joint.gas_tight == true and joint.water_tight == true", "output": "rule joint_tightness:\n    where:\n        joint.system == \"DWV\"\n        must:\n        joint.gas_tight == true\n        joint.water_tight == true\n        joint.meets_test_pressure == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3003.1\"\n    must:\n        joint.gas_tight == true\n        joint.water_tight == true\n        joint.meets_test_pressure == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3003.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.30.P3003.1\"", "rule_name": "joint_tightness"}
{"type": "bcl_to_physics", "input": "rule joint_tightness with conditions: joint.gas_tight == true, joint.water_tight == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.5 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3003.1", "rule_name": "joint_tightness"}
{"type": "bcl_completion", "input": "rule joint_tightness:\n    where:\n        joint.system == \"DWV\"\n    # Complete this rule", "output": "rule joint_tightness:\n    where:\n        joint.system == \"DWV\"\n        must:\n        joint.gas_tight == true\n        joint.water_tight == true\n        joint.meets_test_pressure == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3003.1\"\n    must:\n        joint.gas_tight == true\n        joint.water_tight == true\n        joint.meets_test_pressure == true\n        safety_factor: 1.5\n        reference: \"FL.Code.2024.30.P3003.1\"\n    safety_factor: 1.5\n    reference: \"FL.Code.2024.30.P3003.1\"", "rule_name": "joint_tightness"}
{"type": "safety_factor_reasoning", "input": "For joint_tightness rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.30.P3003.1.", "rule_name": "joint_tightness", "safety_factor": 1.5}
{"type": "legal_to_bcl", "input": "Requirement for prohibited joint types: When joint.system == \"drainage\" and must:, it is required that joint.type NOT IN [ and \"running_thread\",", "output": "rule prohibited_joint_types:\n    where:\n        joint.system == \"drainage\"\n        must:\n        joint.type NOT IN [\n        \"running_thread\",\n        \"band\",\n        \"cement\",\n        \"concrete\",\n        \"mastic\",\n        \"hot_pour_bituminous\",\n        \"different_diameter_elastomeric\",\n        \"saddle_type_fitting\"\n        ]\n        pipe.drilled == false\n        pipe.tapped == false\n        pipe.burned == false\n        pipe.welded == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3003.2\"\n    must:\n        joint.type NOT IN [\n        \"running_thread\",\n        \"band\",\n        \"cement\",\n        \"concrete\",\n        \"mastic\",\n        \"hot_pour_bituminous\",\n        \"different_diameter_elastomeric\",\n        \"saddle_type_fitting\"\n        ]\n        pipe.drilled == false\n        pipe.tapped == false\n        pipe.burned == false\n        pipe.welded == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3003.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.30.P3003.2\"", "rule_name": "prohibited_joint_types"}
{"type": "bcl_to_physics", "input": "rule prohibited_joint_types with conditions: joint.type NOT IN [, \"running_thread\",", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3003.2", "rule_name": "prohibited_joint_types"}
{"type": "bcl_completion", "input": "rule prohibited_joint_types:\n    where:\n        joint.system == \"drainage\"\n    # Complete this rule", "output": "rule prohibited_joint_types:\n    where:\n        joint.system == \"drainage\"\n        must:\n        joint.type NOT IN [\n        \"running_thread\",\n        \"band\",\n        \"cement\",\n        \"concrete\",\n        \"mastic\",\n        \"hot_pour_bituminous\",\n        \"different_diameter_elastomeric\",\n        \"saddle_type_fitting\"\n        ]\n        pipe.drilled == false\n        pipe.tapped == false\n        pipe.burned == false\n        pipe.welded == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3003.2\"\n    must:\n        joint.type NOT IN [\n        \"running_thread\",\n        \"band\",\n        \"cement\",\n        \"concrete\",\n        \"mastic\",\n        \"hot_pour_bituminous\",\n        \"different_diameter_elastomeric\",\n        \"saddle_type_fitting\"\n        ]\n        pipe.drilled == false\n        pipe.tapped == false\n        pipe.burned == false\n        pipe.welded == false\n        safety_factor: 2.0\n        reference: \"FL.Code.2024.30.P3003.2\"\n    safety_factor: 2.0\n    reference: \"FL.Code.2024.30.P3003.2\"", "rule_name": "prohibited_joint_types"}
{"type": "safety_factor_reasoning", "input": "For prohibited_joint_types rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Code.2024.30.P3003.2.", "rule_name": "prohibited_joint_types", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for mechanical joint underground: When joint.type == \"mechanical\" and joint.material IN [\"ABS\", \"PVC\"], it is required that joint.location == \"underground\" and OR joint.approved_above_ground == true", "output": "rule mechanical_joint_underground:\n    where:\n        joint.type == \"mechanical\"\n        joint.material IN [\"ABS\", \"PVC\"]\n        pipe.system == \"drainage\"\n        must:\n        joint.location == \"underground\"\n        OR joint.approved_above_ground == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.3.1\"\n    must:\n        joint.location == \"underground\"\n        OR joint.approved_above_ground == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.3.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3003.3.1\"", "rule_name": "mechanical_joint_underground"}
{"type": "bcl_to_physics", "input": "rule mechanical_joint_underground with conditions: joint.location == \"underground\", OR joint.approved_above_ground == true", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3003.3.1", "rule_name": "mechanical_joint_underground"}
{"type": "bcl_completion", "input": "rule mechanical_joint_underground:\n    where:\n        joint.type == \"mechanical\"\n    # Complete this rule", "output": "rule mechanical_joint_underground:\n    where:\n        joint.type == \"mechanical\"\n        joint.material IN [\"ABS\", \"PVC\"]\n        pipe.system == \"drainage\"\n        must:\n        joint.location == \"underground\"\n        OR joint.approved_above_ground == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.3.1\"\n    must:\n        joint.location == \"underground\"\n        OR joint.approved_above_ground == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.3.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3003.3.1\"", "rule_name": "mechanical_joint_underground"}
{"type": "safety_factor_reasoning", "input": "For mechanical_joint_underground rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3003.3.1.", "rule_name": "mechanical_joint_underground", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for solvent cement primer: When joint.type == \"solvent_cement\" and pipe.material == \"PVC\", it is required that primer.applied == true and primer.color == \"purple\" OR primer.approved == true", "output": "rule solvent_cement_primer:\n    where:\n        joint.type == \"solvent_cement\"\n        pipe.material == \"PVC\"\n        must:\n        primer.applied == true\n        primer.color == \"purple\" OR primer.approved == true\n        primer.conforms_to == \"ASTM_F656\"\n        EXCEPT:\n        cement.third_party_certified == true\n        cement.conforms_to == \"ASTM_D2564\"\n        application == \"non_pressure_DWV\"\n        pipe.diameter <= 4.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.9.2\"\n    must:\n        primer.applied == true\n        primer.color == \"purple\" OR primer.approved == true\n        primer.conforms_to == \"ASTM_F656\"\n        EXCEPT:\n        cement.third_party_certified == true\n        cement.conforms_to == \"ASTM_D2564\"\n        application == \"non_pressure_DWV\"\n        pipe.diameter <= 4.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.9.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3003.9.2\"", "rule_name": "solvent_cement_primer"}
{"type": "bcl_to_physics", "input": "rule solvent_cement_primer with constraints: diameter", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3003.9.2", "rule_name": "solvent_cement_primer"}
{"type": "bcl_completion", "input": "rule solvent_cement_primer:\n    where:\n        joint.type == \"solvent_cement\"\n    # Complete this rule", "output": "rule solvent_cement_primer:\n    where:\n        joint.type == \"solvent_cement\"\n        pipe.material == \"PVC\"\n        must:\n        primer.applied == true\n        primer.color == \"purple\" OR primer.approved == true\n        primer.conforms_to == \"ASTM_F656\"\n        EXCEPT:\n        cement.third_party_certified == true\n        cement.conforms_to == \"ASTM_D2564\"\n        application == \"non_pressure_DWV\"\n        pipe.diameter <= 4.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.9.2\"\n    must:\n        primer.applied == true\n        primer.color == \"purple\" OR primer.approved == true\n        primer.conforms_to == \"ASTM_F656\"\n        EXCEPT:\n        cement.third_party_certified == true\n        cement.conforms_to == \"ASTM_D2564\"\n        application == \"non_pressure_DWV\"\n        pipe.diameter <= 4.inches\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.9.2\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3003.9.2\"", "rule_name": "solvent_cement_primer"}
{"type": "safety_factor_reasoning", "input": "For solvent_cement_primer rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3003.9.2.", "rule_name": "solvent_cement_primer", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for cast iron caulked joint: When joint.type == \"caulked\" and pipe.material == \"cast_iron\", it is required that packing.material IN [\"oakum\", \"hemp\"] and packing.firmly_packed == true", "output": "rule cast_iron_caulked_joint:\n    where:\n        joint.type == \"caulked\"\n        pipe.material == \"cast_iron\"\n        must:\n        packing.material IN [\"oakum\", \"hemp\"]\n        packing.firmly_packed == true\n        lead.molten == true\n        lead.single_pour == true\n        lead.depth >= 1.inch\n        lead.recession <= 0.125.inches  # Below hub rim\n        lead.caulked_tight == true\n        coating.applied_after_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.4.1\"\n    must:\n        packing.material IN [\"oakum\", \"hemp\"]\n        packing.firmly_packed == true\n        lead.molten == true\n        lead.single_pour == true\n        lead.depth >= 1.inch\n        lead.recession <= 0.125.inches  # Below hub rim\n        lead.caulked_tight == true\n        coating.applied_after_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.4.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3003.4.1\"", "rule_name": "cast_iron_caulked_joint"}
{"type": "bcl_to_physics", "input": "rule cast_iron_caulked_joint with constraints: depth, recession", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3003.4.1", "rule_name": "cast_iron_caulked_joint"}
{"type": "bcl_completion", "input": "rule cast_iron_caulked_joint:\n    where:\n        joint.type == \"caulked\"\n    # Complete this rule", "output": "rule cast_iron_caulked_joint:\n    where:\n        joint.type == \"caulked\"\n        pipe.material == \"cast_iron\"\n        must:\n        packing.material IN [\"oakum\", \"hemp\"]\n        packing.firmly_packed == true\n        lead.molten == true\n        lead.single_pour == true\n        lead.depth >= 1.inch\n        lead.recession <= 0.125.inches  # Below hub rim\n        lead.caulked_tight == true\n        coating.applied_after_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.4.1\"\n    must:\n        packing.material IN [\"oakum\", \"hemp\"]\n        packing.firmly_packed == true\n        lead.molten == true\n        lead.single_pour == true\n        lead.depth >= 1.inch\n        lead.recession <= 0.125.inches  # Below hub rim\n        lead.caulked_tight == true\n        coating.applied_after_test == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3003.4.1\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3003.4.1\"", "rule_name": "cast_iron_caulked_joint"}
{"type": "safety_factor_reasoning", "input": "For cast_iron_caulked_joint rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3003.4.1.", "rule_name": "cast_iron_caulked_joint", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for fixture unit loading: When system.type == \"DWV\" and must:, it is required that load.computed_in == \"drainage_fixture_units\" and load.per == \"Table_P3004.1\"", "output": "rule fixture_unit_loading:\n    where:\n        system.type == \"DWV\"\n        must:\n        load.computed_in == \"drainage_fixture_units\"\n        load.per == \"Table_P3004.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3004.1\"\n    must:\n        load.computed_in == \"drainage_fixture_units\"\n        load.per == \"Table_P3004.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3004.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3004.1\"", "rule_name": "fixture_unit_loading"}
{"type": "bcl_to_physics", "input": "rule fixture_unit_loading with conditions: load.computed_in == \"drainage_fixture_units\", load.per == \"Table_P3004.1\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3004.1", "rule_name": "fixture_unit_loading"}
{"type": "bcl_completion", "input": "rule fixture_unit_loading:\n    where:\n        system.type == \"DWV\"\n    # Complete this rule", "output": "rule fixture_unit_loading:\n    where:\n        system.type == \"DWV\"\n        must:\n        load.computed_in == \"drainage_fixture_units\"\n        load.per == \"Table_P3004.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3004.1\"\n    must:\n        load.computed_in == \"drainage_fixture_units\"\n        load.per == \"Table_P3004.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3004.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3004.1\"", "rule_name": "fixture_unit_loading"}
{"type": "safety_factor_reasoning", "input": "For fixture_unit_loading rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3004.1.", "rule_name": "fixture_unit_loading", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for direction change fittings: When drainage.change_of_direction == true and must:, it is required that fitting.type IN [\"sanitary_tee\", \"wye\", \"sweep\", \"bend\", \"combination\"] and fitting.per == \"Table_P3005.1\"", "output": "rule direction_change_fittings:\n    where:\n        drainage.change_of_direction == true\n        must:\n        fitting.type IN [\"sanitary_tee\", \"wye\", \"sweep\", \"bend\", \"combination\"]\n        fitting.per == \"Table_P3005.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.1\"\n    must:\n        fitting.type IN [\"sanitary_tee\", \"wye\", \"sweep\", \"bend\", \"combination\"]\n        fitting.per == \"Table_P3005.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3005.1\"", "rule_name": "direction_change_fittings"}
{"type": "bcl_to_physics", "input": "rule direction_change_fittings with conditions: fitting.type IN [\"sanitary_tee\", \"wye\", \"sweep\", \"bend\", \"combination\"], fitting.per == \"Table_P3005.1\"", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3005.1", "rule_name": "direction_change_fittings"}
{"type": "bcl_completion", "input": "rule direction_change_fittings:\n    where:\n        drainage.change_of_direction == true\n    # Complete this rule", "output": "rule direction_change_fittings:\n    where:\n        drainage.change_of_direction == true\n        must:\n        fitting.type IN [\"sanitary_tee\", \"wye\", \"sweep\", \"bend\", \"combination\"]\n        fitting.per == \"Table_P3005.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.1\"\n    must:\n        fitting.type IN [\"sanitary_tee\", \"wye\", \"sweep\", \"bend\", \"combination\"]\n        fitting.per == \"Table_P3005.1\"\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.1\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3005.1\"", "rule_name": "direction_change_fittings"}
{"type": "safety_factor_reasoning", "input": "For direction_change_fittings rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3005.1.", "rule_name": "direction_change_fittings", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for stack base connection: When branch.horizontal == true and branch.connects_to == \"stack_base\", it is required that connection_distance >= 10 * drainage_stack.diameter and safety_factor: 1.3", "output": "rule stack_base_connection:\n    where:\n        branch.horizontal == true\n        branch.connects_to == \"stack_base\"\n        must:\n        connection_distance >= 10 * drainage_stack.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3005.5\"\n    must:\n        connection_distance >= 10 * drainage_stack.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3005.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3005.5\"", "rule_name": "stack_base_connection"}
{"type": "bcl_to_physics", "input": "rule stack_base_connection with conditions: connection_distance >= 10 * drainage_stack.diameter, safety_factor: 1.3", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3005.5", "rule_name": "stack_base_connection"}
{"type": "bcl_completion", "input": "rule stack_base_connection:\n    where:\n        branch.horizontal == true\n    # Complete this rule", "output": "rule stack_base_connection:\n    where:\n        branch.horizontal == true\n        branch.connects_to == \"stack_base\"\n        must:\n        connection_distance >= 10 * drainage_stack.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3005.5\"\n    must:\n        connection_distance >= 10 * drainage_stack.diameter\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3005.5\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3005.5\"", "rule_name": "stack_base_connection"}
{"type": "safety_factor_reasoning", "input": "For stack_base_connection rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3005.5.", "rule_name": "stack_base_connection", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for cleanout requirements: When drainage.type == \"horizontal\" and length > 100.feet, it is required that cleanout.required == true and cleanout.interval <= 100.feet", "output": "rule cleanout_requirements:\n    where:\n        drainage.type == \"horizontal\"\n        length > 100.feet\n        must:\n        cleanout.required == true\n        cleanout.interval <= 100.feet\n        cleanout.accessible == true\n        if pipe.size >= 6.inches:\n        clearance.front >= 18.inches\n        clearance.sides >= 12.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.2\"\n    must:\n        cleanout.required == true\n        cleanout.interval <= 100.feet\n        cleanout.accessible == true\n        if pipe.size >= 6.inches:\n        clearance.front >= 18.inches\n        clearance.sides >= 12.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3005.2\"", "rule_name": "cleanout_requirements"}
{"type": "bcl_to_physics", "input": "rule cleanout_requirements with constraints: length, interval", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3005.2", "rule_name": "cleanout_requirements"}
{"type": "bcl_completion", "input": "rule cleanout_requirements:\n    where:\n        drainage.type == \"horizontal\"\n    # Complete this rule", "output": "rule cleanout_requirements:\n    where:\n        drainage.type == \"horizontal\"\n        length > 100.feet\n        must:\n        cleanout.required == true\n        cleanout.interval <= 100.feet\n        cleanout.accessible == true\n        if pipe.size >= 6.inches:\n        clearance.front >= 18.inches\n        clearance.sides >= 12.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.2\"\n    must:\n        cleanout.required == true\n        cleanout.interval <= 100.feet\n        cleanout.accessible == true\n        if pipe.size >= 6.inches:\n        clearance.front >= 18.inches\n        clearance.sides >= 12.inches\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.2\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3005.2\"", "rule_name": "cleanout_requirements"}
{"type": "safety_factor_reasoning", "input": "For cleanout_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3005.2.", "rule_name": "cleanout_requirements", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for drainage pipe slope: When pipe.type == \"drainage\" and pipe.horizontal == true, it is required that if pipe.diameter <= 2.5.inches: and slope >= 0.25.inches_per_foot  # 2% grade", "output": "rule drainage_pipe_slope:\n    where:\n        pipe.type == \"drainage\"\n        pipe.horizontal == true\n        must:\n        if pipe.diameter <= 2.5.inches:\n        slope >= 0.25.inches_per_foot  # 2% grade\n        elif pipe.diameter >= 3.inches:\n        slope >= 0.125.inches_per_foot  # 1% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.3\"\n    must:\n        if pipe.diameter <= 2.5.inches:\n        slope >= 0.25.inches_per_foot  # 2% grade\n        elif pipe.diameter >= 3.inches:\n        slope >= 0.125.inches_per_foot  # 1% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3005.3\"", "rule_name": "drainage_pipe_slope"}
{"type": "bcl_to_physics", "input": "rule drainage_pipe_slope with constraints: diameter, slope", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Reference: FL.Code.2024.30.P3005.3", "rule_name": "drainage_pipe_slope"}
{"type": "bcl_completion", "input": "rule drainage_pipe_slope:\n    where:\n        pipe.type == \"drainage\"\n    # Complete this rule", "output": "rule drainage_pipe_slope:\n    where:\n        pipe.type == \"drainage\"\n        pipe.horizontal == true\n        must:\n        if pipe.diameter <= 2.5.inches:\n        slope >= 0.25.inches_per_foot  # 2% grade\n        elif pipe.diameter >= 3.inches:\n        slope >= 0.125.inches_per_foot  # 1% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.3\"\n    must:\n        if pipe.diameter <= 2.5.inches:\n        slope >= 0.25.inches_per_foot  # 2% grade\n        elif pipe.diameter >= 3.inches:\n        slope >= 0.125.inches_per_foot  # 1% grade\n        safety_factor: 1.2\n        reference: \"FL.Code.2024.30.P3005.3\"\n    safety_factor: 1.2\n    reference: \"FL.Code.2024.30.P3005.3\"", "rule_name": "drainage_pipe_slope"}
{"type": "safety_factor_reasoning", "input": "For drainage_pipe_slope rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Code.2024.30.P3005.3.", "rule_name": "drainage_pipe_slope", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for sump pump capacity: When pump.type IN [\"sewage_pump\", \"sewage_ejector\"] and must:, it is required that if handles_water_closet == true: and solids_capacity >= 2.inch_diameter_spheres", "output": "rule sump_pump_capacity:\n    where:\n        pump.type IN [\"sewage_pump\", \"sewage_ejector\"]\n        must:\n        if handles_water_closet == true:\n        solids_capacity >= 2.inch_diameter_spheres\n        else:\n        solids_capacity >= 0.5.inch_diameter_spheres\n        if discharge_pipe == 2.inches:\n        flow_rate >= 21.gpm\n        elif discharge_pipe == 2.5.inches:\n        flow_rate >= 30.gpm\n        elif discharge_pipe == 3.inches:\n        flow_rate >= 46.gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.6\"\n    must:\n        if handles_water_closet == true:\n        solids_capacity >= 2.inch_diameter_spheres\n        else:\n        solids_capacity >= 0.5.inch_diameter_spheres\n        if discharge_pipe == 2.inches:\n        flow_rate >= 21.gpm\n        elif discharge_pipe == 2.5.inches:\n        flow_rate >= 30.gpm\n        elif discharge_pipe == 3.inches:\n        flow_rate >= 46.gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3007.6\"", "rule_name": "sump_pump_capacity"}
{"type": "bcl_to_physics", "input": "rule sump_pump_capacity with constraints: solids_capacity, solids_capacity", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.30.P3007.6", "rule_name": "sump_pump_capacity"}
{"type": "bcl_completion", "input": "rule sump_pump_capacity:\n    where:\n        pump.type IN [\"sewage_pump\", \"sewage_ejector\"]\n    # Complete this rule", "output": "rule sump_pump_capacity:\n    where:\n        pump.type IN [\"sewage_pump\", \"sewage_ejector\"]\n        must:\n        if handles_water_closet == true:\n        solids_capacity >= 2.inch_diameter_spheres\n        else:\n        solids_capacity >= 0.5.inch_diameter_spheres\n        if discharge_pipe == 2.inches:\n        flow_rate >= 21.gpm\n        elif discharge_pipe == 2.5.inches:\n        flow_rate >= 30.gpm\n        elif discharge_pipe == 3.inches:\n        flow_rate >= 46.gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.6\"\n    must:\n        if handles_water_closet == true:\n        solids_capacity >= 2.inch_diameter_spheres\n        else:\n        solids_capacity >= 0.5.inch_diameter_spheres\n        if discharge_pipe == 2.inches:\n        flow_rate >= 21.gpm\n        elif discharge_pipe == 2.5.inches:\n        flow_rate >= 30.gpm\n        elif discharge_pipe == 3.inches:\n        flow_rate >= 46.gpm\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.6\"\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3007.6\"", "rule_name": "sump_pump_capacity"}
{"type": "safety_factor_reasoning", "input": "For sump_pump_capacity rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3007.6.", "rule_name": "sump_pump_capacity", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for sump pit requirements: When sump.has_pump == true and must:, it is required that pit.diameter >= 18.inches and pit.depth >= 24.inches", "output": "rule sump_pit_requirements:\n    where:\n        sump.has_pump == true\n        must:\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.watertight == true\n        pit.material IN [\"tile\", \"concrete\", \"steel\", \"fiberglass\"]\n        cover.gas_tight == true\n        cover.removable == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.3\"\n        constraint horizontal_drain_capacity:\n        where:\n        drain.horizontal == true\n        must:\n        flow_capacity = flow.manning_flow(\n        pipe.area,\n        hydraulic_radius,\n        slope,\n        roughness\n        )\n        flow_capacity >= fixture_unit_discharge\n        safety_factor: 1.5\n        constraint plastic_pipe_expansion:\n        where:\n        pipe.material == \"plastic\"\n        must:\n        expansion = length * thermal.expansion_coefficient * temperature_change\n        expansion_allowance >= expansion\n        support_spacing < critical_buckling_length\n        safety_factor: 1.3\n        constraint stack_terminal_velocity:\n        where:\n        stack.vertical == true\n        must:\n        terminal_velocity = sqrt(\n        (32 * stack.diameter * (water.density - air.density)) /\n        (3 * drag_coefficient * water.density)\n        )\n        water_velocity < 0.5 * terminal_velocity\n        safety_factor: 1.5\n        constraint sump_pump_head:\n        where:\n        pump.type == \"sump\"\n        must:\n        total_head = static_lift + friction_head + velocity_head\n        pump_head_capacity >= total_head\n        pump_flow_at_head >= required_flow\n        safety_factor: 1.3\n        constraint joint_pressure_rating:\n        where:\n        joint.type == \"mechanical\"\n        must:\n        hydrostatic_pressure = water.density * gravity * height\n        test_pressure = 1.5 * working_pressure\n        joint.pressure_rating >= test_pressure\n        safety_factor: 1.5\n        constraint cleanout_rodding_force:\n        where:\n        cleanout.required == true\n        must:\n        rodding_force = friction_coefficient * rod_weight * length\n        rodding_force < 50.pounds  # Reasonable human force\n        working_space >= required_for_rod_insertion\n    must:\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.watertight == true\n        pit.material IN [\"tile\", \"concrete\", \"steel\", \"fiberglass\"]\n        cover.gas_tight == true\n        cover.removable == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.3\"\n        constraint horizontal_drain_capacity:\n        where:\n        drain.horizontal == true\n        must:\n        flow_capacity = flow.manning_flow(\n        pipe.area,\n        hydraulic_radius,\n        slope,\n        roughness\n        )\n        flow_capacity >= fixture_unit_discharge\n        safety_factor: 1.5\n        constraint plastic_pipe_expansion:\n        where:\n        pipe.material == \"plastic\"\n        must:\n        expansion = length * thermal.expansion_coefficient * temperature_change\n        expansion_allowance >= expansion\n        support_spacing < critical_buckling_length\n        safety_factor: 1.3\n        constraint stack_terminal_velocity:\n        where:\n        stack.vertical == true\n        must:\n        terminal_velocity = sqrt(\n        (32 * stack.diameter * (water.density - air.density)) /\n        (3 * drag_coefficient * water.density)\n        )\n        water_velocity < 0.5 * terminal_velocity\n        safety_factor: 1.5\n        constraint sump_pump_head:\n        where:\n        pump.type == \"sump\"\n        must:\n        total_head = static_lift + friction_head + velocity_head\n        pump_head_capacity >= total_head\n        pump_flow_at_head >= required_flow\n        safety_factor: 1.3\n        constraint joint_pressure_rating:\n        where:\n        joint.type == \"mechanical\"\n        must:\n        hydrostatic_pressure = water.density * gravity * height\n        test_pressure = 1.5 * working_pressure\n        joint.pressure_rating >= test_pressure\n        safety_factor: 1.5\n        constraint cleanout_rodding_force:\n        where:\n        cleanout.required == true\n        must:\n        rodding_force = friction_coefficient * rod_weight * length\n        rodding_force < 50.pounds  # Reasonable human force\n        working_space >= required_for_rod_insertion\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3007.3\"", "rule_name": "sump_pit_requirements"}
{"type": "bcl_to_physics", "input": "rule sump_pit_requirements with constraints: diameter, depth", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.3 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Code.2024.30.P3007.3", "rule_name": "sump_pit_requirements"}
{"type": "bcl_completion", "input": "rule sump_pit_requirements:\n    where:\n        sump.has_pump == true\n    # Complete this rule", "output": "rule sump_pit_requirements:\n    where:\n        sump.has_pump == true\n        must:\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.watertight == true\n        pit.material IN [\"tile\", \"concrete\", \"steel\", \"fiberglass\"]\n        cover.gas_tight == true\n        cover.removable == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.3\"\n        constraint horizontal_drain_capacity:\n        where:\n        drain.horizontal == true\n        must:\n        flow_capacity = flow.manning_flow(\n        pipe.area,\n        hydraulic_radius,\n        slope,\n        roughness\n        )\n        flow_capacity >= fixture_unit_discharge\n        safety_factor: 1.5\n        constraint plastic_pipe_expansion:\n        where:\n        pipe.material == \"plastic\"\n        must:\n        expansion = length * thermal.expansion_coefficient * temperature_change\n        expansion_allowance >= expansion\n        support_spacing < critical_buckling_length\n        safety_factor: 1.3\n        constraint stack_terminal_velocity:\n        where:\n        stack.vertical == true\n        must:\n        terminal_velocity = sqrt(\n        (32 * stack.diameter * (water.density - air.density)) /\n        (3 * drag_coefficient * water.density)\n        )\n        water_velocity < 0.5 * terminal_velocity\n        safety_factor: 1.5\n        constraint sump_pump_head:\n        where:\n        pump.type == \"sump\"\n        must:\n        total_head = static_lift + friction_head + velocity_head\n        pump_head_capacity >= total_head\n        pump_flow_at_head >= required_flow\n        safety_factor: 1.3\n        constraint joint_pressure_rating:\n        where:\n        joint.type == \"mechanical\"\n        must:\n        hydrostatic_pressure = water.density * gravity * height\n        test_pressure = 1.5 * working_pressure\n        joint.pressure_rating >= test_pressure\n        safety_factor: 1.5\n        constraint cleanout_rodding_force:\n        where:\n        cleanout.required == true\n        must:\n        rodding_force = friction_coefficient * rod_weight * length\n        rodding_force < 50.pounds  # Reasonable human force\n        working_space >= required_for_rod_insertion\n    must:\n        pit.diameter >= 18.inches\n        pit.depth >= 24.inches\n        pit.watertight == true\n        pit.material IN [\"tile\", \"concrete\", \"steel\", \"fiberglass\"]\n        cover.gas_tight == true\n        cover.removable == true\n        safety_factor: 1.3\n        reference: \"FL.Code.2024.30.P3007.3\"\n        constraint horizontal_drain_capacity:\n        where:\n        drain.horizontal == true\n        must:\n        flow_capacity = flow.manning_flow(\n        pipe.area,\n        hydraulic_radius,\n        slope,\n        roughness\n        )\n        flow_capacity >= fixture_unit_discharge\n        safety_factor: 1.5\n        constraint plastic_pipe_expansion:\n        where:\n        pipe.material == \"plastic\"\n        must:\n        expansion = length * thermal.expansion_coefficient * temperature_change\n        expansion_allowance >= expansion\n        support_spacing < critical_buckling_length\n        safety_factor: 1.3\n        constraint stack_terminal_velocity:\n        where:\n        stack.vertical == true\n        must:\n        terminal_velocity = sqrt(\n        (32 * stack.diameter * (water.density - air.density)) /\n        (3 * drag_coefficient * water.density)\n        )\n        water_velocity < 0.5 * terminal_velocity\n        safety_factor: 1.5\n        constraint sump_pump_head:\n        where:\n        pump.type == \"sump\"\n        must:\n        total_head = static_lift + friction_head + velocity_head\n        pump_head_capacity >= total_head\n        pump_flow_at_head >= required_flow\n        safety_factor: 1.3\n        constraint joint_pressure_rating:\n        where:\n        joint.type == \"mechanical\"\n        must:\n        hydrostatic_pressure = water.density * gravity * height\n        test_pressure = 1.5 * working_pressure\n        joint.pressure_rating >= test_pressure\n        safety_factor: 1.5\n        constraint cleanout_rodding_force:\n        where:\n        cleanout.required == true\n        must:\n        rodding_force = friction_coefficient * rod_weight * length\n        rodding_force < 50.pounds  # Reasonable human force\n        working_space >= required_for_rod_insertion\n    safety_factor: 1.3\n    reference: \"FL.Code.2024.30.P3007.3\"", "rule_name": "sump_pit_requirements"}
{"type": "safety_factor_reasoning", "input": "For sump_pit_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.3 is appropriate because this involves important safety systems with moderate risk. This aligns with FL.Code.2024.30.P3007.3.", "rule_name": "sump_pit_requirements", "safety_factor": 1.3}
{"type": "legal_to_bcl", "input": "Requirement for pool flood hazard installation: When element.type == \"swimming_pool\" and element.location.is_flood_hazard_area == True, it is required that if element.location.flood_zone == \"A\": and element.complies_with_section(\"R322.2.4\")", "output": "rule pool_flood_hazard_installation:\n    where:\n        element.type == \"swimming_pool\"\n        element.location.is_flood_hazard_area == True\n        must:\n        if element.location.flood_zone == \"A\":\n        element.complies_with_section(\"R322.2.4\")\n        elif element.location.flood_zone == \"V\":\n        element.complies_with_section(\"R322.3.3.1\")\n        reference: \"FL.Residential.2023.R4501.4.2.1\"\n    must:\n        if element.location.flood_zone == \"A\":\n        element.complies_with_section(\"R322.2.4\")\n        elif element.location.flood_zone == \"V\":\n        element.complies_with_section(\"R322.3.3.1\")\n        reference: \"FL.Residential.2023.R4501.4.2.1\"\n    reference: \"FL.Residential.2023.R4501.4.2.1\"", "rule_name": "pool_flood_hazard_installation"}
{"type": "bcl_to_physics", "input": "rule pool_flood_hazard_installation with conditions: if element.location.flood_zone == \"A\":, element.complies_with_section(\"R322.2.4\")", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R4501.4.2.1", "rule_name": "pool_flood_hazard_installation"}
{"type": "bcl_completion", "input": "rule pool_flood_hazard_installation:\n    where:\n        element.type == \"swimming_pool\"\n    # Complete this rule", "output": "rule pool_flood_hazard_installation:\n    where:\n        element.type == \"swimming_pool\"\n        element.location.is_flood_hazard_area == True\n        must:\n        if element.location.flood_zone == \"A\":\n        element.complies_with_section(\"R322.2.4\")\n        elif element.location.flood_zone == \"V\":\n        element.complies_with_section(\"R322.3.3.1\")\n        reference: \"FL.Residential.2023.R4501.4.2.1\"\n    must:\n        if element.location.flood_zone == \"A\":\n        element.complies_with_section(\"R322.2.4\")\n        elif element.location.flood_zone == \"V\":\n        element.complies_with_section(\"R322.3.3.1\")\n        reference: \"FL.Residential.2023.R4501.4.2.1\"\n    reference: \"FL.Residential.2023.R4501.4.2.1\"", "rule_name": "pool_flood_hazard_installation"}
{"type": "legal_to_bcl", "input": "Requirement for pool mechanical equipment required: When element.type == \"swimming_pool\" and element.has_fresh_water_supply == False or element.fresh_water_turnover_rate < element.required_turnover_time, it is required that element.has_filter == True and element.has_pump == True", "output": "rule pool_mechanical_equipment_required:\n    where:\n        element.type == \"swimming_pool\"\n        element.has_fresh_water_supply == False or element.fresh_water_turnover_rate < element.required_turnover_time\n        must:\n        element.has_filter == True\n        element.has_pump == True\n        element.has_piping_system == True\n        element.has_valves == True\n        element.equipment_is_approved == True\n        reference: \"FL.Residential.2023.R4501.6.2\"\n    must:\n        element.has_filter == True\n        element.has_pump == True\n        element.has_piping_system == True\n        element.has_valves == True\n        element.equipment_is_approved == True\n        reference: \"FL.Residential.2023.R4501.6.2\"\n    reference: \"FL.Residential.2023.R4501.6.2\"", "rule_name": "pool_mechanical_equipment_required"}
{"type": "bcl_to_physics", "input": "rule pool_mechanical_equipment_required with conditions: element.has_filter == True, element.has_pump == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R4501.6.2", "rule_name": "pool_mechanical_equipment_required"}
{"type": "bcl_completion", "input": "rule pool_mechanical_equipment_required:\n    where:\n        element.type == \"swimming_pool\"\n    # Complete this rule", "output": "rule pool_mechanical_equipment_required:\n    where:\n        element.type == \"swimming_pool\"\n        element.has_fresh_water_supply == False or element.fresh_water_turnover_rate < element.required_turnover_time\n        must:\n        element.has_filter == True\n        element.has_pump == True\n        element.has_piping_system == True\n        element.has_valves == True\n        element.equipment_is_approved == True\n        reference: \"FL.Residential.2023.R4501.6.2\"\n    must:\n        element.has_filter == True\n        element.has_pump == True\n        element.has_piping_system == True\n        element.has_valves == True\n        element.equipment_is_approved == True\n        reference: \"FL.Residential.2023.R4501.6.2\"\n    reference: \"FL.Residential.2023.R4501.6.2\"", "rule_name": "pool_mechanical_equipment_required"}
{"type": "legal_to_bcl", "input": "Requirement for pool piping velocity limits: When element.type == \"pool_piping\" and must:, it is required that if element.pipe_type == \"pressure\": and flow.velocity(element) <= 10.feet_per_second", "output": "rule pool_piping_velocity_limits:\n    where:\n        element.type == \"pool_piping\"\n        must:\n        if element.pipe_type == \"pressure\":\n        flow.velocity(element) <= 10.feet_per_second\n        elif element.pipe_type == \"suction\":\n        flow.velocity(element) <= 8.feet_per_second\n        if element.material == \"copper\":\n        flow.velocity(element) <= 8.feet_per_second\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.R4501.6.3\"\n    must:\n        if element.pipe_type == \"pressure\":\n        flow.velocity(element) <= 10.feet_per_second\n        elif element.pipe_type == \"suction\":\n        flow.velocity(element) <= 8.feet_per_second\n        if element.material == \"copper\":\n        flow.velocity(element) <= 8.feet_per_second\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.R4501.6.3\"\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.R4501.6.3\"", "rule_name": "pool_piping_velocity_limits"}
{"type": "bcl_to_physics", "input": "rule pool_piping_velocity_limits with constraints: flow.velocity(element), flow.velocity(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.R4501.6.3", "rule_name": "pool_piping_velocity_limits"}
{"type": "bcl_completion", "input": "rule pool_piping_velocity_limits:\n    where:\n        element.type == \"pool_piping\"\n    # Complete this rule", "output": "rule pool_piping_velocity_limits:\n    where:\n        element.type == \"pool_piping\"\n        must:\n        if element.pipe_type == \"pressure\":\n        flow.velocity(element) <= 10.feet_per_second\n        elif element.pipe_type == \"suction\":\n        flow.velocity(element) <= 8.feet_per_second\n        if element.material == \"copper\":\n        flow.velocity(element) <= 8.feet_per_second\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.R4501.6.3\"\n    must:\n        if element.pipe_type == \"pressure\":\n        flow.velocity(element) <= 10.feet_per_second\n        elif element.pipe_type == \"suction\":\n        flow.velocity(element) <= 8.feet_per_second\n        if element.material == \"copper\":\n        flow.velocity(element) <= 8.feet_per_second\n        safety_factor: 1.2\n        reference: \"FL.Residential.2023.R4501.6.3\"\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.R4501.6.3\"", "rule_name": "pool_piping_velocity_limits"}
{"type": "safety_factor_reasoning", "input": "For pool_piping_velocity_limits rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.R4501.6.3.", "rule_name": "pool_piping_velocity_limits", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for pool entrapment protection: When element.type == \"pool_suction_outlet\" and must:, it is required that element.has_entrapment_protection == True and element.complies_with_vgb_act == True", "output": "rule pool_entrapment_protection:\n    where:\n        element.type == \"pool_suction_outlet\"\n        must:\n        element.has_entrapment_protection == True\n        element.complies_with_vgb_act == True\n        reference: \"FL.Residential.2023.R4501.6.6\"\n    must:\n        element.has_entrapment_protection == True\n        element.complies_with_vgb_act == True\n        reference: \"FL.Residential.2023.R4501.6.6\"\n    reference: \"FL.Residential.2023.R4501.6.6\"", "rule_name": "pool_entrapment_protection"}
{"type": "bcl_to_physics", "input": "rule pool_entrapment_protection with conditions: element.has_entrapment_protection == True, element.complies_with_vgb_act == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R4501.6.6", "rule_name": "pool_entrapment_protection"}
{"type": "bcl_completion", "input": "rule pool_entrapment_protection:\n    where:\n        element.type == \"pool_suction_outlet\"\n    # Complete this rule", "output": "rule pool_entrapment_protection:\n    where:\n        element.type == \"pool_suction_outlet\"\n        must:\n        element.has_entrapment_protection == True\n        element.complies_with_vgb_act == True\n        reference: \"FL.Residential.2023.R4501.6.6\"\n    must:\n        element.has_entrapment_protection == True\n        element.complies_with_vgb_act == True\n        reference: \"FL.Residential.2023.R4501.6.6\"\n    reference: \"FL.Residential.2023.R4501.6.6\"", "rule_name": "pool_entrapment_protection"}
{"type": "legal_to_bcl", "input": "Requirement for pool pump strainer: When element.type == \"pool_pump\" and element.filter_type == \"pressure\", it is required that element.has_hair_lint_strainer == True and element.strainer_location == \"inlet_side\"", "output": "rule pool_pump_strainer:\n    where:\n        element.type == \"pool_pump\"\n        element.filter_type == \"pressure\"\n        must:\n        element.has_hair_lint_strainer == True\n        element.strainer_location == \"inlet_side\"\n        element.strainer_is_approved_type == True\n        reference: \"FL.Residential.2023.R4501.7.1\"\n    must:\n        element.has_hair_lint_strainer == True\n        element.strainer_location == \"inlet_side\"\n        element.strainer_is_approved_type == True\n        reference: \"FL.Residential.2023.R4501.7.1\"\n    reference: \"FL.Residential.2023.R4501.7.1\"", "rule_name": "pool_pump_strainer"}
{"type": "bcl_to_physics", "input": "rule pool_pump_strainer with conditions: element.has_hair_lint_strainer == True, element.strainer_location == \"inlet_side\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R4501.7.1", "rule_name": "pool_pump_strainer"}
{"type": "bcl_completion", "input": "rule pool_pump_strainer:\n    where:\n        element.type == \"pool_pump\"\n    # Complete this rule", "output": "rule pool_pump_strainer:\n    where:\n        element.type == \"pool_pump\"\n        element.filter_type == \"pressure\"\n        must:\n        element.has_hair_lint_strainer == True\n        element.strainer_location == \"inlet_side\"\n        element.strainer_is_approved_type == True\n        reference: \"FL.Residential.2023.R4501.7.1\"\n    must:\n        element.has_hair_lint_strainer == True\n        element.strainer_location == \"inlet_side\"\n        element.strainer_is_approved_type == True\n        reference: \"FL.Residential.2023.R4501.7.1\"\n    reference: \"FL.Residential.2023.R4501.7.1\"", "rule_name": "pool_pump_strainer"}
{"type": "legal_to_bcl", "input": "Requirement for pool pump capacity: When element.type == \"pool_pump\" and must:, it is required that if element.filter_type == \"pressure_diatomaceous_earth\": and element.design_head >= 60.feet", "output": "rule pool_pump_capacity:\n    where:\n        element.type == \"pool_pump\"\n        must:\n        if element.filter_type == \"pressure_diatomaceous_earth\":\n        element.design_head >= 60.feet\n        elif element.filter_type == \"vacuum_diatomaceous_earth\":\n        element.suction_vacuum >= 20.inches_mercury\n        element.total_head >= 40.feet\n        elif element.filter_type == \"rapid_sand\":\n        element.design_head >= 45.feet\n        elif element.filter_type == \"high_rate_sand\":\n        element.design_head >= 60.feet\n        safety_factor: 1.1\n        reference: \"FL.Residential.2023.R4501.7.3\"\n    must:\n        if element.filter_type == \"pressure_diatomaceous_earth\":\n        element.design_head >= 60.feet\n        elif element.filter_type == \"vacuum_diatomaceous_earth\":\n        element.suction_vacuum >= 20.inches_mercury\n        element.total_head >= 40.feet\n        elif element.filter_type == \"rapid_sand\":\n        element.design_head >= 45.feet\n        elif element.filter_type == \"high_rate_sand\":\n        element.design_head >= 60.feet\n        safety_factor: 1.1\n        reference: \"FL.Residential.2023.R4501.7.3\"\n    safety_factor: 1.1\n    reference: \"FL.Residential.2023.R4501.7.3\"", "rule_name": "pool_pump_capacity"}
{"type": "bcl_to_physics", "input": "rule pool_pump_capacity with constraints: design_head, suction_vacuum", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Reference: FL.Residential.2023.R4501.7.3", "rule_name": "pool_pump_capacity"}
{"type": "bcl_completion", "input": "rule pool_pump_capacity:\n    where:\n        element.type == \"pool_pump\"\n    # Complete this rule", "output": "rule pool_pump_capacity:\n    where:\n        element.type == \"pool_pump\"\n        must:\n        if element.filter_type == \"pressure_diatomaceous_earth\":\n        element.design_head >= 60.feet\n        elif element.filter_type == \"vacuum_diatomaceous_earth\":\n        element.suction_vacuum >= 20.inches_mercury\n        element.total_head >= 40.feet\n        elif element.filter_type == \"rapid_sand\":\n        element.design_head >= 45.feet\n        elif element.filter_type == \"high_rate_sand\":\n        element.design_head >= 60.feet\n        safety_factor: 1.1\n        reference: \"FL.Residential.2023.R4501.7.3\"\n    must:\n        if element.filter_type == \"pressure_diatomaceous_earth\":\n        element.design_head >= 60.feet\n        elif element.filter_type == \"vacuum_diatomaceous_earth\":\n        element.suction_vacuum >= 20.inches_mercury\n        element.total_head >= 40.feet\n        elif element.filter_type == \"rapid_sand\":\n        element.design_head >= 45.feet\n        elif element.filter_type == \"high_rate_sand\":\n        element.design_head >= 60.feet\n        safety_factor: 1.1\n        reference: \"FL.Residential.2023.R4501.7.3\"\n    safety_factor: 1.1\n    reference: \"FL.Residential.2023.R4501.7.3\"", "rule_name": "pool_pump_capacity"}
{"type": "safety_factor_reasoning", "input": "For pool_pump_capacity rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.R4501.7.3.", "rule_name": "pool_pump_capacity", "safety_factor": 1.1}
{"type": "legal_to_bcl", "input": "Requirement for pool pump materials: When element.type == \"pool_pump_component\" and element.component_type in [\"impeller\", \"shaft\", \"wear_ring\"], it is required that element.material.is_corrosion_resistant == True and reference: \"FL.Residential.2023.R4501.7.4\"", "output": "rule pool_pump_materials:\n    where:\n        element.type == \"pool_pump_component\"\n        element.component_type in [\"impeller\", \"shaft\", \"wear_ring\"]\n        must:\n        element.material.is_corrosion_resistant == True\n        reference: \"FL.Residential.2023.R4501.7.4\"\n    must:\n        element.material.is_corrosion_resistant == True\n        reference: \"FL.Residential.2023.R4501.7.4\"\n    reference: \"FL.Residential.2023.R4501.7.4\"", "rule_name": "pool_pump_materials"}
{"type": "bcl_to_physics", "input": "rule pool_pump_materials with conditions: element.material.is_corrosion_resistant == True, reference: \"FL.Residential.2023.R4501.7.4\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R4501.7.4", "rule_name": "pool_pump_materials"}
{"type": "bcl_completion", "input": "rule pool_pump_materials:\n    where:\n        element.type == \"pool_pump_component\"\n    # Complete this rule", "output": "rule pool_pump_materials:\n    where:\n        element.type == \"pool_pump_component\"\n        element.component_type in [\"impeller\", \"shaft\", \"wear_ring\"]\n        must:\n        element.material.is_corrosion_resistant == True\n        reference: \"FL.Residential.2023.R4501.7.4\"\n    must:\n        element.material.is_corrosion_resistant == True\n        reference: \"FL.Residential.2023.R4501.7.4\"\n    reference: \"FL.Residential.2023.R4501.7.4\"", "rule_name": "pool_pump_materials"}
{"type": "legal_to_bcl", "input": "Requirement for pool valve accessibility: When element.type == \"pool_valve\" and must:, it is required that element.is_readily_accessible == True and if element.location == \"under_concrete_slab\":", "output": "rule pool_valve_accessibility:\n    where:\n        element.type == \"pool_valve\"\n        must:\n        element.is_readily_accessible == True\n        if element.location == \"under_concrete_slab\":\n        element.has_access_pit == True\n        element.pit_dimension >= max(5 * element.pipe_diameter, 10.inches)\n        element.pit_has_cover == True\n        reference: \"FL.Residential.2023.R4501.8.1\"\n    must:\n        element.is_readily_accessible == True\n        if element.location == \"under_concrete_slab\":\n        element.has_access_pit == True\n        element.pit_dimension >= max(5 * element.pipe_diameter, 10.inches)\n        element.pit_has_cover == True\n        reference: \"FL.Residential.2023.R4501.8.1\"\n    reference: \"FL.Residential.2023.R4501.8.1\"", "rule_name": "pool_valve_accessibility"}
{"type": "bcl_to_physics", "input": "rule pool_valve_accessibility with conditions: element.is_readily_accessible == True, if element.location == \"under_concrete_slab\":", "output": "This rule ensures safety through physics-based validation. Reference: FL.Residential.2023.R4501.8.1", "rule_name": "pool_valve_accessibility"}
{"type": "bcl_completion", "input": "rule pool_valve_accessibility:\n    where:\n        element.type == \"pool_valve\"\n    # Complete this rule", "output": "rule pool_valve_accessibility:\n    where:\n        element.type == \"pool_valve\"\n        must:\n        element.is_readily_accessible == True\n        if element.location == \"under_concrete_slab\":\n        element.has_access_pit == True\n        element.pit_dimension >= max(5 * element.pipe_diameter, 10.inches)\n        element.pit_has_cover == True\n        reference: \"FL.Residential.2023.R4501.8.1\"\n    must:\n        element.is_readily_accessible == True\n        if element.location == \"under_concrete_slab\":\n        element.has_access_pit == True\n        element.pit_dimension >= max(5 * element.pipe_diameter, 10.inches)\n        element.pit_has_cover == True\n        reference: \"FL.Residential.2023.R4501.8.1\"\n    reference: \"FL.Residential.2023.R4501.8.1\"", "rule_name": "pool_valve_accessibility"}
{"type": "legal_to_bcl", "input": "Requirement for pool shutoff valves: When element.type == \"pool_pump\" and element.elevation < element.pool.overflow_rim_elevation, it is required that element.has_discharge_valve == True and element.has_suction_valve == True", "output": "rule pool_shutoff_valves:\n    where:\n        element.type == \"pool_pump\"\n        element.elevation < element.pool.overflow_rim_elevation\n        must:\n        element.has_discharge_valve == True\n        element.has_suction_valve == True\n        element.valve_type == \"full_way\" or element.valve_type == \"gate\"\n        reference: \"FL.Residential.2023.R4501.8.2\"\n    must:\n        element.has_discharge_valve == True\n        element.has_suction_valve == True\n        element.valve_type == \"full_way\" or element.valve_type == \"gate\"\n        reference: \"FL.Residential.2023.R4501.8.2\"\n    reference: \"FL.Residential.2023.R4501.8.2\"", "rule_name": "pool_shutoff_valves"}
{"type": "bcl_to_physics", "input": "rule pool_shutoff_valves with conditions: element.has_discharge_valve == True, element.has_suction_valve == True", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.R4501.8.2", "rule_name": "pool_shutoff_valves"}
{"type": "bcl_completion", "input": "rule pool_shutoff_valves:\n    where:\n        element.type == \"pool_pump\"\n    # Complete this rule", "output": "rule pool_shutoff_valves:\n    where:\n        element.type == \"pool_pump\"\n        element.elevation < element.pool.overflow_rim_elevation\n        must:\n        element.has_discharge_valve == True\n        element.has_suction_valve == True\n        element.valve_type == \"full_way\" or element.valve_type == \"gate\"\n        reference: \"FL.Residential.2023.R4501.8.2\"\n    must:\n        element.has_discharge_valve == True\n        element.has_suction_valve == True\n        element.valve_type == \"full_way\" or element.valve_type == \"gate\"\n        reference: \"FL.Residential.2023.R4501.8.2\"\n    reference: \"FL.Residential.2023.R4501.8.2\"", "rule_name": "pool_shutoff_valves"}
{"type": "legal_to_bcl", "input": "Requirement for pool water supply backflow: When element.type == \"pool_fill_system\" and element.administrative_authority.requires_backflow_protection == True, it is required that element.has_backflow_protection == True and if element.fill_type == \"over_rim_spout\":", "output": "rule pool_water_supply_backflow:\n    where:\n        element.type == \"pool_fill_system\"\n        element.administrative_authority.requires_backflow_protection == True\n        must:\n        element.has_backflow_protection == True\n        if element.fill_type == \"over_rim_spout\":\n        element.location == \"under_diving_board\" or element.is_properly_guarded == True\n        reference: \"FL.Residential.2023.R4501.9\"\n    must:\n        element.has_backflow_protection == True\n        if element.fill_type == \"over_rim_spout\":\n        element.location == \"under_diving_board\" or element.is_properly_guarded == True\n        reference: \"FL.Residential.2023.R4501.9\"\n    reference: \"FL.Residential.2023.R4501.9\"", "rule_name": "pool_water_supply_backflow"}
{"type": "bcl_to_physics", "input": "rule pool_water_supply_backflow with conditions: element.has_backflow_protection == True, if element.fill_type == \"over_rim_spout\":", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.R4501.9", "rule_name": "pool_water_supply_backflow"}
{"type": "bcl_completion", "input": "rule pool_water_supply_backflow:\n    where:\n        element.type == \"pool_fill_system\"\n    # Complete this rule", "output": "rule pool_water_supply_backflow:\n    where:\n        element.type == \"pool_fill_system\"\n        element.administrative_authority.requires_backflow_protection == True\n        must:\n        element.has_backflow_protection == True\n        if element.fill_type == \"over_rim_spout\":\n        element.location == \"under_diving_board\" or element.is_properly_guarded == True\n        reference: \"FL.Residential.2023.R4501.9\"\n    must:\n        element.has_backflow_protection == True\n        if element.fill_type == \"over_rim_spout\":\n        element.location == \"under_diving_board\" or element.is_properly_guarded == True\n        reference: \"FL.Residential.2023.R4501.9\"\n    reference: \"FL.Residential.2023.R4501.9\"", "rule_name": "pool_water_supply_backflow"}
{"type": "legal_to_bcl", "input": "Requirement for pool waste disposal trap: When element.type == \"pool_waste_connection\" and element.connects_to == \"public_sewer\", it is required that element.has_p_trap == True and element.trap_size >= 3.inches", "output": "rule pool_waste_disposal_trap:\n    where:\n        element.type == \"pool_waste_connection\"\n        element.connects_to == \"public_sewer\"\n        must:\n        element.has_p_trap == True\n        element.trap_size >= 3.inches\n        element.trap_tail_extends_above_grade >= 3.inches\n        element.trap_tail_below_floor_grade == True\n        element.connection_type == \"indirect\"\n        reference: \"FL.Residential.2023.R4501.10.2\"\n        constraint pool_circulation_turnover:\n        where:\n        element.type == \"swimming_pool\"\n        require:\n        flow.turnover_time(\n        element.volume,\n        element.circulation_system.flow_rate\n        ) <= element.required_turnover_time\n        safety_factor: 1.2\n        constraint pool_pump_npsh:\n        where:\n        element.type == \"pool_pump\"\n        require:\n        flow.available_npsh(\n        element.atmospheric_pressure,\n        element.vapor_pressure,\n        element.suction_head,\n        element.friction_losses\n        ) >= element.required_npsh * 1.2\n        safety_factor: 1.2\n        constraint pool_pipe_pressure_rating:\n        where:\n        element.type == \"pool_piping\"\n        require:\n        element.pressure_rating >= flow.system_pressure(\n        element.pump_head,\n        element.static_head,\n        flow.water_hammer_pressure(element)\n        )\n        safety_factor: 2.0\n        constraint pool_suction_velocity_safety:\n        where:\n        element.type == \"pool_suction_outlet\"\n        require:\n        flow.outlet_velocity(\n        element.flow_rate,\n        element.total_open_area\n        ) <= safety.max_suction_velocity\n        safety_factor: 2.0\n        constraint pool_filter_capacity:\n        where:\n        element.type == \"pool_filter\"\n        require:\n        element.filter_area * element.filter_rate >= element.design_flow_rate\n        safety_factor: 1.25\n        constraint pool_structural_loads:\n        where:\n        element.type == \"swimming_pool\"\n        element.pool_type == \"inground\"\n        require:\n        structural.wall_strength(element) >= max(\n        soil_mechanics.lateral_earth_pressure(element.soil_type, element.depth),\n        water.hydrostatic_pressure(element.depth)\n        )\n    must:\n        element.has_p_trap == True\n        element.trap_size >= 3.inches\n        element.trap_tail_extends_above_grade >= 3.inches\n        element.trap_tail_below_floor_grade == True\n        element.connection_type == \"indirect\"\n        reference: \"FL.Residential.2023.R4501.10.2\"\n        constraint pool_circulation_turnover:\n        where:\n        element.type == \"swimming_pool\"\n        require:\n        flow.turnover_time(\n        element.volume,\n        element.circulation_system.flow_rate\n        ) <= element.required_turnover_time\n        safety_factor: 1.2\n        constraint pool_pump_npsh:\n        where:\n        element.type == \"pool_pump\"\n        require:\n        flow.available_npsh(\n        element.atmospheric_pressure,\n        element.vapor_pressure,\n        element.suction_head,\n        element.friction_losses\n        ) >= element.required_npsh * 1.2\n        safety_factor: 1.2\n        constraint pool_pipe_pressure_rating:\n        where:\n        element.type == \"pool_piping\"\n        require:\n        element.pressure_rating >= flow.system_pressure(\n        element.pump_head,\n        element.static_head,\n        flow.water_hammer_pressure(element)\n        )\n        safety_factor: 2.0\n        constraint pool_suction_velocity_safety:\n        where:\n        element.type == \"pool_suction_outlet\"\n        require:\n        flow.outlet_velocity(\n        element.flow_rate,\n        element.total_open_area\n        ) <= safety.max_suction_velocity\n        safety_factor: 2.0\n        constraint pool_filter_capacity:\n        where:\n        element.type == \"pool_filter\"\n        require:\n        element.filter_area * element.filter_rate >= element.design_flow_rate\n        safety_factor: 1.25\n        constraint pool_structural_loads:\n        where:\n        element.type == \"swimming_pool\"\n        element.pool_type == \"inground\"\n        require:\n        structural.wall_strength(element) >= max(\n        soil_mechanics.lateral_earth_pressure(element.soil_type, element.depth),\n        water.hydrostatic_pressure(element.depth)\n        )\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.R4501.10.2\"", "rule_name": "pool_waste_disposal_trap"}
{"type": "bcl_to_physics", "input": "rule pool_waste_disposal_trap with constraints: trap_size, trap_tail_extends_above_grade", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.2 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Residential.2023.R4501.10.2", "rule_name": "pool_waste_disposal_trap"}
{"type": "bcl_completion", "input": "rule pool_waste_disposal_trap:\n    where:\n        element.type == \"pool_waste_connection\"\n    # Complete this rule", "output": "rule pool_waste_disposal_trap:\n    where:\n        element.type == \"pool_waste_connection\"\n        element.connects_to == \"public_sewer\"\n        must:\n        element.has_p_trap == True\n        element.trap_size >= 3.inches\n        element.trap_tail_extends_above_grade >= 3.inches\n        element.trap_tail_below_floor_grade == True\n        element.connection_type == \"indirect\"\n        reference: \"FL.Residential.2023.R4501.10.2\"\n        constraint pool_circulation_turnover:\n        where:\n        element.type == \"swimming_pool\"\n        require:\n        flow.turnover_time(\n        element.volume,\n        element.circulation_system.flow_rate\n        ) <= element.required_turnover_time\n        safety_factor: 1.2\n        constraint pool_pump_npsh:\n        where:\n        element.type == \"pool_pump\"\n        require:\n        flow.available_npsh(\n        element.atmospheric_pressure,\n        element.vapor_pressure,\n        element.suction_head,\n        element.friction_losses\n        ) >= element.required_npsh * 1.2\n        safety_factor: 1.2\n        constraint pool_pipe_pressure_rating:\n        where:\n        element.type == \"pool_piping\"\n        require:\n        element.pressure_rating >= flow.system_pressure(\n        element.pump_head,\n        element.static_head,\n        flow.water_hammer_pressure(element)\n        )\n        safety_factor: 2.0\n        constraint pool_suction_velocity_safety:\n        where:\n        element.type == \"pool_suction_outlet\"\n        require:\n        flow.outlet_velocity(\n        element.flow_rate,\n        element.total_open_area\n        ) <= safety.max_suction_velocity\n        safety_factor: 2.0\n        constraint pool_filter_capacity:\n        where:\n        element.type == \"pool_filter\"\n        require:\n        element.filter_area * element.filter_rate >= element.design_flow_rate\n        safety_factor: 1.25\n        constraint pool_structural_loads:\n        where:\n        element.type == \"swimming_pool\"\n        element.pool_type == \"inground\"\n        require:\n        structural.wall_strength(element) >= max(\n        soil_mechanics.lateral_earth_pressure(element.soil_type, element.depth),\n        water.hydrostatic_pressure(element.depth)\n        )\n    must:\n        element.has_p_trap == True\n        element.trap_size >= 3.inches\n        element.trap_tail_extends_above_grade >= 3.inches\n        element.trap_tail_below_floor_grade == True\n        element.connection_type == \"indirect\"\n        reference: \"FL.Residential.2023.R4501.10.2\"\n        constraint pool_circulation_turnover:\n        where:\n        element.type == \"swimming_pool\"\n        require:\n        flow.turnover_time(\n        element.volume,\n        element.circulation_system.flow_rate\n        ) <= element.required_turnover_time\n        safety_factor: 1.2\n        constraint pool_pump_npsh:\n        where:\n        element.type == \"pool_pump\"\n        require:\n        flow.available_npsh(\n        element.atmospheric_pressure,\n        element.vapor_pressure,\n        element.suction_head,\n        element.friction_losses\n        ) >= element.required_npsh * 1.2\n        safety_factor: 1.2\n        constraint pool_pipe_pressure_rating:\n        where:\n        element.type == \"pool_piping\"\n        require:\n        element.pressure_rating >= flow.system_pressure(\n        element.pump_head,\n        element.static_head,\n        flow.water_hammer_pressure(element)\n        )\n        safety_factor: 2.0\n        constraint pool_suction_velocity_safety:\n        where:\n        element.type == \"pool_suction_outlet\"\n        require:\n        flow.outlet_velocity(\n        element.flow_rate,\n        element.total_open_area\n        ) <= safety.max_suction_velocity\n        safety_factor: 2.0\n        constraint pool_filter_capacity:\n        where:\n        element.type == \"pool_filter\"\n        require:\n        element.filter_area * element.filter_rate >= element.design_flow_rate\n        safety_factor: 1.25\n        constraint pool_structural_loads:\n        where:\n        element.type == \"swimming_pool\"\n        element.pool_type == \"inground\"\n        require:\n        structural.wall_strength(element) >= max(\n        soil_mechanics.lateral_earth_pressure(element.soil_type, element.depth),\n        water.hydrostatic_pressure(element.depth)\n        )\n    safety_factor: 1.2\n    reference: \"FL.Residential.2023.R4501.10.2\"", "rule_name": "pool_waste_disposal_trap"}
{"type": "safety_factor_reasoning", "input": "For pool_waste_disposal_trap rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.2 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Residential.2023.R4501.10.2.", "rule_name": "pool_waste_disposal_trap", "safety_factor": 1.2}
{"type": "legal_to_bcl", "input": "Requirement for commercial envelope insulation: When element.type in [\"roof\", \"wall\", \"floor\"] and element.building_type == \"commercial\", it is required that if element.type == \"roof\": and element.r_value >= 25.0  # R-25 continuous insulation", "output": "rule commercial_envelope_insulation:\n    where:\n        element.type in [\"roof\", \"wall\", \"floor\"]\n        element.building_type == \"commercial\"\n        element.climate_zone in [\"1A\", \"2A\"]  # Florida climate zones\n        must:\n        if element.type == \"roof\":\n        element.r_value >= 25.0  # R-25 continuous insulation\n        elif element.type == \"wall\" and element.wall_type == \"mass\":\n        element.r_value >= 7.6\n        elif element.type == \"wall\" and element.wall_type == \"metal_building\":\n        element.r_value >= 13.0 + 13.0  # R-13 + R-13\n        elif element.type == \"wall\" and element.wall_type == \"wood_framed\":\n        element.r_value >= 13.0 + 3.8  # R-13 + R-3.8 continuous\n        reference: \"FL.EnergyCode.2023.Table_C402.1.3\"\n    must:\n        if element.type == \"roof\":\n        element.r_value >= 25.0  # R-25 continuous insulation\n        elif element.type == \"wall\" and element.wall_type == \"mass\":\n        element.r_value >= 7.6\n        elif element.type == \"wall\" and element.wall_type == \"metal_building\":\n        element.r_value >= 13.0 + 13.0  # R-13 + R-13\n        elif element.type == \"wall\" and element.wall_type == \"wood_framed\":\n        element.r_value >= 13.0 + 3.8  # R-13 + R-3.8 continuous\n        reference: \"FL.EnergyCode.2023.Table_C402.1.3\"\n    reference: \"FL.EnergyCode.2023.Table_C402.1.3\"", "rule_name": "commercial_envelope_insulation"}
{"type": "bcl_to_physics", "input": "rule commercial_envelope_insulation with constraints: r_value, r_value", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.Table_C402.1.3", "rule_name": "commercial_envelope_insulation"}
{"type": "bcl_completion", "input": "rule commercial_envelope_insulation:\n    where:\n        element.type in [\"roof\", \"wall\", \"floor\"]\n    # Complete this rule", "output": "rule commercial_envelope_insulation:\n    where:\n        element.type in [\"roof\", \"wall\", \"floor\"]\n        element.building_type == \"commercial\"\n        element.climate_zone in [\"1A\", \"2A\"]  # Florida climate zones\n        must:\n        if element.type == \"roof\":\n        element.r_value >= 25.0  # R-25 continuous insulation\n        elif element.type == \"wall\" and element.wall_type == \"mass\":\n        element.r_value >= 7.6\n        elif element.type == \"wall\" and element.wall_type == \"metal_building\":\n        element.r_value >= 13.0 + 13.0  # R-13 + R-13\n        elif element.type == \"wall\" and element.wall_type == \"wood_framed\":\n        element.r_value >= 13.0 + 3.8  # R-13 + R-3.8 continuous\n        reference: \"FL.EnergyCode.2023.Table_C402.1.3\"\n    must:\n        if element.type == \"roof\":\n        element.r_value >= 25.0  # R-25 continuous insulation\n        elif element.type == \"wall\" and element.wall_type == \"mass\":\n        element.r_value >= 7.6\n        elif element.type == \"wall\" and element.wall_type == \"metal_building\":\n        element.r_value >= 13.0 + 13.0  # R-13 + R-13\n        elif element.type == \"wall\" and element.wall_type == \"wood_framed\":\n        element.r_value >= 13.0 + 3.8  # R-13 + R-3.8 continuous\n        reference: \"FL.EnergyCode.2023.Table_C402.1.3\"\n    reference: \"FL.EnergyCode.2023.Table_C402.1.3\"", "rule_name": "commercial_envelope_insulation"}
{"type": "legal_to_bcl", "input": "Requirement for fenestration requirements: When element.type in [\"window\", \"skylight\", \"glazed_door\"] and element.building_type == \"commercial\", it is required that if element.type == \"window\": and element.u_factor <= 0.50  # Fixed", "output": "rule fenestration_requirements:\n    where:\n        element.type in [\"window\", \"skylight\", \"glazed_door\"]\n        element.building_type == \"commercial\"\n        must:\n        if element.type == \"window\":\n        element.u_factor <= 0.50  # Fixed\n        element.u_factor <= 0.65  # Operable\n        element.shgc <= 0.25  # Solar Heat Gain Coefficient\n        elif element.type == \"skylight\":\n        element.u_factor <= 0.65\n        element.shgc <= 0.35\n        element.window_to_wall_ratio <= 0.40  # 40% maximum\n        reference: \"FL.EnergyCode.2023.C402.4\"\n    must:\n        if element.type == \"window\":\n        element.u_factor <= 0.50  # Fixed\n        element.u_factor <= 0.65  # Operable\n        element.shgc <= 0.25  # Solar Heat Gain Coefficient\n        elif element.type == \"skylight\":\n        element.u_factor <= 0.65\n        element.shgc <= 0.35\n        element.window_to_wall_ratio <= 0.40  # 40% maximum\n        reference: \"FL.EnergyCode.2023.C402.4\"\n    reference: \"FL.EnergyCode.2023.C402.4\"", "rule_name": "fenestration_requirements"}
{"type": "bcl_to_physics", "input": "rule fenestration_requirements with constraints: u_factor, u_factor", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C402.4", "rule_name": "fenestration_requirements"}
{"type": "bcl_completion", "input": "rule fenestration_requirements:\n    where:\n        element.type in [\"window\", \"skylight\", \"glazed_door\"]\n    # Complete this rule", "output": "rule fenestration_requirements:\n    where:\n        element.type in [\"window\", \"skylight\", \"glazed_door\"]\n        element.building_type == \"commercial\"\n        must:\n        if element.type == \"window\":\n        element.u_factor <= 0.50  # Fixed\n        element.u_factor <= 0.65  # Operable\n        element.shgc <= 0.25  # Solar Heat Gain Coefficient\n        elif element.type == \"skylight\":\n        element.u_factor <= 0.65\n        element.shgc <= 0.35\n        element.window_to_wall_ratio <= 0.40  # 40% maximum\n        reference: \"FL.EnergyCode.2023.C402.4\"\n    must:\n        if element.type == \"window\":\n        element.u_factor <= 0.50  # Fixed\n        element.u_factor <= 0.65  # Operable\n        element.shgc <= 0.25  # Solar Heat Gain Coefficient\n        elif element.type == \"skylight\":\n        element.u_factor <= 0.65\n        element.shgc <= 0.35\n        element.window_to_wall_ratio <= 0.40  # 40% maximum\n        reference: \"FL.EnergyCode.2023.C402.4\"\n    reference: \"FL.EnergyCode.2023.C402.4\"", "rule_name": "fenestration_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for cool roof requirements: When element.type == \"roof\" and element.slope < 2/12  # Low-slope roof, it is required that element.solar_reflectance_initial >= 0.70 and element.solar_reflectance_aged >= 0.55", "output": "rule cool_roof_requirements:\n    where:\n        element.type == \"roof\"\n        element.slope < 2/12  # Low-slope roof\n        element.climate_zone in [\"1A\", \"2A\"]\n        must:\n        element.solar_reflectance_initial >= 0.70\n        element.solar_reflectance_aged >= 0.55\n        element.thermal_emittance >= 0.75\n        element.sri_initial >= 82  # Solar Reflectance Index\n        reference: \"FL.EnergyCode.2023.C402.3\"\n    must:\n        element.solar_reflectance_initial >= 0.70\n        element.solar_reflectance_aged >= 0.55\n        element.thermal_emittance >= 0.75\n        element.sri_initial >= 82  # Solar Reflectance Index\n        reference: \"FL.EnergyCode.2023.C402.3\"\n    reference: \"FL.EnergyCode.2023.C402.3\"", "rule_name": "cool_roof_requirements"}
{"type": "bcl_to_physics", "input": "rule cool_roof_requirements with constraints: solar_reflectance_initial, solar_reflectance_aged", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C402.3", "rule_name": "cool_roof_requirements"}
{"type": "bcl_completion", "input": "rule cool_roof_requirements:\n    where:\n        element.type == \"roof\"\n    # Complete this rule", "output": "rule cool_roof_requirements:\n    where:\n        element.type == \"roof\"\n        element.slope < 2/12  # Low-slope roof\n        element.climate_zone in [\"1A\", \"2A\"]\n        must:\n        element.solar_reflectance_initial >= 0.70\n        element.solar_reflectance_aged >= 0.55\n        element.thermal_emittance >= 0.75\n        element.sri_initial >= 82  # Solar Reflectance Index\n        reference: \"FL.EnergyCode.2023.C402.3\"\n    must:\n        element.solar_reflectance_initial >= 0.70\n        element.solar_reflectance_aged >= 0.55\n        element.thermal_emittance >= 0.75\n        element.sri_initial >= 82  # Solar Reflectance Index\n        reference: \"FL.EnergyCode.2023.C402.3\"\n    reference: \"FL.EnergyCode.2023.C402.3\"", "rule_name": "cool_roof_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for hvac controls requirements: When element.type == \"hvac_system\" and element.serves == \"commercial_building\", it is required that element.has_thermostatic_controls == True and element.deadband >= 5.degrees_f  # Between heating and cooling", "output": "rule hvac_controls_requirements:\n    where:\n        element.type == \"hvac_system\"\n        element.serves == \"commercial_building\"\n        must:\n        element.has_thermostatic_controls == True\n        element.deadband >= 5.degrees_f  # Between heating and cooling\n        element.has_automatic_shutdown == True\n        element.has_optimum_start_controls == True\n        if element.floor_area > 25000.sq_ft:\n        element.has_zone_isolation == True\n        reference: \"FL.EnergyCode.2023.C403.4\"\n    must:\n        element.has_thermostatic_controls == True\n        element.deadband >= 5.degrees_f  # Between heating and cooling\n        element.has_automatic_shutdown == True\n        element.has_optimum_start_controls == True\n        if element.floor_area > 25000.sq_ft:\n        element.has_zone_isolation == True\n        reference: \"FL.EnergyCode.2023.C403.4\"\n    reference: \"FL.EnergyCode.2023.C403.4\"", "rule_name": "hvac_controls_requirements"}
{"type": "bcl_to_physics", "input": "rule hvac_controls_requirements with constraints: deadband, floor_area", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.4", "rule_name": "hvac_controls_requirements"}
{"type": "bcl_completion", "input": "rule hvac_controls_requirements:\n    where:\n        element.type == \"hvac_system\"\n    # Complete this rule", "output": "rule hvac_controls_requirements:\n    where:\n        element.type == \"hvac_system\"\n        element.serves == \"commercial_building\"\n        must:\n        element.has_thermostatic_controls == True\n        element.deadband >= 5.degrees_f  # Between heating and cooling\n        element.has_automatic_shutdown == True\n        element.has_optimum_start_controls == True\n        if element.floor_area > 25000.sq_ft:\n        element.has_zone_isolation == True\n        reference: \"FL.EnergyCode.2023.C403.4\"\n    must:\n        element.has_thermostatic_controls == True\n        element.deadband >= 5.degrees_f  # Between heating and cooling\n        element.has_automatic_shutdown == True\n        element.has_optimum_start_controls == True\n        if element.floor_area > 25000.sq_ft:\n        element.has_zone_isolation == True\n        reference: \"FL.EnergyCode.2023.C403.4\"\n    reference: \"FL.EnergyCode.2023.C403.4\"", "rule_name": "hvac_controls_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for economizer requirements: When element.type == \"cooling_system\" and element.cooling_capacity >= 54000.btu_per_hr, it is required that element.has_economizer == True or element.has_exception_condition and element.economizer_integration == \"integrated\"", "output": "rule economizer_requirements:\n    where:\n        element.type == \"cooling_system\"\n        element.cooling_capacity >= 54000.btu_per_hr\n        element.climate_zone in [\"1A\", \"2A\"]\n        must:\n        element.has_economizer == True or element.has_exception_condition\n        element.economizer_integration == \"integrated\"\n        element.economizer_high_limit_type in [\"differential_enthalpy\", \"fixed_enthalpy\"]\n        reference: \"FL.EnergyCode.2023.C403.5\"\n    must:\n        element.has_economizer == True or element.has_exception_condition\n        element.economizer_integration == \"integrated\"\n        element.economizer_high_limit_type in [\"differential_enthalpy\", \"fixed_enthalpy\"]\n        reference: \"FL.EnergyCode.2023.C403.5\"\n    reference: \"FL.EnergyCode.2023.C403.5\"", "rule_name": "economizer_requirements"}
{"type": "bcl_to_physics", "input": "rule economizer_requirements with constraints: cooling_capacity", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.5", "rule_name": "economizer_requirements"}
{"type": "bcl_completion", "input": "rule economizer_requirements:\n    where:\n        element.type == \"cooling_system\"\n    # Complete this rule", "output": "rule economizer_requirements:\n    where:\n        element.type == \"cooling_system\"\n        element.cooling_capacity >= 54000.btu_per_hr\n        element.climate_zone in [\"1A\", \"2A\"]\n        must:\n        element.has_economizer == True or element.has_exception_condition\n        element.economizer_integration == \"integrated\"\n        element.economizer_high_limit_type in [\"differential_enthalpy\", \"fixed_enthalpy\"]\n        reference: \"FL.EnergyCode.2023.C403.5\"\n    must:\n        element.has_economizer == True or element.has_exception_condition\n        element.economizer_integration == \"integrated\"\n        element.economizer_high_limit_type in [\"differential_enthalpy\", \"fixed_enthalpy\"]\n        reference: \"FL.EnergyCode.2023.C403.5\"\n    reference: \"FL.EnergyCode.2023.C403.5\"", "rule_name": "economizer_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for fan power limitation: When element.type == \"fan_system\" and element.motor_hp >= 1.0, it is required that element.fan_power <= flow.allowable_fan_power( and element.system_type,", "output": "rule fan_power_limitation:\n    where:\n        element.type == \"fan_system\"\n        element.motor_hp >= 1.0\n        must:\n        element.fan_power <= flow.allowable_fan_power(\n        element.system_type,\n        element.design_airflow\n        )\n        if element.motor_hp >= 5.0:\n        element.has_variable_speed_drive == True\n        reference: \"FL.EnergyCode.2023.C403.2.12\"\n    must:\n        element.fan_power <= flow.allowable_fan_power(\n        element.system_type,\n        element.design_airflow\n        )\n        if element.motor_hp >= 5.0:\n        element.has_variable_speed_drive == True\n        reference: \"FL.EnergyCode.2023.C403.2.12\"\n    reference: \"FL.EnergyCode.2023.C403.2.12\"", "rule_name": "fan_power_limitation"}
{"type": "bcl_to_physics", "input": "rule fan_power_limitation with constraints: motor_hp, motor_hp", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.EnergyCode.2023.C403.2.12", "rule_name": "fan_power_limitation"}
{"type": "bcl_completion", "input": "rule fan_power_limitation:\n    where:\n        element.type == \"fan_system\"\n    # Complete this rule", "output": "rule fan_power_limitation:\n    where:\n        element.type == \"fan_system\"\n        element.motor_hp >= 1.0\n        must:\n        element.fan_power <= flow.allowable_fan_power(\n        element.system_type,\n        element.design_airflow\n        )\n        if element.motor_hp >= 5.0:\n        element.has_variable_speed_drive == True\n        reference: \"FL.EnergyCode.2023.C403.2.12\"\n    must:\n        element.fan_power <= flow.allowable_fan_power(\n        element.system_type,\n        element.design_airflow\n        )\n        if element.motor_hp >= 5.0:\n        element.has_variable_speed_drive == True\n        reference: \"FL.EnergyCode.2023.C403.2.12\"\n    reference: \"FL.EnergyCode.2023.C403.2.12\"", "rule_name": "fan_power_limitation"}
{"type": "legal_to_bcl", "input": "Requirement for water heating efficiency: When element.type == \"water_heater\" and element.serves == \"commercial_building\", it is required that if element.fuel_type == \"electric\" and element.capacity <= 12.kw: and element.energy_factor >= 0.93 - (0.00132 * element.volume_gallons)", "output": "rule water_heating_efficiency:\n    where:\n        element.type == \"water_heater\"\n        element.serves == \"commercial_building\"\n        must:\n        if element.fuel_type == \"electric\" and element.capacity <= 12.kw:\n        element.energy_factor >= 0.93 - (0.00132 * element.volume_gallons)\n        elif element.fuel_type == \"gas\" and element.capacity <= 75000.btu_per_hr:\n        element.energy_factor >= 0.64 - (0.0019 * element.volume_gallons)\n        if element.type == \"heat_pump_water_heater\":\n        element.cop >= 2.0\n        reference: \"FL.EnergyCode.2023.C404.2\"\n    must:\n        if element.fuel_type == \"electric\" and element.capacity <= 12.kw:\n        element.energy_factor >= 0.93 - (0.00132 * element.volume_gallons)\n        elif element.fuel_type == \"gas\" and element.capacity <= 75000.btu_per_hr:\n        element.energy_factor >= 0.64 - (0.0019 * element.volume_gallons)\n        if element.type == \"heat_pump_water_heater\":\n        element.cop >= 2.0\n        reference: \"FL.EnergyCode.2023.C404.2\"\n    reference: \"FL.EnergyCode.2023.C404.2\"", "rule_name": "water_heating_efficiency"}
{"type": "bcl_to_physics", "input": "rule water_heating_efficiency with constraints: capacity, energy_factor", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C404.2", "rule_name": "water_heating_efficiency"}
{"type": "bcl_completion", "input": "rule water_heating_efficiency:\n    where:\n        element.type == \"water_heater\"\n    # Complete this rule", "output": "rule water_heating_efficiency:\n    where:\n        element.type == \"water_heater\"\n        element.serves == \"commercial_building\"\n        must:\n        if element.fuel_type == \"electric\" and element.capacity <= 12.kw:\n        element.energy_factor >= 0.93 - (0.00132 * element.volume_gallons)\n        elif element.fuel_type == \"gas\" and element.capacity <= 75000.btu_per_hr:\n        element.energy_factor >= 0.64 - (0.0019 * element.volume_gallons)\n        if element.type == \"heat_pump_water_heater\":\n        element.cop >= 2.0\n        reference: \"FL.EnergyCode.2023.C404.2\"\n    must:\n        if element.fuel_type == \"electric\" and element.capacity <= 12.kw:\n        element.energy_factor >= 0.93 - (0.00132 * element.volume_gallons)\n        elif element.fuel_type == \"gas\" and element.capacity <= 75000.btu_per_hr:\n        element.energy_factor >= 0.64 - (0.0019 * element.volume_gallons)\n        if element.type == \"heat_pump_water_heater\":\n        element.cop >= 2.0\n        reference: \"FL.EnergyCode.2023.C404.2\"\n    reference: \"FL.EnergyCode.2023.C404.2\"", "rule_name": "water_heating_efficiency"}
{"type": "legal_to_bcl", "input": "Requirement for hot water pipe insulation: When element.type == \"hot_water_pipe\" and element.fluid_temp >= 105.degrees_f, it is required that if element.pipe_size <= 1.inch: and element.insulation_thickness >= 1.0.inch", "output": "rule hot_water_pipe_insulation:\n    where:\n        element.type == \"hot_water_pipe\"\n        element.fluid_temp >= 105.degrees_f\n        must:\n        if element.pipe_size <= 1.inch:\n        element.insulation_thickness >= 1.0.inch\n        elif element.pipe_size <= 2.inches:\n        element.insulation_thickness >= 1.5.inches\n        else:\n        element.insulation_thickness >= 2.0.inches\n        reference: \"FL.EnergyCode.2023.Table_C403.10.3\"\n    must:\n        if element.pipe_size <= 1.inch:\n        element.insulation_thickness >= 1.0.inch\n        elif element.pipe_size <= 2.inches:\n        element.insulation_thickness >= 1.5.inches\n        else:\n        element.insulation_thickness >= 2.0.inches\n        reference: \"FL.EnergyCode.2023.Table_C403.10.3\"\n    reference: \"FL.EnergyCode.2023.Table_C403.10.3\"", "rule_name": "hot_water_pipe_insulation"}
{"type": "bcl_to_physics", "input": "rule hot_water_pipe_insulation with constraints: fluid_temp, pipe_size", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.Table_C403.10.3", "rule_name": "hot_water_pipe_insulation"}
{"type": "bcl_completion", "input": "rule hot_water_pipe_insulation:\n    where:\n        element.type == \"hot_water_pipe\"\n    # Complete this rule", "output": "rule hot_water_pipe_insulation:\n    where:\n        element.type == \"hot_water_pipe\"\n        element.fluid_temp >= 105.degrees_f\n        must:\n        if element.pipe_size <= 1.inch:\n        element.insulation_thickness >= 1.0.inch\n        elif element.pipe_size <= 2.inches:\n        element.insulation_thickness >= 1.5.inches\n        else:\n        element.insulation_thickness >= 2.0.inches\n        reference: \"FL.EnergyCode.2023.Table_C403.10.3\"\n    must:\n        if element.pipe_size <= 1.inch:\n        element.insulation_thickness >= 1.0.inch\n        elif element.pipe_size <= 2.inches:\n        element.insulation_thickness >= 1.5.inches\n        else:\n        element.insulation_thickness >= 2.0.inches\n        reference: \"FL.EnergyCode.2023.Table_C403.10.3\"\n    reference: \"FL.EnergyCode.2023.Table_C403.10.3\"", "rule_name": "hot_water_pipe_insulation"}
{"type": "legal_to_bcl", "input": "Requirement for interior lighting power: When element.type == \"interior_lighting\" and element.building_type == \"commercial\", it is required that element.lpd <= electrical.lighting_power_allowance( and element.building_type,", "output": "rule interior_lighting_power:\n    where:\n        element.type == \"interior_lighting\"\n        element.building_type == \"commercial\"\n        must:\n        element.lpd <= electrical.lighting_power_allowance(\n        element.building_type,\n        element.calculation_method  # Building area or space-by-space\n        )\n        element.has_occupancy_sensors == True\n        element.has_daylight_harvesting == True  # Where applicable\n        reference: \"FL.EnergyCode.2023.C405.2\"\n    must:\n        element.lpd <= electrical.lighting_power_allowance(\n        element.building_type,\n        element.calculation_method  # Building area or space-by-space\n        )\n        element.has_occupancy_sensors == True\n        element.has_daylight_harvesting == True  # Where applicable\n        reference: \"FL.EnergyCode.2023.C405.2\"\n    reference: \"FL.EnergyCode.2023.C405.2\"", "rule_name": "interior_lighting_power"}
{"type": "bcl_to_physics", "input": "rule interior_lighting_power with conditions: element.lpd <= electrical.lighting_power_allowance(, element.building_type,", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C405.2", "rule_name": "interior_lighting_power"}
{"type": "bcl_completion", "input": "rule interior_lighting_power:\n    where:\n        element.type == \"interior_lighting\"\n    # Complete this rule", "output": "rule interior_lighting_power:\n    where:\n        element.type == \"interior_lighting\"\n        element.building_type == \"commercial\"\n        must:\n        element.lpd <= electrical.lighting_power_allowance(\n        element.building_type,\n        element.calculation_method  # Building area or space-by-space\n        )\n        element.has_occupancy_sensors == True\n        element.has_daylight_harvesting == True  # Where applicable\n        reference: \"FL.EnergyCode.2023.C405.2\"\n    must:\n        element.lpd <= electrical.lighting_power_allowance(\n        element.building_type,\n        element.calculation_method  # Building area or space-by-space\n        )\n        element.has_occupancy_sensors == True\n        element.has_daylight_harvesting == True  # Where applicable\n        reference: \"FL.EnergyCode.2023.C405.2\"\n    reference: \"FL.EnergyCode.2023.C405.2\"", "rule_name": "interior_lighting_power"}
{"type": "legal_to_bcl", "input": "Requirement for exterior lighting power: When element.type == \"exterior_lighting\" and must:, it is required that element.power <= electrical.exterior_lighting_allowance( and element.application_type,", "output": "rule exterior_lighting_power:\n    where:\n        element.type == \"exterior_lighting\"\n        must:\n        element.power <= electrical.exterior_lighting_allowance(\n        element.application_type,\n        element.illuminated_area\n        )\n        element.has_photocell_control == True\n        element.has_time_switch_control == True\n        reference: \"FL.EnergyCode.2023.C405.4\"\n    must:\n        element.power <= electrical.exterior_lighting_allowance(\n        element.application_type,\n        element.illuminated_area\n        )\n        element.has_photocell_control == True\n        element.has_time_switch_control == True\n        reference: \"FL.EnergyCode.2023.C405.4\"\n    reference: \"FL.EnergyCode.2023.C405.4\"", "rule_name": "exterior_lighting_power"}
{"type": "bcl_to_physics", "input": "rule exterior_lighting_power with conditions: element.power <= electrical.exterior_lighting_allowance(, element.application_type,", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C405.4", "rule_name": "exterior_lighting_power"}
{"type": "bcl_completion", "input": "rule exterior_lighting_power:\n    where:\n        element.type == \"exterior_lighting\"\n    # Complete this rule", "output": "rule exterior_lighting_power:\n    where:\n        element.type == \"exterior_lighting\"\n        must:\n        element.power <= electrical.exterior_lighting_allowance(\n        element.application_type,\n        element.illuminated_area\n        )\n        element.has_photocell_control == True\n        element.has_time_switch_control == True\n        reference: \"FL.EnergyCode.2023.C405.4\"\n    must:\n        element.power <= electrical.exterior_lighting_allowance(\n        element.application_type,\n        element.illuminated_area\n        )\n        element.has_photocell_control == True\n        element.has_time_switch_control == True\n        reference: \"FL.EnergyCode.2023.C405.4\"\n    reference: \"FL.EnergyCode.2023.C405.4\"", "rule_name": "exterior_lighting_power"}
{"type": "legal_to_bcl", "input": "Requirement for solar readiness: When element.type == \"commercial_building\" and element.gross_floor_area >= 10000.sq_ft, it is required that element.has_solar_ready_zone == True and element.solar_zone_area >= max(", "output": "rule solar_readiness:\n    where:\n        element.type == \"commercial_building\"\n        element.gross_floor_area >= 10000.sq_ft\n        element.building_height <= 3.stories\n        must:\n        element.has_solar_ready_zone == True\n        element.solar_zone_area >= max(\n        300.sq_ft,\n        0.40 * (element.roof_area - element.equipment_area)\n        )\n        element.has_electrical_conduit_to_solar_zone == True\n        element.has_space_for_inverter == True\n        reference: \"FL.EnergyCode.2023.C405.12\"\n        constraint envelope_thermal_performance:\n        where:\n        element.type == \"building_envelope\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        thermal.envelope_ua(element) <= thermal.prescriptive_ua(element)\n        element.air_leakage_rate <= 0.40.cfm_per_sq_ft  # At 75 Pa\n        safety_factor: 1.0\n        constraint cooling_load_optimization:\n        where:\n        element.type == \"commercial_building\"\n        element.location == \"florida\"\n        require:\n        thermal.peak_cooling_load(element) <= thermal.design_cooling_capacity * 1.15\n        solar.window_heat_gain(element) <= 0.25 * solar.incident_radiation(element)\n        safety_factor: 1.15\n        constraint dehumidification_efficiency:\n        where:\n        element.type == \"hvac_system\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        psychrometrics.moisture_removal_rate(element) >=\n        psychrometrics.latent_load(element) * 1.1\n        if element.has_reheat:\n        element.reheat_energy <= 0.30 * element.cooling_energy\n        safety_factor: 1.1\n        constraint demand_response_capability:\n        where:\n        element.type == \"hvac_system\"\n        element.peak_demand >= 200.kw\n        require:\n        element.can_shed_load >= 0.10 * element.peak_cooling_load\n        element.response_time <= 10.minutes\n        thermal.space_temp_rise_during_dr(element) <= 4.degrees_f\n        safety_factor: 1.0\n        constraint renewable_energy_integration:\n        where:\n        element.type == \"solar_pv_system\"\n        element.building_type == \"commercial\"\n        require:\n        electrical.pv_capacity(element) >= 1.0.watts_per_sq_ft * element.solar_zone_area\n        solar.shading_loss(element) <= 0.20  # 20% maximum\n        structural.wind_rating(element) >= 150.mph\n        safety_factor: 1.2\n        constraint commissioning_verification:\n        where:\n        element.type in [\"hvac_system\", \"lighting_system\", \"building_envelope\"]\n        element.building_area >= 10000.sq_ft\n        require:\n        abs(element.measured_performance - element.design_performance) /\n        element.design_performance <= 0.10  # 10% tolerance\n        element.measured_eui <= element.target_eui * 1.05\n    must:\n        element.has_solar_ready_zone == True\n        element.solar_zone_area >= max(\n        300.sq_ft,\n        0.40 * (element.roof_area - element.equipment_area)\n        )\n        element.has_electrical_conduit_to_solar_zone == True\n        element.has_space_for_inverter == True\n        reference: \"FL.EnergyCode.2023.C405.12\"\n        constraint envelope_thermal_performance:\n        where:\n        element.type == \"building_envelope\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        thermal.envelope_ua(element) <= thermal.prescriptive_ua(element)\n        element.air_leakage_rate <= 0.40.cfm_per_sq_ft  # At 75 Pa\n        safety_factor: 1.0\n        constraint cooling_load_optimization:\n        where:\n        element.type == \"commercial_building\"\n        element.location == \"florida\"\n        require:\n        thermal.peak_cooling_load(element) <= thermal.design_cooling_capacity * 1.15\n        solar.window_heat_gain(element) <= 0.25 * solar.incident_radiation(element)\n        safety_factor: 1.15\n        constraint dehumidification_efficiency:\n        where:\n        element.type == \"hvac_system\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        psychrometrics.moisture_removal_rate(element) >=\n        psychrometrics.latent_load(element) * 1.1\n        if element.has_reheat:\n        element.reheat_energy <= 0.30 * element.cooling_energy\n        safety_factor: 1.1\n        constraint demand_response_capability:\n        where:\n        element.type == \"hvac_system\"\n        element.peak_demand >= 200.kw\n        require:\n        element.can_shed_load >= 0.10 * element.peak_cooling_load\n        element.response_time <= 10.minutes\n        thermal.space_temp_rise_during_dr(element) <= 4.degrees_f\n        safety_factor: 1.0\n        constraint renewable_energy_integration:\n        where:\n        element.type == \"solar_pv_system\"\n        element.building_type == \"commercial\"\n        require:\n        electrical.pv_capacity(element) >= 1.0.watts_per_sq_ft * element.solar_zone_area\n        solar.shading_loss(element) <= 0.20  # 20% maximum\n        structural.wind_rating(element) >= 150.mph\n        safety_factor: 1.2\n        constraint commissioning_verification:\n        where:\n        element.type in [\"hvac_system\", \"lighting_system\", \"building_envelope\"]\n        element.building_area >= 10000.sq_ft\n        require:\n        abs(element.measured_performance - element.design_performance) /\n        element.design_performance <= 0.10  # 10% tolerance\n        element.measured_eui <= element.target_eui * 1.05\n    safety_factor: 1.0\n    reference: \"FL.EnergyCode.2023.C405.12\"", "rule_name": "solar_readiness"}
{"type": "bcl_to_physics", "input": "rule solar_readiness with constraints: gross_floor_area, building_height", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Reference: FL.EnergyCode.2023.C405.12", "rule_name": "solar_readiness"}
{"type": "bcl_completion", "input": "rule solar_readiness:\n    where:\n        element.type == \"commercial_building\"\n    # Complete this rule", "output": "rule solar_readiness:\n    where:\n        element.type == \"commercial_building\"\n        element.gross_floor_area >= 10000.sq_ft\n        element.building_height <= 3.stories\n        must:\n        element.has_solar_ready_zone == True\n        element.solar_zone_area >= max(\n        300.sq_ft,\n        0.40 * (element.roof_area - element.equipment_area)\n        )\n        element.has_electrical_conduit_to_solar_zone == True\n        element.has_space_for_inverter == True\n        reference: \"FL.EnergyCode.2023.C405.12\"\n        constraint envelope_thermal_performance:\n        where:\n        element.type == \"building_envelope\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        thermal.envelope_ua(element) <= thermal.prescriptive_ua(element)\n        element.air_leakage_rate <= 0.40.cfm_per_sq_ft  # At 75 Pa\n        safety_factor: 1.0\n        constraint cooling_load_optimization:\n        where:\n        element.type == \"commercial_building\"\n        element.location == \"florida\"\n        require:\n        thermal.peak_cooling_load(element) <= thermal.design_cooling_capacity * 1.15\n        solar.window_heat_gain(element) <= 0.25 * solar.incident_radiation(element)\n        safety_factor: 1.15\n        constraint dehumidification_efficiency:\n        where:\n        element.type == \"hvac_system\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        psychrometrics.moisture_removal_rate(element) >=\n        psychrometrics.latent_load(element) * 1.1\n        if element.has_reheat:\n        element.reheat_energy <= 0.30 * element.cooling_energy\n        safety_factor: 1.1\n        constraint demand_response_capability:\n        where:\n        element.type == \"hvac_system\"\n        element.peak_demand >= 200.kw\n        require:\n        element.can_shed_load >= 0.10 * element.peak_cooling_load\n        element.response_time <= 10.minutes\n        thermal.space_temp_rise_during_dr(element) <= 4.degrees_f\n        safety_factor: 1.0\n        constraint renewable_energy_integration:\n        where:\n        element.type == \"solar_pv_system\"\n        element.building_type == \"commercial\"\n        require:\n        electrical.pv_capacity(element) >= 1.0.watts_per_sq_ft * element.solar_zone_area\n        solar.shading_loss(element) <= 0.20  # 20% maximum\n        structural.wind_rating(element) >= 150.mph\n        safety_factor: 1.2\n        constraint commissioning_verification:\n        where:\n        element.type in [\"hvac_system\", \"lighting_system\", \"building_envelope\"]\n        element.building_area >= 10000.sq_ft\n        require:\n        abs(element.measured_performance - element.design_performance) /\n        element.design_performance <= 0.10  # 10% tolerance\n        element.measured_eui <= element.target_eui * 1.05\n    must:\n        element.has_solar_ready_zone == True\n        element.solar_zone_area >= max(\n        300.sq_ft,\n        0.40 * (element.roof_area - element.equipment_area)\n        )\n        element.has_electrical_conduit_to_solar_zone == True\n        element.has_space_for_inverter == True\n        reference: \"FL.EnergyCode.2023.C405.12\"\n        constraint envelope_thermal_performance:\n        where:\n        element.type == \"building_envelope\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        thermal.envelope_ua(element) <= thermal.prescriptive_ua(element)\n        element.air_leakage_rate <= 0.40.cfm_per_sq_ft  # At 75 Pa\n        safety_factor: 1.0\n        constraint cooling_load_optimization:\n        where:\n        element.type == \"commercial_building\"\n        element.location == \"florida\"\n        require:\n        thermal.peak_cooling_load(element) <= thermal.design_cooling_capacity * 1.15\n        solar.window_heat_gain(element) <= 0.25 * solar.incident_radiation(element)\n        safety_factor: 1.15\n        constraint dehumidification_efficiency:\n        where:\n        element.type == \"hvac_system\"\n        element.climate_zone in [\"1A\", \"2A\"]\n        require:\n        psychrometrics.moisture_removal_rate(element) >=\n        psychrometrics.latent_load(element) * 1.1\n        if element.has_reheat:\n        element.reheat_energy <= 0.30 * element.cooling_energy\n        safety_factor: 1.1\n        constraint demand_response_capability:\n        where:\n        element.type == \"hvac_system\"\n        element.peak_demand >= 200.kw\n        require:\n        element.can_shed_load >= 0.10 * element.peak_cooling_load\n        element.response_time <= 10.minutes\n        thermal.space_temp_rise_during_dr(element) <= 4.degrees_f\n        safety_factor: 1.0\n        constraint renewable_energy_integration:\n        where:\n        element.type == \"solar_pv_system\"\n        element.building_type == \"commercial\"\n        require:\n        electrical.pv_capacity(element) >= 1.0.watts_per_sq_ft * element.solar_zone_area\n        solar.shading_loss(element) <= 0.20  # 20% maximum\n        structural.wind_rating(element) >= 150.mph\n        safety_factor: 1.2\n        constraint commissioning_verification:\n        where:\n        element.type in [\"hvac_system\", \"lighting_system\", \"building_envelope\"]\n        element.building_area >= 10000.sq_ft\n        require:\n        abs(element.measured_performance - element.design_performance) /\n        element.design_performance <= 0.10  # 10% tolerance\n        element.measured_eui <= element.target_eui * 1.05\n    safety_factor: 1.0\n    reference: \"FL.EnergyCode.2023.C405.12\"", "rule_name": "solar_readiness"}
{"type": "safety_factor_reasoning", "input": "For solar_readiness rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.EnergyCode.2023.C405.12.", "rule_name": "solar_readiness", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for commercial hvac scope: When element.type == \"hvac_system\" and element.building_type == \"commercial\", it is required that element.designed_for_energy_efficiency == True and element.complies_with_energy_code == True", "output": "rule commercial_hvac_scope:\n    where:\n        element.type == \"hvac_system\"\n        element.building_type == \"commercial\"\n        must:\n        element.designed_for_energy_efficiency == True\n        element.complies_with_energy_code == True\n        element.equipment_listed_and_labeled == True\n        reference: \"FL.Mechanical.2023.301.1\"\n    must:\n        element.designed_for_energy_efficiency == True\n        element.complies_with_energy_code == True\n        element.equipment_listed_and_labeled == True\n        reference: \"FL.Mechanical.2023.301.1\"\n    reference: \"FL.Mechanical.2023.301.1\"", "rule_name": "commercial_hvac_scope"}
{"type": "bcl_to_physics", "input": "rule commercial_hvac_scope with conditions: element.designed_for_energy_efficiency == True, element.complies_with_energy_code == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.301.1", "rule_name": "commercial_hvac_scope"}
{"type": "bcl_completion", "input": "rule commercial_hvac_scope:\n    where:\n        element.type == \"hvac_system\"\n    # Complete this rule", "output": "rule commercial_hvac_scope:\n    where:\n        element.type == \"hvac_system\"\n        element.building_type == \"commercial\"\n        must:\n        element.designed_for_energy_efficiency == True\n        element.complies_with_energy_code == True\n        element.equipment_listed_and_labeled == True\n        reference: \"FL.Mechanical.2023.301.1\"\n    must:\n        element.designed_for_energy_efficiency == True\n        element.complies_with_energy_code == True\n        element.equipment_listed_and_labeled == True\n        reference: \"FL.Mechanical.2023.301.1\"\n    reference: \"FL.Mechanical.2023.301.1\"", "rule_name": "commercial_hvac_scope"}
{"type": "legal_to_bcl", "input": "Requirement for mechanical equipment wind resistance: When element.type == \"mechanical_equipment\" and element.location == \"exposed_to_wind\", it is required that element.wind_resistance_designed == True and element.wind_load_capacity >= element.design_wind_pressure", "output": "rule mechanical_equipment_wind_resistance:\n    where:\n        element.type == \"mechanical_equipment\"\n        element.location == \"exposed_to_wind\"\n        must:\n        element.wind_resistance_designed == True\n        element.wind_load_capacity >= element.design_wind_pressure\n        element.complies_with_building_code_wind == True\n        safety_factor: 1.6\n        reference: \"FL.Mechanical.2023.301.15\"\n    must:\n        element.wind_resistance_designed == True\n        element.wind_load_capacity >= element.design_wind_pressure\n        element.complies_with_building_code_wind == True\n        safety_factor: 1.6\n        reference: \"FL.Mechanical.2023.301.15\"\n    safety_factor: 1.6\n    reference: \"FL.Mechanical.2023.301.15\"", "rule_name": "mechanical_equipment_wind_resistance"}
{"type": "bcl_to_physics", "input": "rule mechanical_equipment_wind_resistance with conditions: element.wind_resistance_designed == True, element.wind_load_capacity >= element.design_wind_pressure", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.6 is applied to account for uncertainties. Reference: FL.Mechanical.2023.301.15", "rule_name": "mechanical_equipment_wind_resistance"}
{"type": "bcl_completion", "input": "rule mechanical_equipment_wind_resistance:\n    where:\n        element.type == \"mechanical_equipment\"\n    # Complete this rule", "output": "rule mechanical_equipment_wind_resistance:\n    where:\n        element.type == \"mechanical_equipment\"\n        element.location == \"exposed_to_wind\"\n        must:\n        element.wind_resistance_designed == True\n        element.wind_load_capacity >= element.design_wind_pressure\n        element.complies_with_building_code_wind == True\n        safety_factor: 1.6\n        reference: \"FL.Mechanical.2023.301.15\"\n    must:\n        element.wind_resistance_designed == True\n        element.wind_load_capacity >= element.design_wind_pressure\n        element.complies_with_building_code_wind == True\n        safety_factor: 1.6\n        reference: \"FL.Mechanical.2023.301.15\"\n    safety_factor: 1.6\n    reference: \"FL.Mechanical.2023.301.15\"", "rule_name": "mechanical_equipment_wind_resistance"}
{"type": "safety_factor_reasoning", "input": "For mechanical_equipment_wind_resistance rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.6 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Mechanical.2023.301.15.", "rule_name": "mechanical_equipment_wind_resistance", "safety_factor": 1.6}
{"type": "legal_to_bcl", "input": "Requirement for equipment access requirements: When element.type in [\"hvac_equipment\", \"mechanical_equipment\"] and must:, it is required that element.has_service_access == True and element.access_opening_size >= max(", "output": "rule equipment_access_requirements:\n    where:\n        element.type in [\"hvac_equipment\", \"mechanical_equipment\"]\n        must:\n        element.has_service_access == True\n        element.access_opening_size >= max(\n        element.largest_component_size,\n        [30.inches, 30.inches]  # Minimum opening\n        )\n        element.working_space_depth >= 30.inches\n        element.working_space_width >= element.equipment_width + 6.inches\n        reference: \"FL.Mechanical.2023.306\"\n    must:\n        element.has_service_access == True\n        element.access_opening_size >= max(\n        element.largest_component_size,\n        [30.inches, 30.inches]  # Minimum opening\n        )\n        element.working_space_depth >= 30.inches\n        element.working_space_width >= element.equipment_width + 6.inches\n        reference: \"FL.Mechanical.2023.306\"\n    reference: \"FL.Mechanical.2023.306\"", "rule_name": "equipment_access_requirements"}
{"type": "bcl_to_physics", "input": "rule equipment_access_requirements with constraints: working_space_depth", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.306", "rule_name": "equipment_access_requirements"}
{"type": "bcl_completion", "input": "rule equipment_access_requirements:\n    where:\n        element.type in [\"hvac_equipment\", \"mechanical_equipment\"]\n    # Complete this rule", "output": "rule equipment_access_requirements:\n    where:\n        element.type in [\"hvac_equipment\", \"mechanical_equipment\"]\n        must:\n        element.has_service_access == True\n        element.access_opening_size >= max(\n        element.largest_component_size,\n        [30.inches, 30.inches]  # Minimum opening\n        )\n        element.working_space_depth >= 30.inches\n        element.working_space_width >= element.equipment_width + 6.inches\n        reference: \"FL.Mechanical.2023.306\"\n    must:\n        element.has_service_access == True\n        element.access_opening_size >= max(\n        element.largest_component_size,\n        [30.inches, 30.inches]  # Minimum opening\n        )\n        element.working_space_depth >= 30.inches\n        element.working_space_width >= element.equipment_width + 6.inches\n        reference: \"FL.Mechanical.2023.306\"\n    reference: \"FL.Mechanical.2023.306\"", "rule_name": "equipment_access_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for equipment clearances: When element.type == \"mechanical_equipment\" and must:, it is required that element.clearances >= element.manufacturer_required_clearances and if element.requires_combustion_air:", "output": "rule equipment_clearances:\n    where:\n        element.type == \"mechanical_equipment\"\n        must:\n        element.clearances >= element.manufacturer_required_clearances\n        if element.requires_combustion_air:\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Mechanical.2023.303\"\n    must:\n        element.clearances >= element.manufacturer_required_clearances\n        if element.requires_combustion_air:\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Mechanical.2023.303\"\n    reference: \"FL.Mechanical.2023.303\"", "rule_name": "equipment_clearances"}
{"type": "bcl_to_physics", "input": "rule equipment_clearances with constraints: combustion_air_opening_clearance", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.303", "rule_name": "equipment_clearances"}
{"type": "bcl_completion", "input": "rule equipment_clearances:\n    where:\n        element.type == \"mechanical_equipment\"\n    # Complete this rule", "output": "rule equipment_clearances:\n    where:\n        element.type == \"mechanical_equipment\"\n        must:\n        element.clearances >= element.manufacturer_required_clearances\n        if element.requires_combustion_air:\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Mechanical.2023.303\"\n    must:\n        element.clearances >= element.manufacturer_required_clearances\n        if element.requires_combustion_air:\n        element.combustion_air_opening_clearance >= 6.inches\n        reference: \"FL.Mechanical.2023.303\"\n    reference: \"FL.Mechanical.2023.303\"", "rule_name": "equipment_clearances"}
{"type": "legal_to_bcl", "input": "Requirement for seismic restraints: When element.type == \"mechanical_equipment\" and element.weight > 400.pounds, it is required that element.has_seismic_restraints == True and element.restraints_designed_per_building_code == True", "output": "rule seismic_restraints:\n    where:\n        element.type == \"mechanical_equipment\"\n        element.weight > 400.pounds\n        must:\n        element.has_seismic_restraints == True\n        element.restraints_designed_per_building_code == True\n        reference: \"FL.Mechanical.2023.301.16\"\n    must:\n        element.has_seismic_restraints == True\n        element.restraints_designed_per_building_code == True\n        reference: \"FL.Mechanical.2023.301.16\"\n    reference: \"FL.Mechanical.2023.301.16\"", "rule_name": "seismic_restraints"}
{"type": "bcl_to_physics", "input": "rule seismic_restraints with constraints: weight", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.301.16", "rule_name": "seismic_restraints"}
{"type": "bcl_completion", "input": "rule seismic_restraints:\n    where:\n        element.type == \"mechanical_equipment\"\n    # Complete this rule", "output": "rule seismic_restraints:\n    where:\n        element.type == \"mechanical_equipment\"\n        element.weight > 400.pounds\n        must:\n        element.has_seismic_restraints == True\n        element.restraints_designed_per_building_code == True\n        reference: \"FL.Mechanical.2023.301.16\"\n    must:\n        element.has_seismic_restraints == True\n        element.restraints_designed_per_building_code == True\n        reference: \"FL.Mechanical.2023.301.16\"\n    reference: \"FL.Mechanical.2023.301.16\"", "rule_name": "seismic_restraints"}
{"type": "legal_to_bcl", "input": "Requirement for piping protection: When element.type in [\"refrigerant_piping\", \"hydronic_piping\"] and must:, it is required that element.protected_from_damage == True and if element.material_requires_protection:", "output": "rule piping_protection:\n    where:\n        element.type in [\"refrigerant_piping\", \"hydronic_piping\"]\n        must:\n        element.protected_from_damage == True\n        if element.material_requires_protection:\n        element.has_corrosion_protection == True\n        element.insulated_per_energy_code == True\n        reference: \"FL.Mechanical.2023.303.9\"\n    must:\n        element.protected_from_damage == True\n        if element.material_requires_protection:\n        element.has_corrosion_protection == True\n        element.insulated_per_energy_code == True\n        reference: \"FL.Mechanical.2023.303.9\"\n    reference: \"FL.Mechanical.2023.303.9\"", "rule_name": "piping_protection"}
{"type": "bcl_to_physics", "input": "rule piping_protection with conditions: element.protected_from_damage == True, if element.material_requires_protection:", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.303.9", "rule_name": "piping_protection"}
{"type": "bcl_completion", "input": "rule piping_protection:\n    where:\n        element.type in [\"refrigerant_piping\", \"hydronic_piping\"]\n    # Complete this rule", "output": "rule piping_protection:\n    where:\n        element.type in [\"refrigerant_piping\", \"hydronic_piping\"]\n        must:\n        element.protected_from_damage == True\n        if element.material_requires_protection:\n        element.has_corrosion_protection == True\n        element.insulated_per_energy_code == True\n        reference: \"FL.Mechanical.2023.303.9\"\n    must:\n        element.protected_from_damage == True\n        if element.material_requires_protection:\n        element.has_corrosion_protection == True\n        element.insulated_per_energy_code == True\n        reference: \"FL.Mechanical.2023.303.9\"\n    reference: \"FL.Mechanical.2023.303.9\"", "rule_name": "piping_protection"}
{"type": "legal_to_bcl", "input": "Requirement for condensate drainage: When element.type == \"cooling_equipment\" and element.produces_condensate == True, it is required that element.has_condensate_drain == True and element.drain_slope >= 0.125.inches_per_foot", "output": "rule condensate_drainage:\n    where:\n        element.type == \"cooling_equipment\"\n        element.produces_condensate == True\n        must:\n        element.has_condensate_drain == True\n        element.drain_slope >= 0.125.inches_per_foot\n        element.drain_connects_directly_to_plumbing == False\n        element.discharge_location in [\"floor_sink\", \"floor_drain\", \"trench_drain\",\n        \"mop_sink\", \"utility_sink\", \"approved_location\"]\n        reference: \"FL.Mechanical.2023.307.2\"\n    must:\n        element.has_condensate_drain == True\n        element.drain_slope >= 0.125.inches_per_foot\n        element.drain_connects_directly_to_plumbing == False\n        element.discharge_location in [\"floor_sink\", \"floor_drain\", \"trench_drain\",\n        \"mop_sink\", \"utility_sink\", \"approved_location\"]\n        reference: \"FL.Mechanical.2023.307.2\"\n    reference: \"FL.Mechanical.2023.307.2\"", "rule_name": "condensate_drainage"}
{"type": "bcl_to_physics", "input": "rule condensate_drainage with constraints: drain_slope", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.307.2", "rule_name": "condensate_drainage"}
{"type": "bcl_completion", "input": "rule condensate_drainage:\n    where:\n        element.type == \"cooling_equipment\"\n    # Complete this rule", "output": "rule condensate_drainage:\n    where:\n        element.type == \"cooling_equipment\"\n        element.produces_condensate == True\n        must:\n        element.has_condensate_drain == True\n        element.drain_slope >= 0.125.inches_per_foot\n        element.drain_connects_directly_to_plumbing == False\n        element.discharge_location in [\"floor_sink\", \"floor_drain\", \"trench_drain\",\n        \"mop_sink\", \"utility_sink\", \"approved_location\"]\n        reference: \"FL.Mechanical.2023.307.2\"\n    must:\n        element.has_condensate_drain == True\n        element.drain_slope >= 0.125.inches_per_foot\n        element.drain_connects_directly_to_plumbing == False\n        element.discharge_location in [\"floor_sink\", \"floor_drain\", \"trench_drain\",\n        \"mop_sink\", \"utility_sink\", \"approved_location\"]\n        reference: \"FL.Mechanical.2023.307.2\"\n    reference: \"FL.Mechanical.2023.307.2\"", "rule_name": "condensate_drainage"}
{"type": "legal_to_bcl", "input": "Requirement for equipment on roofs: When element.type == \"mechanical_equipment\" and element.location == \"roof\", it is required that element.elevation_above_roof >= 6.inches and element.has_hurricane_tie_downs == True", "output": "rule equipment_on_roofs:\n    where:\n        element.type == \"mechanical_equipment\"\n        element.location == \"roof\"\n        must:\n        element.elevation_above_roof >= 6.inches\n        element.has_hurricane_tie_downs == True\n        element.distance_from_roof_edge >= 10.feet or element.has_edge_protection == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    must:\n        element.elevation_above_roof >= 6.inches\n        element.has_hurricane_tie_downs == True\n        element.distance_from_roof_edge >= 10.feet or element.has_edge_protection == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    reference: \"FL.Mechanical.2023.304.11\"", "rule_name": "equipment_on_roofs"}
{"type": "bcl_to_physics", "input": "rule equipment_on_roofs with constraints: elevation_above_roof, distance_from_roof_edge", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.304.11", "rule_name": "equipment_on_roofs"}
{"type": "bcl_completion", "input": "rule equipment_on_roofs:\n    where:\n        element.type == \"mechanical_equipment\"\n    # Complete this rule", "output": "rule equipment_on_roofs:\n    where:\n        element.type == \"mechanical_equipment\"\n        element.location == \"roof\"\n        must:\n        element.elevation_above_roof >= 6.inches\n        element.has_hurricane_tie_downs == True\n        element.distance_from_roof_edge >= 10.feet or element.has_edge_protection == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    must:\n        element.elevation_above_roof >= 6.inches\n        element.has_hurricane_tie_downs == True\n        element.distance_from_roof_edge >= 10.feet or element.has_edge_protection == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    reference: \"FL.Mechanical.2023.304.11\"", "rule_name": "equipment_on_roofs"}
{"type": "legal_to_bcl", "input": "Requirement for refrigerant classification: When element.type == \"refrigeration_system\" and must:, it is required that element.refrigerant_classification in [\"A1\", \"A2L\", \"A2\", \"A3\", \"B1\", \"B2L\", \"B2\", \"B3\"] and element.designed_for_refrigerant_class == True", "output": "rule refrigerant_classification:\n    where:\n        element.type == \"refrigeration_system\"\n        must:\n        element.refrigerant_classification in [\"A1\", \"A2L\", \"A2\", \"A3\", \"B1\", \"B2L\", \"B2\", \"B3\"]\n        element.designed_for_refrigerant_class == True\n        reference: \"FL.Mechanical.2023.1101.6\"\n    must:\n        element.refrigerant_classification in [\"A1\", \"A2L\", \"A2\", \"A3\", \"B1\", \"B2L\", \"B2\", \"B3\"]\n        element.designed_for_refrigerant_class == True\n        reference: \"FL.Mechanical.2023.1101.6\"\n    reference: \"FL.Mechanical.2023.1101.6\"", "rule_name": "refrigerant_classification"}
{"type": "bcl_to_physics", "input": "rule refrigerant_classification with conditions: element.refrigerant_classification in [\"A1\", \"A2L\", \"A2\", \"A3\", \"B1\", \"B2L\", \"B2\", \"B3\"], element.designed_for_refrigerant_class == True", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.1101.6", "rule_name": "refrigerant_classification"}
{"type": "bcl_completion", "input": "rule refrigerant_classification:\n    where:\n        element.type == \"refrigeration_system\"\n    # Complete this rule", "output": "rule refrigerant_classification:\n    where:\n        element.type == \"refrigeration_system\"\n        must:\n        element.refrigerant_classification in [\"A1\", \"A2L\", \"A2\", \"A3\", \"B1\", \"B2L\", \"B2\", \"B3\"]\n        element.designed_for_refrigerant_class == True\n        reference: \"FL.Mechanical.2023.1101.6\"\n    must:\n        element.refrigerant_classification in [\"A1\", \"A2L\", \"A2\", \"A3\", \"B1\", \"B2L\", \"B2\", \"B3\"]\n        element.designed_for_refrigerant_class == True\n        reference: \"FL.Mechanical.2023.1101.6\"\n    reference: \"FL.Mechanical.2023.1101.6\"", "rule_name": "refrigerant_classification"}
{"type": "legal_to_bcl", "input": "Requirement for refrigerant piping design: When element.type == \"refrigerant_piping\" and must:, it is required that if element.carries_oil: and flow.velocity(element) >= flow.minimum_oil_return_velocity(", "output": "rule refrigerant_piping_design:\n    where:\n        element.type == \"refrigerant_piping\"\n        must:\n        if element.carries_oil:\n        flow.velocity(element) >= flow.minimum_oil_return_velocity(\n        element.refrigerant_type,\n        element.pipe_orientation\n        )\n        element.pressure_rating >= element.design_pressure * 2.5\n        safety_factor: 2.5\n        reference: \"FL.Mechanical.2023.1107\"\n    must:\n        if element.carries_oil:\n        flow.velocity(element) >= flow.minimum_oil_return_velocity(\n        element.refrigerant_type,\n        element.pipe_orientation\n        )\n        element.pressure_rating >= element.design_pressure * 2.5\n        safety_factor: 2.5\n        reference: \"FL.Mechanical.2023.1107\"\n    safety_factor: 2.5\n    reference: \"FL.Mechanical.2023.1107\"", "rule_name": "refrigerant_piping_design"}
{"type": "bcl_to_physics", "input": "rule refrigerant_piping_design with constraints: flow.velocity(element)", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.5 is applied to account for uncertainties. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.1107", "rule_name": "refrigerant_piping_design"}
{"type": "bcl_completion", "input": "rule refrigerant_piping_design:\n    where:\n        element.type == \"refrigerant_piping\"\n    # Complete this rule", "output": "rule refrigerant_piping_design:\n    where:\n        element.type == \"refrigerant_piping\"\n        must:\n        if element.carries_oil:\n        flow.velocity(element) >= flow.minimum_oil_return_velocity(\n        element.refrigerant_type,\n        element.pipe_orientation\n        )\n        element.pressure_rating >= element.design_pressure * 2.5\n        safety_factor: 2.5\n        reference: \"FL.Mechanical.2023.1107\"\n    must:\n        if element.carries_oil:\n        flow.velocity(element) >= flow.minimum_oil_return_velocity(\n        element.refrigerant_type,\n        element.pipe_orientation\n        )\n        element.pressure_rating >= element.design_pressure * 2.5\n        safety_factor: 2.5\n        reference: \"FL.Mechanical.2023.1107\"\n    safety_factor: 2.5\n    reference: \"FL.Mechanical.2023.1107\"", "rule_name": "refrigerant_piping_design"}
{"type": "safety_factor_reasoning", "input": "For refrigerant_piping_design rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.5 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Mechanical.2023.1107.", "rule_name": "refrigerant_piping_design", "safety_factor": 2.5}
{"type": "legal_to_bcl", "input": "Requirement for outdoor air requirements: When element.type == \"hvac_system\" and element.serves == \"occupied_space\", it is required that element.outdoor_air_rate >= flow.minimum_outdoor_air( and element.occupancy_category,", "output": "rule outdoor_air_requirements:\n    where:\n        element.type == \"hvac_system\"\n        element.serves == \"occupied_space\"\n        must:\n        element.outdoor_air_rate >= flow.minimum_outdoor_air(\n        element.occupancy_category,\n        element.floor_area,\n        element.occupant_count\n        )\n        if element.outdoor_air_rate > 5000.cfm:\n        element.has_energy_recovery == True\n        reference: \"FL.Mechanical.2023.403\"\n        constraint thermal_comfort_conditions:\n        where:\n        element.type == \"occupied_space\"\n        element.has_hvac_system == True\n        require:\n        element.temperature_range == [70, 78].degrees_f  # Summer/Winter\n        element.relative_humidity <= 60.percent  # Florida humidity control\n        flow.air_velocity(element) <= 50.fpm  # Comfort limit\n        safety_factor: 1.0\n        constraint equipment_efficiency_requirements:\n        where:\n        element.type == \"hvac_equipment\"\n        element.cooling_capacity > 65000.btu_per_hr\n        require:\n        if element.equipment_type == \"packaged_ac\":\n        element.eer >= 11.2  # Energy Efficiency Ratio\n        element.ieer >= 12.9  # Integrated EER\n        elif element.equipment_type == \"chiller\":\n        element.cop >= 5.0  # Coefficient of Performance\n        safety_factor: 1.0\n        constraint duct_pressure_loss:\n        where:\n        element.type == \"duct_system\"\n        element.serves == \"commercial_building\"\n        require:\n        flow.static_pressure_loss(element) <= 0.08.inches_wc_per_100ft\n        element.total_static_pressure <= element.fan_static_capability * 0.9\n        safety_factor: 1.1\n        constraint noise_control:\n        where:\n        element.type == \"mechanical_equipment\"\n        element.location in [\"occupied_area\", \"adjacent_to_occupied\"]\n        require:\n        acoustics.sound_pressure_level(element) <= acoustics.nc_rating(\n        element.space_type\n        )\n        element.vibration_transmission <= 0.2.inches_per_second\n        safety_factor: 1.2\n        constraint refrigerant_charge_limits:\n        where:\n        element.type == \"refrigeration_system\"\n        element.location == \"occupied_space\"\n        require:\n        element.refrigerant_charge / element.room_volume <= safety.refrigerant_concentration_limit(\n        element.refrigerant_classification\n        )\n        safety_factor: 4.0  # High safety factor for refrigerant safety\n        constraint hurricane_resistance:\n        where:\n        element.type == \"rooftop_equipment\"\n        element.location.wind_zone >= \"high_velocity_hurricane_zone\"\n        require:\n        structural.uplift_capacity(element) >= 1.6 * element.design_wind_uplift\n        element.has_missile_impact_protection == True\n    must:\n        element.outdoor_air_rate >= flow.minimum_outdoor_air(\n        element.occupancy_category,\n        element.floor_area,\n        element.occupant_count\n        )\n        if element.outdoor_air_rate > 5000.cfm:\n        element.has_energy_recovery == True\n        reference: \"FL.Mechanical.2023.403\"\n        constraint thermal_comfort_conditions:\n        where:\n        element.type == \"occupied_space\"\n        element.has_hvac_system == True\n        require:\n        element.temperature_range == [70, 78].degrees_f  # Summer/Winter\n        element.relative_humidity <= 60.percent  # Florida humidity control\n        flow.air_velocity(element) <= 50.fpm  # Comfort limit\n        safety_factor: 1.0\n        constraint equipment_efficiency_requirements:\n        where:\n        element.type == \"hvac_equipment\"\n        element.cooling_capacity > 65000.btu_per_hr\n        require:\n        if element.equipment_type == \"packaged_ac\":\n        element.eer >= 11.2  # Energy Efficiency Ratio\n        element.ieer >= 12.9  # Integrated EER\n        elif element.equipment_type == \"chiller\":\n        element.cop >= 5.0  # Coefficient of Performance\n        safety_factor: 1.0\n        constraint duct_pressure_loss:\n        where:\n        element.type == \"duct_system\"\n        element.serves == \"commercial_building\"\n        require:\n        flow.static_pressure_loss(element) <= 0.08.inches_wc_per_100ft\n        element.total_static_pressure <= element.fan_static_capability * 0.9\n        safety_factor: 1.1\n        constraint noise_control:\n        where:\n        element.type == \"mechanical_equipment\"\n        element.location in [\"occupied_area\", \"adjacent_to_occupied\"]\n        require:\n        acoustics.sound_pressure_level(element) <= acoustics.nc_rating(\n        element.space_type\n        )\n        element.vibration_transmission <= 0.2.inches_per_second\n        safety_factor: 1.2\n        constraint refrigerant_charge_limits:\n        where:\n        element.type == \"refrigeration_system\"\n        element.location == \"occupied_space\"\n        require:\n        element.refrigerant_charge / element.room_volume <= safety.refrigerant_concentration_limit(\n        element.refrigerant_classification\n        )\n        safety_factor: 4.0  # High safety factor for refrigerant safety\n        constraint hurricane_resistance:\n        where:\n        element.type == \"rooftop_equipment\"\n        element.location.wind_zone >= \"high_velocity_hurricane_zone\"\n        require:\n        structural.uplift_capacity(element) >= 1.6 * element.design_wind_uplift\n        element.has_missile_impact_protection == True\n    safety_factor: 1.0\n    reference: \"FL.Mechanical.2023.403\"", "rule_name": "outdoor_air_requirements"}
{"type": "bcl_to_physics", "input": "rule outdoor_air_requirements with constraints: outdoor_air_rate, relative_humidity", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.0 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.403", "rule_name": "outdoor_air_requirements"}
{"type": "bcl_completion", "input": "rule outdoor_air_requirements:\n    where:\n        element.type == \"hvac_system\"\n    # Complete this rule", "output": "rule outdoor_air_requirements:\n    where:\n        element.type == \"hvac_system\"\n        element.serves == \"occupied_space\"\n        must:\n        element.outdoor_air_rate >= flow.minimum_outdoor_air(\n        element.occupancy_category,\n        element.floor_area,\n        element.occupant_count\n        )\n        if element.outdoor_air_rate > 5000.cfm:\n        element.has_energy_recovery == True\n        reference: \"FL.Mechanical.2023.403\"\n        constraint thermal_comfort_conditions:\n        where:\n        element.type == \"occupied_space\"\n        element.has_hvac_system == True\n        require:\n        element.temperature_range == [70, 78].degrees_f  # Summer/Winter\n        element.relative_humidity <= 60.percent  # Florida humidity control\n        flow.air_velocity(element) <= 50.fpm  # Comfort limit\n        safety_factor: 1.0\n        constraint equipment_efficiency_requirements:\n        where:\n        element.type == \"hvac_equipment\"\n        element.cooling_capacity > 65000.btu_per_hr\n        require:\n        if element.equipment_type == \"packaged_ac\":\n        element.eer >= 11.2  # Energy Efficiency Ratio\n        element.ieer >= 12.9  # Integrated EER\n        elif element.equipment_type == \"chiller\":\n        element.cop >= 5.0  # Coefficient of Performance\n        safety_factor: 1.0\n        constraint duct_pressure_loss:\n        where:\n        element.type == \"duct_system\"\n        element.serves == \"commercial_building\"\n        require:\n        flow.static_pressure_loss(element) <= 0.08.inches_wc_per_100ft\n        element.total_static_pressure <= element.fan_static_capability * 0.9\n        safety_factor: 1.1\n        constraint noise_control:\n        where:\n        element.type == \"mechanical_equipment\"\n        element.location in [\"occupied_area\", \"adjacent_to_occupied\"]\n        require:\n        acoustics.sound_pressure_level(element) <= acoustics.nc_rating(\n        element.space_type\n        )\n        element.vibration_transmission <= 0.2.inches_per_second\n        safety_factor: 1.2\n        constraint refrigerant_charge_limits:\n        where:\n        element.type == \"refrigeration_system\"\n        element.location == \"occupied_space\"\n        require:\n        element.refrigerant_charge / element.room_volume <= safety.refrigerant_concentration_limit(\n        element.refrigerant_classification\n        )\n        safety_factor: 4.0  # High safety factor for refrigerant safety\n        constraint hurricane_resistance:\n        where:\n        element.type == \"rooftop_equipment\"\n        element.location.wind_zone >= \"high_velocity_hurricane_zone\"\n        require:\n        structural.uplift_capacity(element) >= 1.6 * element.design_wind_uplift\n        element.has_missile_impact_protection == True\n    must:\n        element.outdoor_air_rate >= flow.minimum_outdoor_air(\n        element.occupancy_category,\n        element.floor_area,\n        element.occupant_count\n        )\n        if element.outdoor_air_rate > 5000.cfm:\n        element.has_energy_recovery == True\n        reference: \"FL.Mechanical.2023.403\"\n        constraint thermal_comfort_conditions:\n        where:\n        element.type == \"occupied_space\"\n        element.has_hvac_system == True\n        require:\n        element.temperature_range == [70, 78].degrees_f  # Summer/Winter\n        element.relative_humidity <= 60.percent  # Florida humidity control\n        flow.air_velocity(element) <= 50.fpm  # Comfort limit\n        safety_factor: 1.0\n        constraint equipment_efficiency_requirements:\n        where:\n        element.type == \"hvac_equipment\"\n        element.cooling_capacity > 65000.btu_per_hr\n        require:\n        if element.equipment_type == \"packaged_ac\":\n        element.eer >= 11.2  # Energy Efficiency Ratio\n        element.ieer >= 12.9  # Integrated EER\n        elif element.equipment_type == \"chiller\":\n        element.cop >= 5.0  # Coefficient of Performance\n        safety_factor: 1.0\n        constraint duct_pressure_loss:\n        where:\n        element.type == \"duct_system\"\n        element.serves == \"commercial_building\"\n        require:\n        flow.static_pressure_loss(element) <= 0.08.inches_wc_per_100ft\n        element.total_static_pressure <= element.fan_static_capability * 0.9\n        safety_factor: 1.1\n        constraint noise_control:\n        where:\n        element.type == \"mechanical_equipment\"\n        element.location in [\"occupied_area\", \"adjacent_to_occupied\"]\n        require:\n        acoustics.sound_pressure_level(element) <= acoustics.nc_rating(\n        element.space_type\n        )\n        element.vibration_transmission <= 0.2.inches_per_second\n        safety_factor: 1.2\n        constraint refrigerant_charge_limits:\n        where:\n        element.type == \"refrigeration_system\"\n        element.location == \"occupied_space\"\n        require:\n        element.refrigerant_charge / element.room_volume <= safety.refrigerant_concentration_limit(\n        element.refrigerant_classification\n        )\n        safety_factor: 4.0  # High safety factor for refrigerant safety\n        constraint hurricane_resistance:\n        where:\n        element.type == \"rooftop_equipment\"\n        element.location.wind_zone >= \"high_velocity_hurricane_zone\"\n        require:\n        structural.uplift_capacity(element) >= 1.6 * element.design_wind_uplift\n        element.has_missile_impact_protection == True\n    safety_factor: 1.0\n    reference: \"FL.Mechanical.2023.403\"", "rule_name": "outdoor_air_requirements"}
{"type": "safety_factor_reasoning", "input": "For outdoor_air_requirements rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.0 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.Mechanical.2023.403.", "rule_name": "outdoor_air_requirements", "safety_factor": 1.0}
{"type": "legal_to_bcl", "input": "Requirement for ventilation system design: When element.type == \"ventilation_system\" and element.serves == \"commercial_building\", it is required that element.has_mechanical_ventilation == True and if element.uses_natural_ventilation:", "output": "rule ventilation_system_design:\n    where:\n        element.type == \"ventilation_system\"\n        element.serves == \"commercial_building\"\n        must:\n        element.has_mechanical_ventilation == True\n        if element.uses_natural_ventilation:\n        element.openable_area >= 0.04 * element.floor_area\n        element.opening_locations == \"opposite_walls\"\n        reference: \"FL.Mechanical.2023.401.2\"\n    must:\n        element.has_mechanical_ventilation == True\n        if element.uses_natural_ventilation:\n        element.openable_area >= 0.04 * element.floor_area\n        element.opening_locations == \"opposite_walls\"\n        reference: \"FL.Mechanical.2023.401.2\"\n    reference: \"FL.Mechanical.2023.401.2\"", "rule_name": "ventilation_system_design"}
{"type": "bcl_to_physics", "input": "rule ventilation_system_design with constraints: openable_area", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.401.2", "rule_name": "ventilation_system_design"}
{"type": "bcl_completion", "input": "rule ventilation_system_design:\n    where:\n        element.type == \"ventilation_system\"\n    # Complete this rule", "output": "rule ventilation_system_design:\n    where:\n        element.type == \"ventilation_system\"\n        element.serves == \"commercial_building\"\n        must:\n        element.has_mechanical_ventilation == True\n        if element.uses_natural_ventilation:\n        element.openable_area >= 0.04 * element.floor_area\n        element.opening_locations == \"opposite_walls\"\n        reference: \"FL.Mechanical.2023.401.2\"\n    must:\n        element.has_mechanical_ventilation == True\n        if element.uses_natural_ventilation:\n        element.openable_area >= 0.04 * element.floor_area\n        element.opening_locations == \"opposite_walls\"\n        reference: \"FL.Mechanical.2023.401.2\"\n    reference: \"FL.Mechanical.2023.401.2\"", "rule_name": "ventilation_system_design"}
{"type": "legal_to_bcl", "input": "Requirement for outdoor air quality: When element.type == \"outdoor_air_intake\" and must:, it is required that element.distance_from_pollution_source >= 10.feet and element.distance_from_exhaust_outlet >= 10.feet", "output": "rule outdoor_air_quality:\n    where:\n        element.type == \"outdoor_air_intake\"\n        must:\n        element.distance_from_pollution_source >= 10.feet\n        element.distance_from_exhaust_outlet >= 10.feet\n        element.height_above_grade >= 3.feet\n        element.has_bird_screen == True\n        element.protected_from_rain == True\n        reference: \"FL.Mechanical.2023.401.4\"\n    must:\n        element.distance_from_pollution_source >= 10.feet\n        element.distance_from_exhaust_outlet >= 10.feet\n        element.height_above_grade >= 3.feet\n        element.has_bird_screen == True\n        element.protected_from_rain == True\n        reference: \"FL.Mechanical.2023.401.4\"\n    reference: \"FL.Mechanical.2023.401.4\"", "rule_name": "outdoor_air_quality"}
{"type": "bcl_to_physics", "input": "rule outdoor_air_quality with constraints: distance_from_pollution_source, distance_from_exhaust_outlet", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.401.4", "rule_name": "outdoor_air_quality"}
{"type": "bcl_completion", "input": "rule outdoor_air_quality:\n    where:\n        element.type == \"outdoor_air_intake\"\n    # Complete this rule", "output": "rule outdoor_air_quality:\n    where:\n        element.type == \"outdoor_air_intake\"\n        must:\n        element.distance_from_pollution_source >= 10.feet\n        element.distance_from_exhaust_outlet >= 10.feet\n        element.height_above_grade >= 3.feet\n        element.has_bird_screen == True\n        element.protected_from_rain == True\n        reference: \"FL.Mechanical.2023.401.4\"\n    must:\n        element.distance_from_pollution_source >= 10.feet\n        element.distance_from_exhaust_outlet >= 10.feet\n        element.height_above_grade >= 3.feet\n        element.has_bird_screen == True\n        element.protected_from_rain == True\n        reference: \"FL.Mechanical.2023.401.4\"\n    reference: \"FL.Mechanical.2023.401.4\"", "rule_name": "outdoor_air_quality"}
{"type": "legal_to_bcl", "input": "Requirement for breathing zone outdoor airflow: When element.type == \"occupied_space\" and element.has_mechanical_ventilation == True, it is required that element.outdoor_air_per_person >= flow.people_outdoor_air_rate( and element.occupancy_category", "output": "rule breathing_zone_outdoor_airflow:\n    where:\n        element.type == \"occupied_space\"\n        element.has_mechanical_ventilation == True\n        must:\n        element.outdoor_air_per_person >= flow.people_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.outdoor_air_per_area >= flow.area_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.total_outdoor_air >= (\n        element.outdoor_air_per_person * element.occupant_count +\n        element.outdoor_air_per_area * element.floor_area\n        )\n        reference: \"FL.Mechanical.2023.403.3\"\n    must:\n        element.outdoor_air_per_person >= flow.people_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.outdoor_air_per_area >= flow.area_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.total_outdoor_air >= (\n        element.outdoor_air_per_person * element.occupant_count +\n        element.outdoor_air_per_area * element.floor_area\n        )\n        reference: \"FL.Mechanical.2023.403.3\"\n    reference: \"FL.Mechanical.2023.403.3\"", "rule_name": "breathing_zone_outdoor_airflow"}
{"type": "bcl_to_physics", "input": "rule breathing_zone_outdoor_airflow with conditions: element.outdoor_air_per_person >= flow.people_outdoor_air_rate(, element.occupancy_category", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.403.3", "rule_name": "breathing_zone_outdoor_airflow"}
{"type": "bcl_completion", "input": "rule breathing_zone_outdoor_airflow:\n    where:\n        element.type == \"occupied_space\"\n    # Complete this rule", "output": "rule breathing_zone_outdoor_airflow:\n    where:\n        element.type == \"occupied_space\"\n        element.has_mechanical_ventilation == True\n        must:\n        element.outdoor_air_per_person >= flow.people_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.outdoor_air_per_area >= flow.area_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.total_outdoor_air >= (\n        element.outdoor_air_per_person * element.occupant_count +\n        element.outdoor_air_per_area * element.floor_area\n        )\n        reference: \"FL.Mechanical.2023.403.3\"\n    must:\n        element.outdoor_air_per_person >= flow.people_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.outdoor_air_per_area >= flow.area_outdoor_air_rate(\n        element.occupancy_category\n        )\n        element.total_outdoor_air >= (\n        element.outdoor_air_per_person * element.occupant_count +\n        element.outdoor_air_per_area * element.floor_area\n        )\n        reference: \"FL.Mechanical.2023.403.3\"\n    reference: \"FL.Mechanical.2023.403.3\"", "rule_name": "breathing_zone_outdoor_airflow"}
{"type": "legal_to_bcl", "input": "Requirement for exhaust ventilation rates: When element.type == \"exhaust_system\" and must:, it is required that if element.space_type == \"commercial_kitchen\": and element.exhaust_rate >= flow.kitchen_exhaust_rate(", "output": "rule exhaust_ventilation_rates:\n    where:\n        element.type == \"exhaust_system\"\n        must:\n        if element.space_type == \"commercial_kitchen\":\n        element.exhaust_rate >= flow.kitchen_exhaust_rate(\n        element.cooking_equipment_type,\n        element.hood_type\n        )\n        elif element.space_type == \"restroom\":\n        element.exhaust_rate >= 50.cfm_per_fixture\n        elif element.space_type == \"janitor_closet\":\n        element.exhaust_rate >= 1.0.cfm_per_sq_ft\n        reference: \"FL.Mechanical.2023.403.3.1\"\n    must:\n        if element.space_type == \"commercial_kitchen\":\n        element.exhaust_rate >= flow.kitchen_exhaust_rate(\n        element.cooking_equipment_type,\n        element.hood_type\n        )\n        elif element.space_type == \"restroom\":\n        element.exhaust_rate >= 50.cfm_per_fixture\n        elif element.space_type == \"janitor_closet\":\n        element.exhaust_rate >= 1.0.cfm_per_sq_ft\n        reference: \"FL.Mechanical.2023.403.3.1\"\n    reference: \"FL.Mechanical.2023.403.3.1\"", "rule_name": "exhaust_ventilation_rates"}
{"type": "bcl_to_physics", "input": "rule exhaust_ventilation_rates with constraints: exhaust_rate, exhaust_rate", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.403.3.1", "rule_name": "exhaust_ventilation_rates"}
{"type": "bcl_completion", "input": "rule exhaust_ventilation_rates:\n    where:\n        element.type == \"exhaust_system\"\n    # Complete this rule", "output": "rule exhaust_ventilation_rates:\n    where:\n        element.type == \"exhaust_system\"\n        must:\n        if element.space_type == \"commercial_kitchen\":\n        element.exhaust_rate >= flow.kitchen_exhaust_rate(\n        element.cooking_equipment_type,\n        element.hood_type\n        )\n        elif element.space_type == \"restroom\":\n        element.exhaust_rate >= 50.cfm_per_fixture\n        elif element.space_type == \"janitor_closet\":\n        element.exhaust_rate >= 1.0.cfm_per_sq_ft\n        reference: \"FL.Mechanical.2023.403.3.1\"\n    must:\n        if element.space_type == \"commercial_kitchen\":\n        element.exhaust_rate >= flow.kitchen_exhaust_rate(\n        element.cooking_equipment_type,\n        element.hood_type\n        )\n        elif element.space_type == \"restroom\":\n        element.exhaust_rate >= 50.cfm_per_fixture\n        elif element.space_type == \"janitor_closet\":\n        element.exhaust_rate >= 1.0.cfm_per_sq_ft\n        reference: \"FL.Mechanical.2023.403.3.1\"\n    reference: \"FL.Mechanical.2023.403.3.1\"", "rule_name": "exhaust_ventilation_rates"}
{"type": "legal_to_bcl", "input": "Requirement for demand control ventilation: When element.type == \"ventilation_system\" and element.space_type in [\"assembly\", \"conference\", \"multipurpose\"], it is required that element.has_demand_control_ventilation == True and element.co2_sensors_installed == True", "output": "rule demand_control_ventilation:\n    where:\n        element.type == \"ventilation_system\"\n        element.space_type in [\"assembly\", \"conference\", \"multipurpose\"]\n        element.design_occupancy >= 40.people_per_1000_sq_ft\n        must:\n        element.has_demand_control_ventilation == True\n        element.co2_sensors_installed == True\n        element.co2_setpoint <= 700.ppm_above_outdoor\n        reference: \"FL.EnergyCode.2023.C403.4.1\"\n    must:\n        element.has_demand_control_ventilation == True\n        element.co2_sensors_installed == True\n        element.co2_setpoint <= 700.ppm_above_outdoor\n        reference: \"FL.EnergyCode.2023.C403.4.1\"\n    reference: \"FL.EnergyCode.2023.C403.4.1\"", "rule_name": "demand_control_ventilation"}
{"type": "bcl_to_physics", "input": "rule demand_control_ventilation with constraints: design_occupancy, co2_setpoint", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.4.1", "rule_name": "demand_control_ventilation"}
{"type": "bcl_completion", "input": "rule demand_control_ventilation:\n    where:\n        element.type == \"ventilation_system\"\n    # Complete this rule", "output": "rule demand_control_ventilation:\n    where:\n        element.type == \"ventilation_system\"\n        element.space_type in [\"assembly\", \"conference\", \"multipurpose\"]\n        element.design_occupancy >= 40.people_per_1000_sq_ft\n        must:\n        element.has_demand_control_ventilation == True\n        element.co2_sensors_installed == True\n        element.co2_setpoint <= 700.ppm_above_outdoor\n        reference: \"FL.EnergyCode.2023.C403.4.1\"\n    must:\n        element.has_demand_control_ventilation == True\n        element.co2_sensors_installed == True\n        element.co2_setpoint <= 700.ppm_above_outdoor\n        reference: \"FL.EnergyCode.2023.C403.4.1\"\n    reference: \"FL.EnergyCode.2023.C403.4.1\"", "rule_name": "demand_control_ventilation"}
{"type": "legal_to_bcl", "input": "Requirement for energy recovery ventilation: When element.type == \"ventilation_system\" and element.outdoor_air_percentage >= 0.70, it is required that element.has_energy_recovery == True and element.total_effectiveness >= 0.50  # At cooling design", "output": "rule energy_recovery_ventilation:\n    where:\n        element.type == \"ventilation_system\"\n        element.outdoor_air_percentage >= 0.70\n        element.design_supply_air >= 5000.cfm\n        must:\n        element.has_energy_recovery == True\n        element.total_effectiveness >= 0.50  # At cooling design\n        element.sensible_effectiveness >= 0.50  # At heating design\n        element.latent_effectiveness >= 0.40\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    must:\n        element.has_energy_recovery == True\n        element.total_effectiveness >= 0.50  # At cooling design\n        element.sensible_effectiveness >= 0.50  # At heating design\n        element.latent_effectiveness >= 0.40\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    reference: \"FL.EnergyCode.2023.C403.3.5\"", "rule_name": "energy_recovery_ventilation"}
{"type": "bcl_to_physics", "input": "rule energy_recovery_ventilation with constraints: outdoor_air_percentage, design_supply_air", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.3.5", "rule_name": "energy_recovery_ventilation"}
{"type": "bcl_completion", "input": "rule energy_recovery_ventilation:\n    where:\n        element.type == \"ventilation_system\"\n    # Complete this rule", "output": "rule energy_recovery_ventilation:\n    where:\n        element.type == \"ventilation_system\"\n        element.outdoor_air_percentage >= 0.70\n        element.design_supply_air >= 5000.cfm\n        must:\n        element.has_energy_recovery == True\n        element.total_effectiveness >= 0.50  # At cooling design\n        element.sensible_effectiveness >= 0.50  # At heating design\n        element.latent_effectiveness >= 0.40\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    must:\n        element.has_energy_recovery == True\n        element.total_effectiveness >= 0.50  # At cooling design\n        element.sensible_effectiveness >= 0.50  # At heating design\n        element.latent_effectiveness >= 0.40\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    reference: \"FL.EnergyCode.2023.C403.3.5\"", "rule_name": "energy_recovery_ventilation"}
{"type": "legal_to_bcl", "input": "Requirement for commercial kitchen hoods: When element.type == \"kitchen_hood\" and element.hood_type in [\"type_1\", \"type_2\"], it is required that if element.serves_grease_producing_equipment: and element.hood_type == \"type_1\"", "output": "rule commercial_kitchen_hoods:\n    where:\n        element.type == \"kitchen_hood\"\n        element.hood_type in [\"type_1\", \"type_2\"]\n        must:\n        if element.serves_grease_producing_equipment:\n        element.hood_type == \"type_1\"\n        element.has_grease_filters == True\n        element.has_fire_suppression == True\n        element.exhaust_rate >= flow.kitchen_hood_exhaust(\n        element.hood_type,\n        element.cooking_equipment_duty\n        )\n        element.makeup_air_rate >= 0.8 * element.exhaust_rate\n        reference: \"FL.Mechanical.2023.507\"\n    must:\n        if element.serves_grease_producing_equipment:\n        element.hood_type == \"type_1\"\n        element.has_grease_filters == True\n        element.has_fire_suppression == True\n        element.exhaust_rate >= flow.kitchen_hood_exhaust(\n        element.hood_type,\n        element.cooking_equipment_duty\n        )\n        element.makeup_air_rate >= 0.8 * element.exhaust_rate\n        reference: \"FL.Mechanical.2023.507\"\n    reference: \"FL.Mechanical.2023.507\"", "rule_name": "commercial_kitchen_hoods"}
{"type": "bcl_to_physics", "input": "rule commercial_kitchen_hoods with constraints: makeup_air_rate", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.507", "rule_name": "commercial_kitchen_hoods"}
{"type": "bcl_completion", "input": "rule commercial_kitchen_hoods:\n    where:\n        element.type == \"kitchen_hood\"\n    # Complete this rule", "output": "rule commercial_kitchen_hoods:\n    where:\n        element.type == \"kitchen_hood\"\n        element.hood_type in [\"type_1\", \"type_2\"]\n        must:\n        if element.serves_grease_producing_equipment:\n        element.hood_type == \"type_1\"\n        element.has_grease_filters == True\n        element.has_fire_suppression == True\n        element.exhaust_rate >= flow.kitchen_hood_exhaust(\n        element.hood_type,\n        element.cooking_equipment_duty\n        )\n        element.makeup_air_rate >= 0.8 * element.exhaust_rate\n        reference: \"FL.Mechanical.2023.507\"\n    must:\n        if element.serves_grease_producing_equipment:\n        element.hood_type == \"type_1\"\n        element.has_grease_filters == True\n        element.has_fire_suppression == True\n        element.exhaust_rate >= flow.kitchen_hood_exhaust(\n        element.hood_type,\n        element.cooking_equipment_duty\n        )\n        element.makeup_air_rate >= 0.8 * element.exhaust_rate\n        reference: \"FL.Mechanical.2023.507\"\n    reference: \"FL.Mechanical.2023.507\"", "rule_name": "commercial_kitchen_hoods"}
{"type": "legal_to_bcl", "input": "Requirement for kitchen makeup air: When element.type == \"kitchen_makeup_air_system\" and must:, it is required that element.heating_capacity >= thermal.makeup_air_heating( and element.outdoor_design_temp,", "output": "rule kitchen_makeup_air:\n    where:\n        element.type == \"kitchen_makeup_air_system\"\n        must:\n        element.heating_capacity >= thermal.makeup_air_heating(\n        element.outdoor_design_temp,\n        element.indoor_temp\n        )\n        element.cooling_capacity >= thermal.makeup_air_cooling(\n        element.outdoor_design_temp,\n        element.outdoor_design_humidity\n        )\n        element.discharge_velocity <= 50.fpm  # At occupied zone\n        reference: \"FL.Mechanical.2023.508\"\n    must:\n        element.heating_capacity >= thermal.makeup_air_heating(\n        element.outdoor_design_temp,\n        element.indoor_temp\n        )\n        element.cooling_capacity >= thermal.makeup_air_cooling(\n        element.outdoor_design_temp,\n        element.outdoor_design_humidity\n        )\n        element.discharge_velocity <= 50.fpm  # At occupied zone\n        reference: \"FL.Mechanical.2023.508\"\n    reference: \"FL.Mechanical.2023.508\"", "rule_name": "kitchen_makeup_air"}
{"type": "bcl_to_physics", "input": "rule kitchen_makeup_air with constraints: discharge_velocity", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.508", "rule_name": "kitchen_makeup_air"}
{"type": "bcl_completion", "input": "rule kitchen_makeup_air:\n    where:\n        element.type == \"kitchen_makeup_air_system\"\n    # Complete this rule", "output": "rule kitchen_makeup_air:\n    where:\n        element.type == \"kitchen_makeup_air_system\"\n        must:\n        element.heating_capacity >= thermal.makeup_air_heating(\n        element.outdoor_design_temp,\n        element.indoor_temp\n        )\n        element.cooling_capacity >= thermal.makeup_air_cooling(\n        element.outdoor_design_temp,\n        element.outdoor_design_humidity\n        )\n        element.discharge_velocity <= 50.fpm  # At occupied zone\n        reference: \"FL.Mechanical.2023.508\"\n    must:\n        element.heating_capacity >= thermal.makeup_air_heating(\n        element.outdoor_design_temp,\n        element.indoor_temp\n        )\n        element.cooling_capacity >= thermal.makeup_air_cooling(\n        element.outdoor_design_temp,\n        element.outdoor_design_humidity\n        )\n        element.discharge_velocity <= 50.fpm  # At occupied zone\n        reference: \"FL.Mechanical.2023.508\"\n    reference: \"FL.Mechanical.2023.508\"", "rule_name": "kitchen_makeup_air"}
{"type": "legal_to_bcl", "input": "Requirement for laboratory exhaust systems: When element.type == \"laboratory_exhaust\" and must:, it is required that element.recirculation_allowed == False and element.discharge_velocity >= 3000.fpm", "output": "rule laboratory_exhaust_systems:\n    where:\n        element.type == \"laboratory_exhaust\"\n        must:\n        element.recirculation_allowed == False\n        element.discharge_velocity >= 3000.fpm\n        element.stack_height >= 10.feet_above_roof\n        element.plume_rise >= 1.5 * element.building_height\n        reference: \"FL.Mechanical.2023.510\"\n    must:\n        element.recirculation_allowed == False\n        element.discharge_velocity >= 3000.fpm\n        element.stack_height >= 10.feet_above_roof\n        element.plume_rise >= 1.5 * element.building_height\n        reference: \"FL.Mechanical.2023.510\"\n    reference: \"FL.Mechanical.2023.510\"", "rule_name": "laboratory_exhaust_systems"}
{"type": "bcl_to_physics", "input": "rule laboratory_exhaust_systems with constraints: discharge_velocity, stack_height", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.510", "rule_name": "laboratory_exhaust_systems"}
{"type": "bcl_completion", "input": "rule laboratory_exhaust_systems:\n    where:\n        element.type == \"laboratory_exhaust\"\n    # Complete this rule", "output": "rule laboratory_exhaust_systems:\n    where:\n        element.type == \"laboratory_exhaust\"\n        must:\n        element.recirculation_allowed == False\n        element.discharge_velocity >= 3000.fpm\n        element.stack_height >= 10.feet_above_roof\n        element.plume_rise >= 1.5 * element.building_height\n        reference: \"FL.Mechanical.2023.510\"\n    must:\n        element.recirculation_allowed == False\n        element.discharge_velocity >= 3000.fpm\n        element.stack_height >= 10.feet_above_roof\n        element.plume_rise >= 1.5 * element.building_height\n        reference: \"FL.Mechanical.2023.510\"\n    reference: \"FL.Mechanical.2023.510\"", "rule_name": "laboratory_exhaust_systems"}
{"type": "legal_to_bcl", "input": "Requirement for healthcare ventilation: When element.type == \"healthcare_space\" and element.space_classification in [\"operating_room\", \"protective_environment\", \"isolation_room\"], it is required that if element.space_classification == \"operating_room\": and element.pressure_relationship == \"positive\"", "output": "rule healthcare_ventilation:\n    where:\n        element.type == \"healthcare_space\"\n        element.space_classification in [\"operating_room\", \"protective_environment\", \"isolation_room\"]\n        must:\n        if element.space_classification == \"operating_room\":\n        element.pressure_relationship == \"positive\"\n        element.air_changes_per_hour >= 20\n        element.outdoor_air_changes >= 4\n        elif element.space_classification == \"isolation_room\":\n        element.pressure_relationship == \"negative\"\n        element.air_changes_per_hour >= 12\n        element.exhaust_to_outdoors == True\n        reference: \"FL.Mechanical.2023.407\"\n    must:\n        if element.space_classification == \"operating_room\":\n        element.pressure_relationship == \"positive\"\n        element.air_changes_per_hour >= 20\n        element.outdoor_air_changes >= 4\n        elif element.space_classification == \"isolation_room\":\n        element.pressure_relationship == \"negative\"\n        element.air_changes_per_hour >= 12\n        element.exhaust_to_outdoors == True\n        reference: \"FL.Mechanical.2023.407\"\n    reference: \"FL.Mechanical.2023.407\"", "rule_name": "healthcare_ventilation"}
{"type": "bcl_to_physics", "input": "rule healthcare_ventilation with conditions: if element.space_classification == \"operating_room\":, element.pressure_relationship == \"positive\"", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.407", "rule_name": "healthcare_ventilation"}
{"type": "bcl_completion", "input": "rule healthcare_ventilation:\n    where:\n        element.type == \"healthcare_space\"\n    # Complete this rule", "output": "rule healthcare_ventilation:\n    where:\n        element.type == \"healthcare_space\"\n        element.space_classification in [\"operating_room\", \"protective_environment\", \"isolation_room\"]\n        must:\n        if element.space_classification == \"operating_room\":\n        element.pressure_relationship == \"positive\"\n        element.air_changes_per_hour >= 20\n        element.outdoor_air_changes >= 4\n        elif element.space_classification == \"isolation_room\":\n        element.pressure_relationship == \"negative\"\n        element.air_changes_per_hour >= 12\n        element.exhaust_to_outdoors == True\n        reference: \"FL.Mechanical.2023.407\"\n    must:\n        if element.space_classification == \"operating_room\":\n        element.pressure_relationship == \"positive\"\n        element.air_changes_per_hour >= 20\n        element.outdoor_air_changes >= 4\n        elif element.space_classification == \"isolation_room\":\n        element.pressure_relationship == \"negative\"\n        element.air_changes_per_hour >= 12\n        element.exhaust_to_outdoors == True\n        reference: \"FL.Mechanical.2023.407\"\n    reference: \"FL.Mechanical.2023.407\"", "rule_name": "healthcare_ventilation"}
{"type": "legal_to_bcl", "input": "Requirement for ventilation system balancing: When element.type == \"ventilation_system\" and element.serves == \"commercial_building\", it is required that element.has_test_and_balance == True and element.outdoor_air_measured == True", "output": "rule ventilation_system_balancing:\n    where:\n        element.type == \"ventilation_system\"\n        element.serves == \"commercial_building\"\n        must:\n        element.has_test_and_balance == True\n        element.outdoor_air_measured == True\n        element.exhaust_air_measured == True\n        abs(element.measured_flow - element.design_flow) / element.design_flow <= 0.10\n        reference: \"FL.Mechanical.2023.403.2.2\"\n        constraint outdoor_air_entrainment:\n        where:\n        element.type == \"outdoor_air_intake\"\n        require:\n        flow.dilution_factor(\n        element.distance_from_exhaust,\n        element.wind_speed,\n        element.exhaust_velocity\n        ) >= 100  # 1% contamination max\n        safety_factor: 2.0\n        constraint space_air_distribution:\n        where:\n        element.type == \"occupied_space\"\n        element.has_mechanical_ventilation == True\n        require:\n        flow.ventilation_effectiveness(element) >= 0.8\n        flow.air_velocity_at_occupant(element) <= 50.fpm\n        thermal.vertical_temperature_gradient(element) <= 5.degrees_f_per_10_feet\n        safety_factor: 1.2\n        constraint humidity_control_florida:\n        where:\n        element.type == \"ventilation_system\"\n        element.location.state == \"florida\"\n        require:\n        psychrometrics.space_humidity(element) <= 60.percent_rh\n        psychrometrics.supply_air_dewpoint(element) <= 55.degrees_f\n        safety_factor: 1.1\n        constraint kitchen_capture_efficiency:\n        where:\n        element.type == \"kitchen_hood\"\n        require:\n        flow.capture_efficiency(element) >= 0.95\n        element.hood_overhang >= 6.inches  # All sides\n        flow.filter_face_velocity(element) <= 350.fpm\n        safety_factor: 1.2\n        constraint pressure_control:\n        where:\n        element.type == \"pressurized_space\"\n        require:\n        abs(element.pressure_differential) >= 0.01.inches_wc\n        abs(element.pressure_differential) <= 0.05.inches_wc\n        if element.pressure_relationship == \"positive\":\n        element.supply_air > element.exhaust_air + element.exfiltration\n        else:\n        element.exhaust_air > element.supply_air + element.infiltration\n        safety_factor: 1.5\n        constraint filter_pressure_drop:\n        where:\n        element.type == \"air_filter\"\n        require:\n        flow.clean_filter_pressure_drop(element) <= element.rated_initial_resistance\n        flow.dirty_filter_pressure_drop(element) <= 2 * element.rated_initial_resistance\n        element.merv_rating >= 8\n    must:\n        element.has_test_and_balance == True\n        element.outdoor_air_measured == True\n        element.exhaust_air_measured == True\n        abs(element.measured_flow - element.design_flow) / element.design_flow <= 0.10\n        reference: \"FL.Mechanical.2023.403.2.2\"\n        constraint outdoor_air_entrainment:\n        where:\n        element.type == \"outdoor_air_intake\"\n        require:\n        flow.dilution_factor(\n        element.distance_from_exhaust,\n        element.wind_speed,\n        element.exhaust_velocity\n        ) >= 100  # 1% contamination max\n        safety_factor: 2.0\n        constraint space_air_distribution:\n        where:\n        element.type == \"occupied_space\"\n        element.has_mechanical_ventilation == True\n        require:\n        flow.ventilation_effectiveness(element) >= 0.8\n        flow.air_velocity_at_occupant(element) <= 50.fpm\n        thermal.vertical_temperature_gradient(element) <= 5.degrees_f_per_10_feet\n        safety_factor: 1.2\n        constraint humidity_control_florida:\n        where:\n        element.type == \"ventilation_system\"\n        element.location.state == \"florida\"\n        require:\n        psychrometrics.space_humidity(element) <= 60.percent_rh\n        psychrometrics.supply_air_dewpoint(element) <= 55.degrees_f\n        safety_factor: 1.1\n        constraint kitchen_capture_efficiency:\n        where:\n        element.type == \"kitchen_hood\"\n        require:\n        flow.capture_efficiency(element) >= 0.95\n        element.hood_overhang >= 6.inches  # All sides\n        flow.filter_face_velocity(element) <= 350.fpm\n        safety_factor: 1.2\n        constraint pressure_control:\n        where:\n        element.type == \"pressurized_space\"\n        require:\n        abs(element.pressure_differential) >= 0.01.inches_wc\n        abs(element.pressure_differential) <= 0.05.inches_wc\n        if element.pressure_relationship == \"positive\":\n        element.supply_air > element.exhaust_air + element.exfiltration\n        else:\n        element.exhaust_air > element.supply_air + element.infiltration\n        safety_factor: 1.5\n        constraint filter_pressure_drop:\n        where:\n        element.type == \"air_filter\"\n        require:\n        flow.clean_filter_pressure_drop(element) <= element.rated_initial_resistance\n        flow.dirty_filter_pressure_drop(element) <= 2 * element.rated_initial_resistance\n        element.merv_rating >= 8\n    safety_factor: 2.0\n    reference: \"FL.Mechanical.2023.403.2.2\"", "rule_name": "ventilation_system_balancing"}
{"type": "bcl_to_physics", "input": "rule ventilation_system_balancing with constraints: design_flow, hood_overhang", "output": "This rule ensures safety through physics-based validation. A safety factor of 2.0 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.403.2.2", "rule_name": "ventilation_system_balancing"}
{"type": "bcl_completion", "input": "rule ventilation_system_balancing:\n    where:\n        element.type == \"ventilation_system\"\n    # Complete this rule", "output": "rule ventilation_system_balancing:\n    where:\n        element.type == \"ventilation_system\"\n        element.serves == \"commercial_building\"\n        must:\n        element.has_test_and_balance == True\n        element.outdoor_air_measured == True\n        element.exhaust_air_measured == True\n        abs(element.measured_flow - element.design_flow) / element.design_flow <= 0.10\n        reference: \"FL.Mechanical.2023.403.2.2\"\n        constraint outdoor_air_entrainment:\n        where:\n        element.type == \"outdoor_air_intake\"\n        require:\n        flow.dilution_factor(\n        element.distance_from_exhaust,\n        element.wind_speed,\n        element.exhaust_velocity\n        ) >= 100  # 1% contamination max\n        safety_factor: 2.0\n        constraint space_air_distribution:\n        where:\n        element.type == \"occupied_space\"\n        element.has_mechanical_ventilation == True\n        require:\n        flow.ventilation_effectiveness(element) >= 0.8\n        flow.air_velocity_at_occupant(element) <= 50.fpm\n        thermal.vertical_temperature_gradient(element) <= 5.degrees_f_per_10_feet\n        safety_factor: 1.2\n        constraint humidity_control_florida:\n        where:\n        element.type == \"ventilation_system\"\n        element.location.state == \"florida\"\n        require:\n        psychrometrics.space_humidity(element) <= 60.percent_rh\n        psychrometrics.supply_air_dewpoint(element) <= 55.degrees_f\n        safety_factor: 1.1\n        constraint kitchen_capture_efficiency:\n        where:\n        element.type == \"kitchen_hood\"\n        require:\n        flow.capture_efficiency(element) >= 0.95\n        element.hood_overhang >= 6.inches  # All sides\n        flow.filter_face_velocity(element) <= 350.fpm\n        safety_factor: 1.2\n        constraint pressure_control:\n        where:\n        element.type == \"pressurized_space\"\n        require:\n        abs(element.pressure_differential) >= 0.01.inches_wc\n        abs(element.pressure_differential) <= 0.05.inches_wc\n        if element.pressure_relationship == \"positive\":\n        element.supply_air > element.exhaust_air + element.exfiltration\n        else:\n        element.exhaust_air > element.supply_air + element.infiltration\n        safety_factor: 1.5\n        constraint filter_pressure_drop:\n        where:\n        element.type == \"air_filter\"\n        require:\n        flow.clean_filter_pressure_drop(element) <= element.rated_initial_resistance\n        flow.dirty_filter_pressure_drop(element) <= 2 * element.rated_initial_resistance\n        element.merv_rating >= 8\n    must:\n        element.has_test_and_balance == True\n        element.outdoor_air_measured == True\n        element.exhaust_air_measured == True\n        abs(element.measured_flow - element.design_flow) / element.design_flow <= 0.10\n        reference: \"FL.Mechanical.2023.403.2.2\"\n        constraint outdoor_air_entrainment:\n        where:\n        element.type == \"outdoor_air_intake\"\n        require:\n        flow.dilution_factor(\n        element.distance_from_exhaust,\n        element.wind_speed,\n        element.exhaust_velocity\n        ) >= 100  # 1% contamination max\n        safety_factor: 2.0\n        constraint space_air_distribution:\n        where:\n        element.type == \"occupied_space\"\n        element.has_mechanical_ventilation == True\n        require:\n        flow.ventilation_effectiveness(element) >= 0.8\n        flow.air_velocity_at_occupant(element) <= 50.fpm\n        thermal.vertical_temperature_gradient(element) <= 5.degrees_f_per_10_feet\n        safety_factor: 1.2\n        constraint humidity_control_florida:\n        where:\n        element.type == \"ventilation_system\"\n        element.location.state == \"florida\"\n        require:\n        psychrometrics.space_humidity(element) <= 60.percent_rh\n        psychrometrics.supply_air_dewpoint(element) <= 55.degrees_f\n        safety_factor: 1.1\n        constraint kitchen_capture_efficiency:\n        where:\n        element.type == \"kitchen_hood\"\n        require:\n        flow.capture_efficiency(element) >= 0.95\n        element.hood_overhang >= 6.inches  # All sides\n        flow.filter_face_velocity(element) <= 350.fpm\n        safety_factor: 1.2\n        constraint pressure_control:\n        where:\n        element.type == \"pressurized_space\"\n        require:\n        abs(element.pressure_differential) >= 0.01.inches_wc\n        abs(element.pressure_differential) <= 0.05.inches_wc\n        if element.pressure_relationship == \"positive\":\n        element.supply_air > element.exhaust_air + element.exfiltration\n        else:\n        element.exhaust_air > element.supply_air + element.infiltration\n        safety_factor: 1.5\n        constraint filter_pressure_drop:\n        where:\n        element.type == \"air_filter\"\n        require:\n        flow.clean_filter_pressure_drop(element) <= element.rated_initial_resistance\n        flow.dirty_filter_pressure_drop(element) <= 2 * element.rated_initial_resistance\n        element.merv_rating >= 8\n    safety_factor: 2.0\n    reference: \"FL.Mechanical.2023.403.2.2\"", "rule_name": "ventilation_system_balancing"}
{"type": "safety_factor_reasoning", "input": "For ventilation_system_balancing rule for general safety, what safety factor should be applied?", "output": "A safety factor of 2.0 is appropriate because this involves critical life safety systems where failure could result in serious harm. This aligns with FL.Mechanical.2023.403.2.2.", "rule_name": "ventilation_system_balancing", "safety_factor": 2.0}
{"type": "legal_to_bcl", "input": "Requirement for commercial cooling equipment: When element.type in [\"chiller\", \"packaged_ac\", \"split_system\", \"vrf_system\"] and element.application == \"commercial\", it is required that if element.cooling_capacity < 65000.btu_per_hr: and element.seer >= 15.0  # Minimum SEER", "output": "rule commercial_cooling_equipment:\n    where:\n        element.type in [\"chiller\", \"packaged_ac\", \"split_system\", \"vrf_system\"]\n        element.application == \"commercial\"\n        must:\n        if element.cooling_capacity < 65000.btu_per_hr:\n        element.seer >= 15.0  # Minimum SEER\n        elif element.cooling_capacity < 135000.btu_per_hr:\n        element.eer >= 11.2\n        element.ieer >= 12.9\n        elif element.cooling_capacity < 240000.btu_per_hr:\n        element.eer >= 11.0\n        element.ieer >= 12.4\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    must:\n        if element.cooling_capacity < 65000.btu_per_hr:\n        element.seer >= 15.0  # Minimum SEER\n        elif element.cooling_capacity < 135000.btu_per_hr:\n        element.eer >= 11.2\n        element.ieer >= 12.9\n        elif element.cooling_capacity < 240000.btu_per_hr:\n        element.eer >= 11.0\n        element.ieer >= 12.4\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    reference: \"FL.EnergyCode.2023.C403.2.3\"", "rule_name": "commercial_cooling_equipment"}
{"type": "bcl_to_physics", "input": "rule commercial_cooling_equipment with constraints: cooling_capacity, seer", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.2.3", "rule_name": "commercial_cooling_equipment"}
{"type": "bcl_completion", "input": "rule commercial_cooling_equipment:\n    where:\n        element.type in [\"chiller\", \"packaged_ac\", \"split_system\", \"vrf_system\"]\n    # Complete this rule", "output": "rule commercial_cooling_equipment:\n    where:\n        element.type in [\"chiller\", \"packaged_ac\", \"split_system\", \"vrf_system\"]\n        element.application == \"commercial\"\n        must:\n        if element.cooling_capacity < 65000.btu_per_hr:\n        element.seer >= 15.0  # Minimum SEER\n        elif element.cooling_capacity < 135000.btu_per_hr:\n        element.eer >= 11.2\n        element.ieer >= 12.9\n        elif element.cooling_capacity < 240000.btu_per_hr:\n        element.eer >= 11.0\n        element.ieer >= 12.4\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    must:\n        if element.cooling_capacity < 65000.btu_per_hr:\n        element.seer >= 15.0  # Minimum SEER\n        elif element.cooling_capacity < 135000.btu_per_hr:\n        element.eer >= 11.2\n        element.ieer >= 12.9\n        elif element.cooling_capacity < 240000.btu_per_hr:\n        element.eer >= 11.0\n        element.ieer >= 12.4\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    reference: \"FL.EnergyCode.2023.C403.2.3\"", "rule_name": "commercial_cooling_equipment"}
{"type": "legal_to_bcl", "input": "Requirement for chiller efficiency: When element.type == \"chiller\" and must:, it is required that if element.path == \"A\":  # Based on full load and if element.capacity < 150.tons:", "output": "rule chiller_efficiency:\n    where:\n        element.type == \"chiller\"\n        must:\n        if element.path == \"A\":  # Based on full load\n        if element.capacity < 150.tons:\n        element.cop >= 5.0 if element.type == \"water_cooled\"\n        element.cop >= 3.8 if element.type == \"air_cooled\"\n        elif element.capacity < 300.tons:\n        element.cop >= 5.55 if element.type == \"water_cooled\"\n        element.cop >= 3.9 if element.type == \"air_cooled\"\n        else:  # Path B - IPLV based\n        element.iplv >= element.minimum_iplv_requirement\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(7)\"\n    must:\n        if element.path == \"A\":  # Based on full load\n        if element.capacity < 150.tons:\n        element.cop >= 5.0 if element.type == \"water_cooled\"\n        element.cop >= 3.8 if element.type == \"air_cooled\"\n        elif element.capacity < 300.tons:\n        element.cop >= 5.55 if element.type == \"water_cooled\"\n        element.cop >= 3.9 if element.type == \"air_cooled\"\n        else:  # Path B - IPLV based\n        element.iplv >= element.minimum_iplv_requirement\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(7)\"\n    reference: \"FL.EnergyCode.2023.Table_C403.2.3(7)\"", "rule_name": "chiller_efficiency"}
{"type": "bcl_to_physics", "input": "rule chiller_efficiency with constraints: capacity, cop", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.Table_C403.2.3(7)", "rule_name": "chiller_efficiency"}
{"type": "bcl_completion", "input": "rule chiller_efficiency:\n    where:\n        element.type == \"chiller\"\n    # Complete this rule", "output": "rule chiller_efficiency:\n    where:\n        element.type == \"chiller\"\n        must:\n        if element.path == \"A\":  # Based on full load\n        if element.capacity < 150.tons:\n        element.cop >= 5.0 if element.type == \"water_cooled\"\n        element.cop >= 3.8 if element.type == \"air_cooled\"\n        elif element.capacity < 300.tons:\n        element.cop >= 5.55 if element.type == \"water_cooled\"\n        element.cop >= 3.9 if element.type == \"air_cooled\"\n        else:  # Path B - IPLV based\n        element.iplv >= element.minimum_iplv_requirement\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(7)\"\n    must:\n        if element.path == \"A\":  # Based on full load\n        if element.capacity < 150.tons:\n        element.cop >= 5.0 if element.type == \"water_cooled\"\n        element.cop >= 3.8 if element.type == \"air_cooled\"\n        elif element.capacity < 300.tons:\n        element.cop >= 5.55 if element.type == \"water_cooled\"\n        element.cop >= 3.9 if element.type == \"air_cooled\"\n        else:  # Path B - IPLV based\n        element.iplv >= element.minimum_iplv_requirement\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(7)\"\n    reference: \"FL.EnergyCode.2023.Table_C403.2.3(7)\"", "rule_name": "chiller_efficiency"}
{"type": "legal_to_bcl", "input": "Requirement for cooling tower performance: When element.type in [\"cooling_tower\", \"fluid_cooler\", \"evaporative_cooler\"] and must:, it is required that if element.type == \"open_circuit_cooling_tower\": and element.efficiency >= 38.2.gpm_per_hp  # At rated conditions", "output": "rule cooling_tower_performance:\n    where:\n        element.type in [\"cooling_tower\", \"fluid_cooler\", \"evaporative_cooler\"]\n        must:\n        if element.type == \"open_circuit_cooling_tower\":\n        element.efficiency >= 38.2.gpm_per_hp  # At rated conditions\n        elif element.type == \"closed_circuit_cooling_tower\":\n        element.efficiency >= 14.0.gpm_per_hp\n        element.drift_rate <= 0.002.percent_of_flow\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(8)\"\n    must:\n        if element.type == \"open_circuit_cooling_tower\":\n        element.efficiency >= 38.2.gpm_per_hp  # At rated conditions\n        elif element.type == \"closed_circuit_cooling_tower\":\n        element.efficiency >= 14.0.gpm_per_hp\n        element.drift_rate <= 0.002.percent_of_flow\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(8)\"\n    reference: \"FL.EnergyCode.2023.Table_C403.2.3(8)\"", "rule_name": "cooling_tower_performance"}
{"type": "bcl_to_physics", "input": "rule cooling_tower_performance with constraints: efficiency, efficiency", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.EnergyCode.2023.Table_C403.2.3(8)", "rule_name": "cooling_tower_performance"}
{"type": "bcl_completion", "input": "rule cooling_tower_performance:\n    where:\n        element.type in [\"cooling_tower\", \"fluid_cooler\", \"evaporative_cooler\"]\n    # Complete this rule", "output": "rule cooling_tower_performance:\n    where:\n        element.type in [\"cooling_tower\", \"fluid_cooler\", \"evaporative_cooler\"]\n        must:\n        if element.type == \"open_circuit_cooling_tower\":\n        element.efficiency >= 38.2.gpm_per_hp  # At rated conditions\n        elif element.type == \"closed_circuit_cooling_tower\":\n        element.efficiency >= 14.0.gpm_per_hp\n        element.drift_rate <= 0.002.percent_of_flow\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(8)\"\n    must:\n        if element.type == \"open_circuit_cooling_tower\":\n        element.efficiency >= 38.2.gpm_per_hp  # At rated conditions\n        elif element.type == \"closed_circuit_cooling_tower\":\n        element.efficiency >= 14.0.gpm_per_hp\n        element.drift_rate <= 0.002.percent_of_flow\n        reference: \"FL.EnergyCode.2023.Table_C403.2.3(8)\"\n    reference: \"FL.EnergyCode.2023.Table_C403.2.3(8)\"", "rule_name": "cooling_tower_performance"}
{"type": "legal_to_bcl", "input": "Requirement for commercial heating equipment: When element.type in [\"furnace\", \"boiler\", \"heat_pump\"] and element.application == \"commercial\", it is required that if element.type == \"warm_air_furnace\" and element.capacity < 225000.btu_per_hr: and element.thermal_efficiency >= 0.80 or element.afue >= 0.80", "output": "rule commercial_heating_equipment:\n    where:\n        element.type in [\"furnace\", \"boiler\", \"heat_pump\"]\n        element.application == \"commercial\"\n        must:\n        if element.type == \"warm_air_furnace\" and element.capacity < 225000.btu_per_hr:\n        element.thermal_efficiency >= 0.80 or element.afue >= 0.80\n        elif element.type == \"boiler\" and element.capacity < 300000.btu_per_hr:\n        element.afue >= 0.82\n        elif element.type == \"heat_pump\":\n        element.cop >= 3.2 at 47.degrees_f\n        element.cop >= 2.4 at 17.degrees_f\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    must:\n        if element.type == \"warm_air_furnace\" and element.capacity < 225000.btu_per_hr:\n        element.thermal_efficiency >= 0.80 or element.afue >= 0.80\n        elif element.type == \"boiler\" and element.capacity < 300000.btu_per_hr:\n        element.afue >= 0.82\n        elif element.type == \"heat_pump\":\n        element.cop >= 3.2 at 47.degrees_f\n        element.cop >= 2.4 at 17.degrees_f\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    reference: \"FL.EnergyCode.2023.C403.2.3\"", "rule_name": "commercial_heating_equipment"}
{"type": "bcl_to_physics", "input": "rule commercial_heating_equipment with constraints: capacity, thermal_efficiency", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.2.3", "rule_name": "commercial_heating_equipment"}
{"type": "bcl_completion", "input": "rule commercial_heating_equipment:\n    where:\n        element.type in [\"furnace\", \"boiler\", \"heat_pump\"]\n    # Complete this rule", "output": "rule commercial_heating_equipment:\n    where:\n        element.type in [\"furnace\", \"boiler\", \"heat_pump\"]\n        element.application == \"commercial\"\n        must:\n        if element.type == \"warm_air_furnace\" and element.capacity < 225000.btu_per_hr:\n        element.thermal_efficiency >= 0.80 or element.afue >= 0.80\n        elif element.type == \"boiler\" and element.capacity < 300000.btu_per_hr:\n        element.afue >= 0.82\n        elif element.type == \"heat_pump\":\n        element.cop >= 3.2 at 47.degrees_f\n        element.cop >= 2.4 at 17.degrees_f\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    must:\n        if element.type == \"warm_air_furnace\" and element.capacity < 225000.btu_per_hr:\n        element.thermal_efficiency >= 0.80 or element.afue >= 0.80\n        elif element.type == \"boiler\" and element.capacity < 300000.btu_per_hr:\n        element.afue >= 0.82\n        elif element.type == \"heat_pump\":\n        element.cop >= 3.2 at 47.degrees_f\n        element.cop >= 2.4 at 17.degrees_f\n        reference: \"FL.EnergyCode.2023.C403.2.3\"\n    reference: \"FL.EnergyCode.2023.C403.2.3\"", "rule_name": "commercial_heating_equipment"}
{"type": "legal_to_bcl", "input": "Requirement for vrf system requirements: When element.type == \"vrf_system\" and must:, it is required that element.has_variable_capacity_compressor == True and if element.system_type == \"heat_recovery\":", "output": "rule vrf_system_requirements:\n    where:\n        element.type == \"vrf_system\"\n        must:\n        element.has_variable_capacity_compressor == True\n        if element.system_type == \"heat_recovery\":\n        element.can_heat_and_cool_simultaneously == True\n        element.cooling_eer >= 11.2\n        element.heating_cop >= 3.9\n        reference: \"FL.Mechanical.2023.1102\"\n    must:\n        element.has_variable_capacity_compressor == True\n        if element.system_type == \"heat_recovery\":\n        element.can_heat_and_cool_simultaneously == True\n        element.cooling_eer >= 11.2\n        element.heating_cop >= 3.9\n        reference: \"FL.Mechanical.2023.1102\"\n    reference: \"FL.Mechanical.2023.1102\"", "rule_name": "vrf_system_requirements"}
{"type": "bcl_to_physics", "input": "rule vrf_system_requirements with constraints: cooling_eer, heating_cop", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.1102", "rule_name": "vrf_system_requirements"}
{"type": "bcl_completion", "input": "rule vrf_system_requirements:\n    where:\n        element.type == \"vrf_system\"\n    # Complete this rule", "output": "rule vrf_system_requirements:\n    where:\n        element.type == \"vrf_system\"\n        must:\n        element.has_variable_capacity_compressor == True\n        if element.system_type == \"heat_recovery\":\n        element.can_heat_and_cool_simultaneously == True\n        element.cooling_eer >= 11.2\n        element.heating_cop >= 3.9\n        reference: \"FL.Mechanical.2023.1102\"\n    must:\n        element.has_variable_capacity_compressor == True\n        if element.system_type == \"heat_recovery\":\n        element.can_heat_and_cool_simultaneously == True\n        element.cooling_eer >= 11.2\n        element.heating_cop >= 3.9\n        reference: \"FL.Mechanical.2023.1102\"\n    reference: \"FL.Mechanical.2023.1102\"", "rule_name": "vrf_system_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for rooftop unit installation: When element.type == \"rooftop_unit\" and element.location == \"roof\", it is required that element.has_roof_curb == True and element.curb_height >= 14.inches  # Florida rain protection", "output": "rule rooftop_unit_installation:\n    where:\n        element.type == \"rooftop_unit\"\n        element.location == \"roof\"\n        must:\n        element.has_roof_curb == True\n        element.curb_height >= 14.inches  # Florida rain protection\n        element.has_hurricane_straps == True\n        element.straps_rated_for_wind_zone == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    must:\n        element.has_roof_curb == True\n        element.curb_height >= 14.inches  # Florida rain protection\n        element.has_hurricane_straps == True\n        element.straps_rated_for_wind_zone == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    reference: \"FL.Mechanical.2023.304.11\"", "rule_name": "rooftop_unit_installation"}
{"type": "bcl_to_physics", "input": "rule rooftop_unit_installation with constraints: curb_height", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.304.11", "rule_name": "rooftop_unit_installation"}
{"type": "bcl_completion", "input": "rule rooftop_unit_installation:\n    where:\n        element.type == \"rooftop_unit\"\n    # Complete this rule", "output": "rule rooftop_unit_installation:\n    where:\n        element.type == \"rooftop_unit\"\n        element.location == \"roof\"\n        must:\n        element.has_roof_curb == True\n        element.curb_height >= 14.inches  # Florida rain protection\n        element.has_hurricane_straps == True\n        element.straps_rated_for_wind_zone == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    must:\n        element.has_roof_curb == True\n        element.curb_height >= 14.inches  # Florida rain protection\n        element.has_hurricane_straps == True\n        element.straps_rated_for_wind_zone == True\n        reference: \"FL.Mechanical.2023.304.11\"\n    reference: \"FL.Mechanical.2023.304.11\"", "rule_name": "rooftop_unit_installation"}
{"type": "legal_to_bcl", "input": "Requirement for equipment vibration isolation: When element.type in [\"chiller\", \"cooling_tower\", \"pump\", \"fan\"] and element.hp > 10 or element.weight > 500.pounds, it is required that element.has_vibration_isolation == True and if element.floor_level > 1:", "output": "rule equipment_vibration_isolation:\n    where:\n        element.type in [\"chiller\", \"cooling_tower\", \"pump\", \"fan\"]\n        element.hp > 10 or element.weight > 500.pounds\n        must:\n        element.has_vibration_isolation == True\n        if element.floor_level > 1:\n        element.isolator_type == \"spring\"\n        element.static_deflection >= 1.0.inch\n        reference: \"FL.Mechanical.2023.302.4\"\n    must:\n        element.has_vibration_isolation == True\n        if element.floor_level > 1:\n        element.isolator_type == \"spring\"\n        element.static_deflection >= 1.0.inch\n        reference: \"FL.Mechanical.2023.302.4\"\n    reference: \"FL.Mechanical.2023.302.4\"", "rule_name": "equipment_vibration_isolation"}
{"type": "bcl_to_physics", "input": "rule equipment_vibration_isolation with constraints: weight, static_deflection", "output": "This rule ensures safety through physics-based validation. Reference: FL.Mechanical.2023.302.4", "rule_name": "equipment_vibration_isolation"}
{"type": "bcl_completion", "input": "rule equipment_vibration_isolation:\n    where:\n        element.type in [\"chiller\", \"cooling_tower\", \"pump\", \"fan\"]\n    # Complete this rule", "output": "rule equipment_vibration_isolation:\n    where:\n        element.type in [\"chiller\", \"cooling_tower\", \"pump\", \"fan\"]\n        element.hp > 10 or element.weight > 500.pounds\n        must:\n        element.has_vibration_isolation == True\n        if element.floor_level > 1:\n        element.isolator_type == \"spring\"\n        element.static_deflection >= 1.0.inch\n        reference: \"FL.Mechanical.2023.302.4\"\n    must:\n        element.has_vibration_isolation == True\n        if element.floor_level > 1:\n        element.isolator_type == \"spring\"\n        element.static_deflection >= 1.0.inch\n        reference: \"FL.Mechanical.2023.302.4\"\n    reference: \"FL.Mechanical.2023.302.4\"", "rule_name": "equipment_vibration_isolation"}
{"type": "legal_to_bcl", "input": "Requirement for refrigeration equipment room: When element.type == \"refrigeration_equipment\" and element.refrigerant_charge > safety.room_charge_limit(element.refrigerant_class), it is required that element.located_in_machinery_room == True and element.room_has_ventilation == True", "output": "rule refrigeration_equipment_room:\n    where:\n        element.type == \"refrigeration_equipment\"\n        element.refrigerant_charge > safety.room_charge_limit(element.refrigerant_class)\n        must:\n        element.located_in_machinery_room == True\n        element.room_has_ventilation == True\n        element.room_has_refrigerant_detection == True\n        element.emergency_ventilation_rate >= flow.emergency_ventilation(\n        element.refrigerant_charge,\n        element.room_volume\n        )\n        reference: \"FL.Mechanical.2023.1105\"\n    must:\n        element.located_in_machinery_room == True\n        element.room_has_ventilation == True\n        element.room_has_refrigerant_detection == True\n        element.emergency_ventilation_rate >= flow.emergency_ventilation(\n        element.refrigerant_charge,\n        element.room_volume\n        )\n        reference: \"FL.Mechanical.2023.1105\"\n    reference: \"FL.Mechanical.2023.1105\"", "rule_name": "refrigeration_equipment_room"}
{"type": "bcl_to_physics", "input": "rule refrigeration_equipment_room with conditions: element.located_in_machinery_room == True, element.room_has_ventilation == True", "output": "This rule ensures safety through physics-based validation. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.Mechanical.2023.1105", "rule_name": "refrigeration_equipment_room"}
{"type": "bcl_completion", "input": "rule refrigeration_equipment_room:\n    where:\n        element.type == \"refrigeration_equipment\"\n    # Complete this rule", "output": "rule refrigeration_equipment_room:\n    where:\n        element.type == \"refrigeration_equipment\"\n        element.refrigerant_charge > safety.room_charge_limit(element.refrigerant_class)\n        must:\n        element.located_in_machinery_room == True\n        element.room_has_ventilation == True\n        element.room_has_refrigerant_detection == True\n        element.emergency_ventilation_rate >= flow.emergency_ventilation(\n        element.refrigerant_charge,\n        element.room_volume\n        )\n        reference: \"FL.Mechanical.2023.1105\"\n    must:\n        element.located_in_machinery_room == True\n        element.room_has_ventilation == True\n        element.room_has_refrigerant_detection == True\n        element.emergency_ventilation_rate >= flow.emergency_ventilation(\n        element.refrigerant_charge,\n        element.room_volume\n        )\n        reference: \"FL.Mechanical.2023.1105\"\n    reference: \"FL.Mechanical.2023.1105\"", "rule_name": "refrigeration_equipment_room"}
{"type": "legal_to_bcl", "input": "Requirement for heat recovery requirements: When element.type == \"hvac_system\" and element.outdoor_air_rate >= 5000.cfm, it is required that element.has_energy_recovery == True and element.sensible_effectiveness >= 0.50", "output": "rule heat_recovery_requirements:\n    where:\n        element.type == \"hvac_system\"\n        element.outdoor_air_rate >= 5000.cfm\n        element.design_supply_air >= 5000.cfm\n        must:\n        element.has_energy_recovery == True\n        element.sensible_effectiveness >= 0.50\n        element.has_bypass_for_economizer == True\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    must:\n        element.has_energy_recovery == True\n        element.sensible_effectiveness >= 0.50\n        element.has_bypass_for_economizer == True\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    reference: \"FL.EnergyCode.2023.C403.3.5\"", "rule_name": "heat_recovery_requirements"}
{"type": "bcl_to_physics", "input": "rule heat_recovery_requirements with constraints: outdoor_air_rate, design_supply_air", "output": "This rule ensures safety through physics-based validation. Reference: FL.EnergyCode.2023.C403.3.5", "rule_name": "heat_recovery_requirements"}
{"type": "bcl_completion", "input": "rule heat_recovery_requirements:\n    where:\n        element.type == \"hvac_system\"\n    # Complete this rule", "output": "rule heat_recovery_requirements:\n    where:\n        element.type == \"hvac_system\"\n        element.outdoor_air_rate >= 5000.cfm\n        element.design_supply_air >= 5000.cfm\n        must:\n        element.has_energy_recovery == True\n        element.sensible_effectiveness >= 0.50\n        element.has_bypass_for_economizer == True\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    must:\n        element.has_energy_recovery == True\n        element.sensible_effectiveness >= 0.50\n        element.has_bypass_for_economizer == True\n        reference: \"FL.EnergyCode.2023.C403.3.5\"\n    reference: \"FL.EnergyCode.2023.C403.3.5\"", "rule_name": "heat_recovery_requirements"}
{"type": "legal_to_bcl", "input": "Requirement for duct construction commercial: When element.type == \"duct_system\" and element.application == \"commercial\", it is required that element.seal_class >= \"A\"  # Pressure class dependent and element.leakage_class <= 4.0  # cfm/100sf at 1\" w.g.", "output": "rule duct_construction_commercial:\n    where:\n        element.type == \"duct_system\"\n        element.application == \"commercial\"\n        must:\n        element.seal_class >= \"A\"  # Pressure class dependent\n        element.leakage_class <= 4.0  # cfm/100sf at 1\" w.g.\n        if element.location in [\"unconditioned_space\", \"outdoors\"]:\n        element.insulation_r_value >= 8.0\n        reference: \"FL.EnergyCode.2023.C403.2.9\"\n        constraint equipment_psychrometric_process:\n        where:\n        element.type == \"cooling_coil\"\n        require:\n        psychrometrics.outlet_dewpoint(element) <= 55.degrees_f\n        element.sensible_heat_ratio >= 0.65 and element.sensible_heat_ratio <= 0.80\n        safety_factor: 1.1\n        constraint chilled_water_delta_t:\n        where:\n        element.type == \"chilled_water_system\"\n        require:\n        thermal.delta_t(element.return_temp, element.supply_temp) >= 15.degrees_f\n        flow.pumping_power(element) <= 0.22.watts_per_gpm\n        safety_factor: 1.0\n        constraint cooling_tower_approach:\n        where:\n        element.type == \"cooling_tower\"\n        require:\n        thermal.approach_temperature(element) >= 7.degrees_f\n        thermal.range(element) >= 10.degrees_f\n        element.cycles_of_concentration >= 3.0\n        safety_factor: 1.2\n        constraint refrigerant_subcooling_superheat:\n        where:\n        element.type == \"dx_system\"\n        require:\n        refrigeration.subcooling(element) >= 10.degrees_f\n        refrigeration.superheat(element) >= 5.degrees_f and\n        refrigeration.superheat(element) <= 15.degrees_f\n        safety_factor: 1.0\n        constraint vrf_refrigerant_piping:\n        where:\n        element.type == \"vrf_piping\"\n        require:\n        element.total_pipe_length <= 1000.feet\n        element.vertical_separation <= 130.feet\n        flow.refrigerant_velocity(element) >= flow.oil_return_velocity(\n        element.pipe_size,\n        element.refrigerant_type\n        )\n        safety_factor: 1.2\n        constraint equipment_part_load_efficiency:\n        where:\n        element.type in [\"chiller\", \"packaged_ac\", \"vrf_system\"]\n        require:\n        thermal.iplv(element) >= element.minimum_iplv\n        element.minimum_capacity <= 0.25 * element.rated_capacity\n    must:\n        element.seal_class >= \"A\"  # Pressure class dependent\n        element.leakage_class <= 4.0  # cfm/100sf at 1\" w.g.\n        if element.location in [\"unconditioned_space\", \"outdoors\"]:\n        element.insulation_r_value >= 8.0\n        reference: \"FL.EnergyCode.2023.C403.2.9\"\n        constraint equipment_psychrometric_process:\n        where:\n        element.type == \"cooling_coil\"\n        require:\n        psychrometrics.outlet_dewpoint(element) <= 55.degrees_f\n        element.sensible_heat_ratio >= 0.65 and element.sensible_heat_ratio <= 0.80\n        safety_factor: 1.1\n        constraint chilled_water_delta_t:\n        where:\n        element.type == \"chilled_water_system\"\n        require:\n        thermal.delta_t(element.return_temp, element.supply_temp) >= 15.degrees_f\n        flow.pumping_power(element) <= 0.22.watts_per_gpm\n        safety_factor: 1.0\n        constraint cooling_tower_approach:\n        where:\n        element.type == \"cooling_tower\"\n        require:\n        thermal.approach_temperature(element) >= 7.degrees_f\n        thermal.range(element) >= 10.degrees_f\n        element.cycles_of_concentration >= 3.0\n        safety_factor: 1.2\n        constraint refrigerant_subcooling_superheat:\n        where:\n        element.type == \"dx_system\"\n        require:\n        refrigeration.subcooling(element) >= 10.degrees_f\n        refrigeration.superheat(element) >= 5.degrees_f and\n        refrigeration.superheat(element) <= 15.degrees_f\n        safety_factor: 1.0\n        constraint vrf_refrigerant_piping:\n        where:\n        element.type == \"vrf_piping\"\n        require:\n        element.total_pipe_length <= 1000.feet\n        element.vertical_separation <= 130.feet\n        flow.refrigerant_velocity(element) >= flow.oil_return_velocity(\n        element.pipe_size,\n        element.refrigerant_type\n        )\n        safety_factor: 1.2\n        constraint equipment_part_load_efficiency:\n        where:\n        element.type in [\"chiller\", \"packaged_ac\", \"vrf_system\"]\n        require:\n        thermal.iplv(element) >= element.minimum_iplv\n        element.minimum_capacity <= 0.25 * element.rated_capacity\n    safety_factor: 1.1\n    reference: \"FL.EnergyCode.2023.C403.2.9\"", "rule_name": "duct_construction_commercial"}
{"type": "bcl_to_physics", "input": "rule duct_construction_commercial with constraints: leakage_class, insulation_r_value", "output": "This rule ensures safety through physics-based validation. A safety factor of 1.1 is applied to account for uncertainties. Temperature constraints ensure thermal safety and material integrity. Flow dynamics are validated to ensure proper drainage and prevent backflow. Reference: FL.EnergyCode.2023.C403.2.9", "rule_name": "duct_construction_commercial"}
{"type": "bcl_completion", "input": "rule duct_construction_commercial:\n    where:\n        element.type == \"duct_system\"\n    # Complete this rule", "output": "rule duct_construction_commercial:\n    where:\n        element.type == \"duct_system\"\n        element.application == \"commercial\"\n        must:\n        element.seal_class >= \"A\"  # Pressure class dependent\n        element.leakage_class <= 4.0  # cfm/100sf at 1\" w.g.\n        if element.location in [\"unconditioned_space\", \"outdoors\"]:\n        element.insulation_r_value >= 8.0\n        reference: \"FL.EnergyCode.2023.C403.2.9\"\n        constraint equipment_psychrometric_process:\n        where:\n        element.type == \"cooling_coil\"\n        require:\n        psychrometrics.outlet_dewpoint(element) <= 55.degrees_f\n        element.sensible_heat_ratio >= 0.65 and element.sensible_heat_ratio <= 0.80\n        safety_factor: 1.1\n        constraint chilled_water_delta_t:\n        where:\n        element.type == \"chilled_water_system\"\n        require:\n        thermal.delta_t(element.return_temp, element.supply_temp) >= 15.degrees_f\n        flow.pumping_power(element) <= 0.22.watts_per_gpm\n        safety_factor: 1.0\n        constraint cooling_tower_approach:\n        where:\n        element.type == \"cooling_tower\"\n        require:\n        thermal.approach_temperature(element) >= 7.degrees_f\n        thermal.range(element) >= 10.degrees_f\n        element.cycles_of_concentration >= 3.0\n        safety_factor: 1.2\n        constraint refrigerant_subcooling_superheat:\n        where:\n        element.type == \"dx_system\"\n        require:\n        refrigeration.subcooling(element) >= 10.degrees_f\n        refrigeration.superheat(element) >= 5.degrees_f and\n        refrigeration.superheat(element) <= 15.degrees_f\n        safety_factor: 1.0\n        constraint vrf_refrigerant_piping:\n        where:\n        element.type == \"vrf_piping\"\n        require:\n        element.total_pipe_length <= 1000.feet\n        element.vertical_separation <= 130.feet\n        flow.refrigerant_velocity(element) >= flow.oil_return_velocity(\n        element.pipe_size,\n        element.refrigerant_type\n        )\n        safety_factor: 1.2\n        constraint equipment_part_load_efficiency:\n        where:\n        element.type in [\"chiller\", \"packaged_ac\", \"vrf_system\"]\n        require:\n        thermal.iplv(element) >= element.minimum_iplv\n        element.minimum_capacity <= 0.25 * element.rated_capacity\n    must:\n        element.seal_class >= \"A\"  # Pressure class dependent\n        element.leakage_class <= 4.0  # cfm/100sf at 1\" w.g.\n        if element.location in [\"unconditioned_space\", \"outdoors\"]:\n        element.insulation_r_value >= 8.0\n        reference: \"FL.EnergyCode.2023.C403.2.9\"\n        constraint equipment_psychrometric_process:\n        where:\n        element.type == \"cooling_coil\"\n        require:\n        psychrometrics.outlet_dewpoint(element) <= 55.degrees_f\n        element.sensible_heat_ratio >= 0.65 and element.sensible_heat_ratio <= 0.80\n        safety_factor: 1.1\n        constraint chilled_water_delta_t:\n        where:\n        element.type == \"chilled_water_system\"\n        require:\n        thermal.delta_t(element.return_temp, element.supply_temp) >= 15.degrees_f\n        flow.pumping_power(element) <= 0.22.watts_per_gpm\n        safety_factor: 1.0\n        constraint cooling_tower_approach:\n        where:\n        element.type == \"cooling_tower\"\n        require:\n        thermal.approach_temperature(element) >= 7.degrees_f\n        thermal.range(element) >= 10.degrees_f\n        element.cycles_of_concentration >= 3.0\n        safety_factor: 1.2\n        constraint refrigerant_subcooling_superheat:\n        where:\n        element.type == \"dx_system\"\n        require:\n        refrigeration.subcooling(element) >= 10.degrees_f\n        refrigeration.superheat(element) >= 5.degrees_f and\n        refrigeration.superheat(element) <= 15.degrees_f\n        safety_factor: 1.0\n        constraint vrf_refrigerant_piping:\n        where:\n        element.type == \"vrf_piping\"\n        require:\n        element.total_pipe_length <= 1000.feet\n        element.vertical_separation <= 130.feet\n        flow.refrigerant_velocity(element) >= flow.oil_return_velocity(\n        element.pipe_size,\n        element.refrigerant_type\n        )\n        safety_factor: 1.2\n        constraint equipment_part_load_efficiency:\n        where:\n        element.type in [\"chiller\", \"packaged_ac\", \"vrf_system\"]\n        require:\n        thermal.iplv(element) >= element.minimum_iplv\n        element.minimum_capacity <= 0.25 * element.rated_capacity\n    safety_factor: 1.1\n    reference: \"FL.EnergyCode.2023.C403.2.9\"", "rule_name": "duct_construction_commercial"}
{"type": "safety_factor_reasoning", "input": "For duct_construction_commercial rule for general safety, what safety factor should be applied?", "output": "A safety factor of 1.1 is appropriate because this involves standard safety requirements with well-understood physics. This aligns with FL.EnergyCode.2023.C403.2.9.", "rule_name": "duct_construction_commercial", "safety_factor": 1.1}
